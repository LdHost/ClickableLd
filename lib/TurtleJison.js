const { JisonParser, o } = require('@ts-jison/parser');
/**
 * parser generated by  @ts-jison/parser-generator 0.4.1-alpha.2
 * @returns Parser implementing JisonParserApi and a Lexer implementing JisonLexerApi.
 */

  /*
    ShEx parser in the Jison parser generator format.
  */

  const RDF = 'http://www.w3.org/1999/02/22-rdf-syntax-ns#',
      RDF_TYPE  = RDF + 'type',
      RDF_FIRST = RDF + 'first',
      RDF_REST  = RDF + 'rest',
      RDF_NIL   = RDF + 'nil',
      XSD = 'http://www.w3.org/2001/XMLSchema#',
      XSD_INTEGER  = XSD + 'integer',
      XSD_DECIMAL  = XSD + 'decimal',
      XSD_FLOAT   = XSD + 'float',
      XSD_DOUBLE   = XSD + 'double',
      XSD_BOOLEAN  = XSD + 'boolean',
      XSD_TRUE =  '"true"^^'  + XSD_BOOLEAN,
      XSD_FALSE = '"false"^^' + XSD_BOOLEAN,
      XSD_PATTERN        = XSD + 'pattern',
      XSD_MININCLUSIVE   = XSD + 'minInclusive',
      XSD_MINEXCLUSIVE   = XSD + 'minExclusive',
      XSD_MAXINCLUSIVE   = XSD + 'maxInclusive',
      XSD_MAXEXCLUSIVE   = XSD + 'maxExclusive',
      XSD_LENGTH         = XSD + 'length',
      XSD_MINLENGTH      = XSD + 'minLength',
      XSD_MAXLENGTH      = XSD + 'maxLength',
      XSD_TOTALDIGITS    = XSD + 'totalDigits',
      XSD_FRACTIONDIGITS = XSD + 'fractionDigits';

  const numericDatatypes = [
      XSD + "integer",
      XSD + "decimal",
      XSD + "float",
      XSD + "double",
      XSD + "string",
      XSD + "boolean",
      XSD + "dateTime",
      XSD + "nonPositiveInteger",
      XSD + "negativeInteger",
      XSD + "long",
      XSD + "int",
      XSD + "short",
      XSD + "byte",
      XSD + "nonNegativeInteger",
      XSD + "unsignedLong",
      XSD + "unsignedInt",
      XSD + "unsignedShort",
      XSD + "unsignedByte",
      XSD + "positiveInteger"
  ];

  const absoluteIRI = /^[a-z][a-z0-9+.-]*:/i;

class TurtleJisonParser extends JisonParser {
    constructor(yy = {}, lexer = new TurtleJisonLexer(yy)) {
        super(yy, lexer);
        this.symbols_ = {"error":2,"turtleDoc":3,"WS":4,"Qstatement_E_Star":5,"EOF":6,"statement":7,"directive":8,"triples":9,"GT_DOT":10,"prefixID":11,"base":12,"sparqlPrefix":13,"sparqlBase":14,"PREFIX":15,"PNAME_NS":16,"IRIREF":17,"BASE":18,"SPARQL_PREFIX":19,"SPARQL_BASE":20,"subject":21,"predicateObjectList":22,"SET_SUBJECT":23,"QpredicateObjectList_E_Opt":24,"blankNodePropertyList":25,"verb":26,"objectList":27,"Q_O_QGT_SEMI_E_S_Qverb_E_S_QobjectList_E_Opt_C_E_Star":28,"O_Qverb_E_S_QobjectList_E_C":29,"Q_O_Qverb_E_S_QobjectList_E_C_E_Opt":30,"O_QGT_SEMI_E_S_Qverb_E_S_QobjectList_E_Opt_C":31,"GT_SEMI":32,"object":33,"Q_O_QGT_COMMA_E_S_Qobject_E_C_E_Star":34,"O_QGT_COMMA_E_S_Qobject_E_C":35,"GT_COMMA":36,"predicate":37,"RDF_TYPE":38,"iri":39,"BlankNode":40,"collection":41,"literal":42,"RDFLiteral":43,"NumericLiteral":44,"BooleanLiteral":45,"NEW_SUBJECT":46,"GT_RBRACKET":47,"GT_LBRACKET":48,"GT_LPAREN":49,"Qobject_E_Star":50,"GT_RPAREN":51,"collectionObject":52,"INTEGER":53,"DECIMAL":54,"DOUBLE":55,"String":56,"Q_O_QLANGTAG_E_Or_QGT_DTYPE_E_S_Qiri_E_C_E_Opt":57,"O_QLANGTAG_E_Or_QGT_DTYPE_E_S_Qiri_E_C":58,"LANGTAG":59,"GT_DTYPE":60,"IT_true":61,"IT_false":62,"STRING_LITERAL1":63,"STRING_LITERAL2":64,"STRING_LITERAL_LONG1":65,"STRING_LITERAL_LONG2":66,"PrefixedName":67,"PNAME_LN":68,"BLANK_NODE_LABEL":69,"ANON":70,"$accept":0,"$end":1};
        this.terminals_ = {2:"error",6:"EOF",10:"GT_DOT",15:"PREFIX",16:"PNAME_NS",17:"IRIREF",18:"BASE",19:"SPARQL_PREFIX",20:"SPARQL_BASE",32:"GT_SEMI",36:"GT_COMMA",38:"RDF_TYPE",47:"GT_RBRACKET",48:"GT_LBRACKET",49:"GT_LPAREN",51:"GT_RPAREN",53:"INTEGER",54:"DECIMAL",55:"DOUBLE",59:"LANGTAG",60:"GT_DTYPE",61:"IT_true",62:"IT_false",63:"STRING_LITERAL1",64:"STRING_LITERAL2",65:"STRING_LITERAL_LONG1",66:"STRING_LITERAL_LONG2",68:"PNAME_LN",69:"BLANK_NODE_LABEL",70:"ANON"};
        this.productions_ = [0,[3,3],[4,0],[5,0],[5,2],[7,1],[7,3],[8,1],[8,1],[8,1],[8,1],[11,4],[12,3],[13,5],[14,2],[9,3],[9,2],[23,1],[24,0],[24,1],[22,5],[29,4],[30,0],[30,1],[31,2],[28,0],[28,2],[27,3],[35,3],[34,0],[34,2],[26,1],[26,1],[21,1],[21,1],[21,1],[37,1],[33,1],[33,1],[33,1],[33,1],[33,1],[42,1],[42,1],[42,1],[25,5],[46,2],[41,3],[50,0],[50,2],[52,1],[52,1],[52,1],[52,1],[52,1],[44,1],[44,1],[44,1],[43,3],[58,1],[58,3],[57,0],[57,1],[45,1],[45,1],[56,1],[56,1],[56,1],[56,1],[39,1],[39,1],[67,1],[67,1],[40,1],[40,1]];

        // shorten static method to just `o` for terse STATE_TABLE
        const $V0=[6,15,16,17,18,19,20,48,49,68,69,70],$V1=[2,2],$V2=[1,30],$V3=[16,17,38,68],$V4=[1,42],$V5=[1,39],$V6=[1,37],$V7=[1,41],$V8=[10,16,17,38,68],$V9=[2,69],$Va=[2,70],$Vb=[2,73],$Vc=[2,74],$Vd=[16,17,48,49,51,53,54,55,61,62,63,64,65,66,68,69,70],$Ve=[2,48],$Vf=[2,71],$Vg=[2,72],$Vh=[16,17,48,49,53,54,55,61,62,63,64,65,66,68,69,70],$Vi=[1,73],$Vj=[1,63],$Vk=[1,67],$Vl=[1,75],$Vm=[1,76],$Vn=[1,77],$Vo=[1,78],$Vp=[1,79],$Vq=[1,80],$Vr=[1,81],$Vs=[1,82],$Vt=[1,83],$Vu=[1,72],$Vv=[1,65],$Vw=[1,66],$Vx=[1,103],$Vy=[1,93],$Vz=[1,102],$VA=[2,47],$VB=[2,42],$VC=[2,43],$VD=[2,44],$VE=[16,17,48,49,51,53,54,55,59,60,61,62,63,64,65,66,68,69,70],$VF=[2,55],$VG=[2,56],$VH=[2,57],$VI=[2,63],$VJ=[2,64],$VK=[2,65],$VL=[2,66],$VM=[2,67],$VN=[2,68],$VO=[10,32],$VP=[10,32,36],$VQ=[2,37],$VR=[2,38],$VS=[2,39],$VT=[2,40],$VU=[2,41],$VV=[10,32,36,59,60],$VW=[2,61],$VX=[1,151],$VY=[1,141],$VZ=[1,150],$V_=[2,25],$V$=[2,29],$V01=[2,58],$V11=[2,62],$V21=[2,59],$V31=[16,17,68],$V41=[2,45],$V51=[32,47],$V61=[32,36,47],$V71=[32,36,47,59,60],$V81=[2,20],$V91=[2,27],$Va1=[2,26],$Vb1=[2,22],$Vc1=[2,30],$Vd1=[2,60],$Ve1=[2,24],$Vf1=[2,23],$Vg1=[1,222],$Vh1=[1,212],$Vi1=[1,221],$Vj1=[2,28],$Vk1=[1,260],$Vl1=[1,250],$Vm1=[1,259],$Vn1=[1,288],$Vo1=[1,278],$Vp1=[1,287],$Vq1=[2,21],$Vr1=[1,332],$Vs1=[1,322],$Vt1=[1,331],$Vu1=[1,400],$Vv1=[1,390],$Vw1=[1,399],$Vx1=[1,433],$Vy1=[1,423],$Vz1=[1,432];
        const o = JisonParser.expandParseTable;
        this.table = [o($V0,$V1,{3:1,4:2}),{1:[3]},o($V0,[2,3],{5:3}),{6:[1,4],7:5,8:6,9:7,11:8,12:9,13:10,14:11,15:[1,14],16:[1,29],17:[1,22],18:[1,15],19:[1,16],20:[1,17],21:12,23:13,25:21,39:18,40:19,41:20,46:27,48:$V2,49:[1,26],67:23,68:[1,28],69:[1,24],70:[1,25]},{1:[2,1]},o($V0,[2,4]),o($V0,[2,5]),{4:31,10:$V1},o($V0,[2,7]),o($V0,[2,8]),o($V0,[2,9]),o($V0,[2,10]),o($V3,$V1,{4:32}),{10:[2,18],16:$V4,17:$V5,22:34,24:33,26:35,37:36,38:$V6,39:38,67:40,68:$V7},{16:[1,43]},{17:[1,44]},{4:45,16:$V1},{17:[1,46]},o($V3,[2,33]),o($V3,[2,34]),o($V3,[2,35]),o($V8,[2,17]),o($V3,$V9),o($V3,$Va),o($V3,$Vb),o($V3,$Vc),o($Vd,$Ve,{50:47}),o($V3,$V1,{4:48}),o($V3,$Vf),o($V3,$Vg),o($V3,$V1,{4:49}),{10:[1,50]},{16:$V4,17:$V5,22:51,26:35,37:36,38:$V6,39:38,67:40,68:$V7},{10:[2,16]},{10:[2,19]},o($Vh,$V1,{4:52}),o($Vh,[2,31]),o($Vh,[2,32]),o($Vh,[2,36]),o($Vh,$V9),o($Vh,$Va),o($Vh,$Vf),o($Vh,$Vg),{17:[1,53]},{10:[1,54]},{16:[1,55]},o($V0,[2,14]),{16:$Vi,17:$Vj,25:61,39:58,40:59,41:60,42:62,43:69,44:70,45:71,46:68,48:$V2,49:$Vk,51:[1,56],52:57,53:$Vl,54:$Vm,55:$Vn,56:74,61:$Vo,62:$Vp,63:$Vq,64:$Vr,65:$Vs,66:$Vt,67:64,68:$Vu,69:$Vv,70:$Vw},{16:$V4,17:$V5,22:84,26:85,37:36,38:$V6,39:38,67:40,68:$V7},o($V3,[2,46]),o($V0,[2,6]),{10:[2,15]},{16:$Vx,17:$Vy,25:91,27:86,33:87,39:88,40:89,41:90,42:92,43:99,44:100,45:101,46:98,48:$V2,49:[1,97],53:[1,105],54:[1,106],55:[1,107],56:104,61:[1,108],62:[1,109],63:[1,110],64:[1,111],65:[1,112],66:[1,113],67:94,68:$Vz,69:[1,95],70:[1,96]},{10:[1,114]},o($V0,[2,12]),{4:115,17:$V1},o($V3,$VA),o($Vd,[2,49]),o($Vd,[2,50]),o($Vd,[2,51]),o($Vd,[2,52]),o($Vd,[2,53]),o($Vd,[2,54]),o($Vd,$V9),o($Vd,$Va),o($Vd,$Vb),o($Vd,$Vc),o($Vd,$Ve,{50:116}),o($V3,$V1,{4:117}),o($Vd,$VB),o($Vd,$VC),o($Vd,$VD),o($Vd,$Vf),o($Vd,$Vg),o($VE,$V1,{4:118}),o($Vd,$VF),o($Vd,$VG),o($Vd,$VH),o($Vd,$VI),o($Vd,$VJ),o($VE,$VK),o($VE,$VL),o($VE,$VM),o($VE,$VN),{4:119,47:$V1},o($Vh,$V1,{4:120}),o($VO,$V1,{4:121}),o($VP,$V1,{4:122}),o($VP,$VQ),o($VP,$VR),o($VP,$VS),o($VP,$VT),o($VP,$VU),o($VP,$V9),o($VP,$Va),o($VP,$Vb),o($VP,$Vc),o($Vd,$Ve,{50:123}),o($V3,$V1,{4:124}),o($VP,$VB),o($VP,$VC),o($VP,$VD),o($VP,$Vf),o($VP,$Vg),o($VV,$V1,{4:125}),o($VP,$VF),o($VP,$VG),o($VP,$VH),o($VP,$VI),o($VP,$VJ),o($VV,$VK),o($VV,$VL),o($VV,$VM),o($VV,$VN),o($V0,[2,11]),{17:[1,126]},{16:$Vi,17:$Vj,25:61,39:58,40:59,41:60,42:62,43:69,44:70,45:71,46:68,48:$V2,49:$Vk,51:[1,127],52:57,53:$Vl,54:$Vm,55:$Vn,56:74,61:$Vo,62:$Vp,63:$Vq,64:$Vr,65:$Vs,66:$Vt,67:64,68:$Vu,69:$Vv,70:$Vw},{16:$V4,17:$V5,22:128,26:85,37:36,38:$V6,39:38,67:40,68:$V7},o($Vd,$VW,{57:129,58:130,59:[1,131],60:[1,132]}),{47:[1,133]},{16:$VX,17:$VY,25:139,27:134,33:135,39:136,40:137,41:138,42:140,43:147,44:148,45:149,46:146,48:$V2,49:[1,145],53:[1,153],54:[1,154],55:[1,155],56:152,61:[1,156],62:[1,157],63:[1,158],64:[1,159],65:[1,160],66:[1,161],67:142,68:$VZ,69:[1,143],70:[1,144]},o($VO,$V_,{28:162}),o($VP,$V$,{34:163}),{16:$Vi,17:$Vj,25:61,39:58,40:59,41:60,42:62,43:69,44:70,45:71,46:68,48:$V2,49:$Vk,51:[1,164],52:57,53:$Vl,54:$Vm,55:$Vn,56:74,61:$Vo,62:$Vp,63:$Vq,64:$Vr,65:$Vs,66:$Vt,67:64,68:$Vu,69:$Vv,70:$Vw},{16:$V4,17:$V5,22:165,26:85,37:36,38:$V6,39:38,67:40,68:$V7},o($VP,$VW,{57:166,58:167,59:[1,168],60:[1,169]}),o($V0,[2,13]),o($Vd,$VA),{4:170,47:$V1},o($Vd,$V01),o($Vd,$V11),o($Vd,$V21),o($V31,$V1,{4:171}),o($V8,$V41),o($V51,$V1,{4:172}),o($V61,$V1,{4:173}),o($V61,$VQ),o($V61,$VR),o($V61,$VS),o($V61,$VT),o($V61,$VU),o($V61,$V9),o($V61,$Va),o($V61,$Vb),o($V61,$Vc),o($Vd,$Ve,{50:174}),o($V3,$V1,{4:175}),o($V61,$VB),o($V61,$VC),o($V61,$VD),o($V61,$Vf),o($V61,$Vg),o($V71,$V1,{4:176}),o($V61,$VF),o($V61,$VG),o($V61,$VH),o($V61,$VI),o($V61,$VJ),o($V71,$VK),o($V71,$VL),o($V71,$VM),o($V71,$VN),{10:$V81,31:177,32:[1,178]},o($VO,$V91,{35:179,36:[1,180]}),o($VP,$VA),{4:181,47:$V1},o($VP,$V01),o($VP,$V11),o($VP,$V21),o($V31,$V1,{4:182}),{47:[1,183]},{16:$Vi,17:$Vj,39:184,67:64,68:$Vu},o($V51,$V_,{28:185}),o($V61,$V$,{34:186}),{16:$Vi,17:$Vj,25:61,39:58,40:59,41:60,42:62,43:69,44:70,45:71,46:68,48:$V2,49:$Vk,51:[1,187],52:57,53:$Vl,54:$Vm,55:$Vn,56:74,61:$Vo,62:$Vp,63:$Vq,64:$Vr,65:$Vs,66:$Vt,67:64,68:$Vu,69:$Vv,70:$Vw},{16:$V4,17:$V5,22:188,26:85,37:36,38:$V6,39:38,67:40,68:$V7},o($V61,$VW,{57:189,58:190,59:[1,191],60:[1,192]}),o($VO,$Va1),o($V3,$V1,{30:193,29:194,4:195,10:$Vb1,32:$Vb1}),o($VP,$Vc1),o($Vh,$V1,{4:196}),{47:[1,197]},{16:$Vx,17:$Vy,39:198,67:94,68:$Vz},o($Vd,$V41),o($Vd,$Vd1),{31:199,32:[1,200],47:$V81},o($V51,$V91,{35:201,36:[1,202]}),o($V61,$VA),{4:203,47:$V1},o($V61,$V01),o($V61,$V11),o($V61,$V21),o($V31,$V1,{4:204}),o($VO,$Ve1),o($VO,$Vf1),{16:$V4,17:$V5,26:205,37:36,38:$V6,39:38,67:40,68:$V7},{16:$Vg1,17:$Vh1,25:210,33:206,39:207,40:208,41:209,42:211,43:218,44:219,45:220,46:217,48:$V2,49:[1,216],53:[1,224],54:[1,225],55:[1,226],56:223,61:[1,227],62:[1,228],63:[1,229],64:[1,230],65:[1,231],66:[1,232],67:213,68:$Vi1,69:[1,214],70:[1,215]},o($VP,$V41),o($VP,$Vd1),o($V51,$Va1),o($V3,$V1,{30:233,29:234,4:235,32:$Vb1,47:$Vb1}),o($V61,$Vc1),o($Vh,$V1,{4:236}),{47:[1,237]},{16:$VX,17:$VY,39:238,67:142,68:$VZ},o($Vh,$V1,{4:239}),o($VP,$Vj1),o($VP,$VQ),o($VP,$VR),o($VP,$VS),o($VP,$VT),o($VP,$VU),o($VP,$V9),o($VP,$Va),o($VP,$Vb),o($VP,$Vc),o($Vd,$Ve,{50:240}),o($V3,$V1,{4:241}),o($VP,$VB),o($VP,$VC),o($VP,$VD),o($VP,$Vf),o($VP,$Vg),o($VV,$V1,{4:242}),o($VP,$VF),o($VP,$VG),o($VP,$VH),o($VP,$VI),o($VP,$VJ),o($VV,$VK),o($VV,$VL),o($VV,$VM),o($VV,$VN),o($V51,$Ve1),o($V51,$Vf1),{16:$V4,17:$V5,26:243,37:36,38:$V6,39:38,67:40,68:$V7},{16:$Vk1,17:$Vl1,25:248,33:244,39:245,40:246,41:247,42:249,43:256,44:257,45:258,46:255,48:$V2,49:[1,254],53:[1,262],54:[1,263],55:[1,264],56:261,61:[1,265],62:[1,266],63:[1,267],64:[1,268],65:[1,269],66:[1,270],67:251,68:$Vm1,69:[1,252],70:[1,253]},o($V61,$V41),o($V61,$Vd1),{16:$Vn1,17:$Vo1,25:276,27:271,33:272,39:273,40:274,41:275,42:277,43:284,44:285,45:286,46:283,48:$V2,49:[1,282],53:[1,290],54:[1,291],55:[1,292],56:289,61:[1,293],62:[1,294],63:[1,295],64:[1,296],65:[1,297],66:[1,298],67:279,68:$Vp1,69:[1,280],70:[1,281]},{16:$Vi,17:$Vj,25:61,39:58,40:59,41:60,42:62,43:69,44:70,45:71,46:68,48:$V2,49:$Vk,51:[1,299],52:57,53:$Vl,54:$Vm,55:$Vn,56:74,61:$Vo,62:$Vp,63:$Vq,64:$Vr,65:$Vs,66:$Vt,67:64,68:$Vu,69:$Vv,70:$Vw},{16:$V4,17:$V5,22:300,26:85,37:36,38:$V6,39:38,67:40,68:$V7},o($VP,$VW,{57:301,58:302,59:[1,303],60:[1,304]}),o($Vh,$V1,{4:305}),o($V61,$Vj1),o($V61,$VQ),o($V61,$VR),o($V61,$VS),o($V61,$VT),o($V61,$VU),o($V61,$V9),o($V61,$Va),o($V61,$Vb),o($V61,$Vc),o($Vd,$Ve,{50:306}),o($V3,$V1,{4:307}),o($V61,$VB),o($V61,$VC),o($V61,$VD),o($V61,$Vf),o($V61,$Vg),o($V71,$V1,{4:308}),o($V61,$VF),o($V61,$VG),o($V61,$VH),o($V61,$VI),o($V61,$VJ),o($V71,$VK),o($V71,$VL),o($V71,$VM),o($V71,$VN),o($VO,$Vq1),o($VP,$V1,{4:309}),o($VP,$VQ),o($VP,$VR),o($VP,$VS),o($VP,$VT),o($VP,$VU),o($VP,$V9),o($VP,$Va),o($VP,$Vb),o($VP,$Vc),o($Vd,$Ve,{50:310}),o($V3,$V1,{4:311}),o($VP,$VB),o($VP,$VC),o($VP,$VD),o($VP,$Vf),o($VP,$Vg),o($VV,$V1,{4:312}),o($VP,$VF),o($VP,$VG),o($VP,$VH),o($VP,$VI),o($VP,$VJ),o($VV,$VK),o($VV,$VL),o($VV,$VM),o($VV,$VN),o($VP,$VA),{4:313,47:$V1},o($VP,$V01),o($VP,$V11),o($VP,$V21),o($V31,$V1,{4:314}),{16:$Vr1,17:$Vs1,25:320,27:315,33:316,39:317,40:318,41:319,42:321,43:328,44:329,45:330,46:327,48:$V2,49:[1,326],53:[1,334],54:[1,335],55:[1,336],56:333,61:[1,337],62:[1,338],63:[1,339],64:[1,340],65:[1,341],66:[1,342],67:323,68:$Vt1,69:[1,324],70:[1,325]},{16:$Vi,17:$Vj,25:61,39:58,40:59,41:60,42:62,43:69,44:70,45:71,46:68,48:$V2,49:$Vk,51:[1,343],52:57,53:$Vl,54:$Vm,55:$Vn,56:74,61:$Vo,62:$Vp,63:$Vq,64:$Vr,65:$Vs,66:$Vt,67:64,68:$Vu,69:$Vv,70:$Vw},{16:$V4,17:$V5,22:344,26:85,37:36,38:$V6,39:38,67:40,68:$V7},o($V61,$VW,{57:345,58:346,59:[1,347],60:[1,348]}),o($VP,$V$,{34:349}),{16:$Vi,17:$Vj,25:61,39:58,40:59,41:60,42:62,43:69,44:70,45:71,46:68,48:$V2,49:$Vk,51:[1,350],52:57,53:$Vl,54:$Vm,55:$Vn,56:74,61:$Vo,62:$Vp,63:$Vq,64:$Vr,65:$Vs,66:$Vt,67:64,68:$Vu,69:$Vv,70:$Vw},{16:$V4,17:$V5,22:351,26:85,37:36,38:$V6,39:38,67:40,68:$V7},o($VP,$VW,{57:352,58:353,59:[1,354],60:[1,355]}),{47:[1,356]},{16:$Vg1,17:$Vh1,39:357,67:213,68:$Vi1},o($V51,$Vq1),o($V61,$V1,{4:358}),o($V61,$VQ),o($V61,$VR),o($V61,$VS),o($V61,$VT),o($V61,$VU),o($V61,$V9),o($V61,$Va),o($V61,$Vb),o($V61,$Vc),o($Vd,$Ve,{50:359}),o($V3,$V1,{4:360}),o($V61,$VB),o($V61,$VC),o($V61,$VD),o($V61,$Vf),o($V61,$Vg),o($V71,$V1,{4:361}),o($V61,$VF),o($V61,$VG),o($V61,$VH),o($V61,$VI),o($V61,$VJ),o($V71,$VK),o($V71,$VL),o($V71,$VM),o($V71,$VN),o($V61,$VA),{4:362,47:$V1},o($V61,$V01),o($V61,$V11),o($V61,$V21),o($V31,$V1,{4:363}),o($VO,$V91,{35:364,36:[1,365]}),o($VP,$VA),{4:366,47:$V1},o($VP,$V01),o($VP,$V11),o($VP,$V21),o($V31,$V1,{4:367}),o($VP,$V41),o($VP,$Vd1),o($V61,$V$,{34:368}),{16:$Vi,17:$Vj,25:61,39:58,40:59,41:60,42:62,43:69,44:70,45:71,46:68,48:$V2,49:$Vk,51:[1,369],52:57,53:$Vl,54:$Vm,55:$Vn,56:74,61:$Vo,62:$Vp,63:$Vq,64:$Vr,65:$Vs,66:$Vt,67:64,68:$Vu,69:$Vv,70:$Vw},{16:$V4,17:$V5,22:370,26:85,37:36,38:$V6,39:38,67:40,68:$V7},o($V61,$VW,{57:371,58:372,59:[1,373],60:[1,374]}),{47:[1,375]},{16:$Vk1,17:$Vl1,39:376,67:251,68:$Vm1},o($VP,$Vc1),o($Vh,$V1,{4:377}),{47:[1,378]},{16:$Vn1,17:$Vo1,39:379,67:279,68:$Vp1},o($V51,$V91,{35:380,36:[1,381]}),o($V61,$VA),{4:382,47:$V1},o($V61,$V01),o($V61,$V11),o($V61,$V21),o($V31,$V1,{4:383}),o($V61,$V41),o($V61,$Vd1),{16:$Vu1,17:$Vv1,25:388,33:384,39:385,40:386,41:387,42:389,43:396,44:397,45:398,46:395,48:$V2,49:[1,394],53:[1,402],54:[1,403],55:[1,404],56:401,61:[1,405],62:[1,406],63:[1,407],64:[1,408],65:[1,409],66:[1,410],67:391,68:$Vw1,69:[1,392],70:[1,393]},o($VP,$V41),o($VP,$Vd1),o($V61,$Vc1),o($Vh,$V1,{4:411}),{47:[1,412]},{16:$Vr1,17:$Vs1,39:413,67:323,68:$Vt1},o($VP,$Vj1),o($VP,$VQ),o($VP,$VR),o($VP,$VS),o($VP,$VT),o($VP,$VU),o($VP,$V9),o($VP,$Va),o($VP,$Vb),o($VP,$Vc),o($Vd,$Ve,{50:414}),o($V3,$V1,{4:415}),o($VP,$VB),o($VP,$VC),o($VP,$VD),o($VP,$Vf),o($VP,$Vg),o($VV,$V1,{4:416}),o($VP,$VF),o($VP,$VG),o($VP,$VH),o($VP,$VI),o($VP,$VJ),o($VV,$VK),o($VV,$VL),o($VV,$VM),o($VV,$VN),{16:$Vx1,17:$Vy1,25:421,33:417,39:418,40:419,41:420,42:422,43:429,44:430,45:431,46:428,48:$V2,49:[1,427],53:[1,435],54:[1,436],55:[1,437],56:434,61:[1,438],62:[1,439],63:[1,440],64:[1,441],65:[1,442],66:[1,443],67:424,68:$Vz1,69:[1,425],70:[1,426]},o($V61,$V41),o($V61,$Vd1),{16:$Vi,17:$Vj,25:61,39:58,40:59,41:60,42:62,43:69,44:70,45:71,46:68,48:$V2,49:$Vk,51:[1,444],52:57,53:$Vl,54:$Vm,55:$Vn,56:74,61:$Vo,62:$Vp,63:$Vq,64:$Vr,65:$Vs,66:$Vt,67:64,68:$Vu,69:$Vv,70:$Vw},{16:$V4,17:$V5,22:445,26:85,37:36,38:$V6,39:38,67:40,68:$V7},o($VP,$VW,{57:446,58:447,59:[1,448],60:[1,449]}),o($V61,$Vj1),o($V61,$VQ),o($V61,$VR),o($V61,$VS),o($V61,$VT),o($V61,$VU),o($V61,$V9),o($V61,$Va),o($V61,$Vb),o($V61,$Vc),o($Vd,$Ve,{50:450}),o($V3,$V1,{4:451}),o($V61,$VB),o($V61,$VC),o($V61,$VD),o($V61,$Vf),o($V61,$Vg),o($V71,$V1,{4:452}),o($V61,$VF),o($V61,$VG),o($V61,$VH),o($V61,$VI),o($V61,$VJ),o($V71,$VK),o($V71,$VL),o($V71,$VM),o($V71,$VN),o($VP,$VA),{4:453,47:$V1},o($VP,$V01),o($VP,$V11),o($VP,$V21),o($V31,$V1,{4:454}),{16:$Vi,17:$Vj,25:61,39:58,40:59,41:60,42:62,43:69,44:70,45:71,46:68,48:$V2,49:$Vk,51:[1,455],52:57,53:$Vl,54:$Vm,55:$Vn,56:74,61:$Vo,62:$Vp,63:$Vq,64:$Vr,65:$Vs,66:$Vt,67:64,68:$Vu,69:$Vv,70:$Vw},{16:$V4,17:$V5,22:456,26:85,37:36,38:$V6,39:38,67:40,68:$V7},o($V61,$VW,{57:457,58:458,59:[1,459],60:[1,460]}),{47:[1,461]},{16:$Vu1,17:$Vv1,39:462,67:391,68:$Vw1},o($V61,$VA),{4:463,47:$V1},o($V61,$V01),o($V61,$V11),o($V61,$V21),o($V31,$V1,{4:464}),o($VP,$V41),o($VP,$Vd1),{47:[1,465]},{16:$Vx1,17:$Vy1,39:466,67:424,68:$Vz1},o($V61,$V41),o($V61,$Vd1)];
        this.defaultActions = {4:[2,1],33:[2,16],34:[2,19],51:[2,15]};
    }
    performAction (yytext, yyleng, yylineno, yy, yystate /* action[1] */, $$ /* vstack */, _$ /* lstack */) {
/* this == yyval */
          const $0 = $$.length - 1;
        switch (yystate) {
case 1:

        return { statementList: $$[$0-2].concat($$[$0-1]) };
      
break;
case 2: case 18: case 22: case 25:
this.$ = yy.getWhitespace();
break;
case 3: case 29: case 48:
this.$ = [];
break;
case 4:
this.$ = $$[$0-1].concat($$[$0]);
break;
case 6:
this.$ = $$[$0-2].concat($$[$0-1], $$[$0], yy.getWhitespace());;
break;
case 11:

        yy._prefixes[$$[$0-2].slice(0, -1)] = $$[$0-1];
      
break;
case 12:

        yy._setBase(yy._base === null ||
                    absoluteIRI.test($$[$0-1].slice(1, -1)) ? $$[$0-1].slice(1, -1) : yy._resolveIRI($$[$0-1].slice(1, -1)));
      
break;
case 13:

        yy._prefixes[$$[$0-2].value] = $$[$0].value;
        this.$ = [{ "type": "sparqlPrefix", keyword: $$[$0-4], ws1: $$[$0-3], prefix: $$[$0-2], ws2: $$[$0-1], namespace: $$[$0] }].concat(yy.getWhitespace());
      
break;
case 14:

        yy._setBase(yy._base === null ||
                    absoluteIRI.test($$[$0].slice(1, -1)) ? $$[$0].slice(1, -1) : yy._resolveIRI($$[$0].slice(1, -1)));
      
break;
case 15:
this.$ = yy.finishSubject([{ type: "subject_predicateObjectList", subject: $$[$0-2], ws1: $$[$0-1], predicateObjectList: $$[$0]}].concat(yy.getWhitespace()));
break;
case 16:
this.$ = yy.finishSubject($$[$0-1].concat($$[$0])) // blankNodePropertyList _QpredicateObjectList_E_Opt;
break;
case 17:
 yy.setSubject($$[$0].node); this.$ = $$[$0].elts.concat(yy.getWhitespace()); 
break;
case 19:
this.$ = $$[$0].concat(yy.getWhitespace());;
break;
case 20:
this.$ = [{ type: "verb_objectList", verb: $$[$0-4], ws1: $$[$0-3], objectList: $$[$0-2].concat($$[$0-1]) }].concat($$[$0]).concat(yy.getWhitespace()) // verb objectList _Q_O_QGT_SEMI_E_S_Qverb_E_S_QobjectList_E_Opt_C_E_Star;
break;
case 21:
this.$ = $$[$0-3].concat([{ type: "verb_objectList", verb: $$[$0-2], ws1: $$[$0-1], objectList: $$[$0] }], yy.getWhitespace());
break;
case 23:
this.$ =$$[$0].concat(yy.getWhitespace());
break;
case 24:
this.$ = [$$[$0-1]].concat($$[$0], yy.getWhitespace());
break;
case 26:
this.$ = $$[$0-1].concat($$[$0], yy.getWhitespace()) // Q_O_QGT_SEMI_E_S_Qverb_E_S_QobjectList_E_Opt_C_E_Star _O_QGT_SEMI_E_S_Qverb_E_S_QobjectList_E_Opt_C;
break;
case 27:
this.$ = yy.finishObjectList($$[$0-2].concat($$[$0-1], $$[$0])) // object _Q_O_QGT_COMMA_E_S_Qobject_E_C_E_Star;
break;
case 28:
this.$ = [$$[$0-2]].concat($$[$0-1], $$[$0], yy.getWhitespace());
break;
case 30:
this.$ = $$[$0-1].concat($$[$0]) // Q_O_QGT_COMMA_E_S_Qobject_E_C_E_Star _O_QGT_COMMA_E_S_Qobject_E_C;
break;
case 31:
this.$ = yy.setPredicate($$[$0]);
break;
case 32:
this.$ = yy.setPredicate({ "type": "a", "origText": "a" }) // left is a token, right a const;
break;
case 33: case 34:
this.$ = yy.setSubject($$[$0]);
break;
case 35:
this.$ = yy.collectionSubject($$[$0]);
break;
case 37: case 38: case 41:
this.$ = [yy.finishTriple($$[$0])];
break;
case 39:
this.$ = [yy.finishTriple($$[$0][0].subject)].concat($$[$0]) // collection;
break;
case 40:
 yy.finishTriple($$[$0].node); this.$ = $$[$0].elts; 
break;
case 45:
this.$ = yy.finishBlankNodePropertyList($$[$0-4], $$[$0-3].concat($$[$0-2], $$[$0-1]), $$[$0]);
break;
case 46:
this.$ = yy.startBlankNodePropertyList($$[$0-1], $$[$0]);;
break;
case 47:
this.$ = $$[$0-1];
break;
case 49:
this.$ = $$[$0-1].concat($$[$0]) // Qobject_E_Star object;
break;
case 50: case 51: case 54:
this.$ = {node: $$[$0], nested: []};
break;
case 52:
this.$ = yy.makeFirstRest($$[$0]) // collection collection;
break;
case 53:
this.$ = {node: $$[$0][0].subject, nested: $$[$0]} // collection blankNodePropertyList;
break;
case 55:
this.$ = yy.createTypedLiteral($$[$0], XSD_INTEGER);
break;
case 56:
this.$ = yy.createTypedLiteral($$[$0], XSD_DECIMAL);
break;
case 57:
this.$ = yy.createTypedLiteral($$[$0], XSD_DOUBLE);
break;
case 58:
this.$ = yy.createParsedLiteral($$[$0].type, $$[$0-2], $$[$0-1], $$[$0].attrs);
break;
case 59:
this.$ = { type: "langTagLiteral", attrs: { language: $$[$0] } };
break;
case 60:
this.$ = { type: "datatypedLiteral", attrs: { datatype: { type: "ParsedDatatype", value: $$[$0].value, token: $$[$0-2], ws1: $$[$0-1], iri: $$[$0] } } };
break;
case 61:
this.$ = { type: "simpleLiteral", attrs: {} };
break;
case 63: case 64:
this.$ = yy.createTypedLiteral($$[$0], XSD_BOOLEAN);
break;
case 73:
this.$ = yy.createBlankNode($$[$0]);
break;
case 74:
this.$ = yy.createBlankNode();
break;
        }
    }
}

// Export module
Object.defineProperty(exports, "__esModule", { value: true });
exports.TurtleJisonParser = TurtleJisonParser;


/* generated by @ts-jison/lexer-generator 0.4.1-alpha.2 */
const { JisonLexer } = require('@ts-jison/lexer');

class TurtleJisonLexer extends JisonLexer {
    constructor (yy = {}) {
        super(yy);
        this.options = {"moduleName":"TurtleJison"};
        this.rules = [
        /^(?:\s+)/,
        /^(?:#[^\u000a\u000d]*|\/\*(?:[^*]|\*(?:[^/]|\\\/))*\*\/)/,
        /^(?:\.)/,
        /^(?:;)/,
        /^(?:,)/,
        /^(?:\[)/,
        /^(?:\])/,
        /^(?:\()/,
        /^(?:\))/,
        /^(?:\^\^)/,
        /^(?:true\b)/,
        /^(?:false\b)/,
        /^(?:[Pp][Rr][Ee][Ff][Ii][Xx])/,
        /^(?:[Bb][Aa][Ss][Ee])/,
        /^(?:@base\b)/,
        /^(?:@prefix\b)/,
        /^(?:<(?:[^\u0000-\u0020<>\"{}|^`\\]|\\u(?:[0-9]|[A-F]|[a-f])(?:[0-9]|[A-F]|[a-f])(?:[0-9]|[A-F]|[a-f])(?:[0-9]|[A-F]|[a-f])|\\U(?:[0-9]|[A-F]|[a-f])(?:[0-9]|[A-F]|[a-f])(?:[0-9]|[A-F]|[a-f])(?:[0-9]|[A-F]|[a-f])(?:[0-9]|[A-F]|[a-f])(?:[0-9]|[A-F]|[a-f])(?:[0-9]|[A-F]|[a-f])(?:[0-9]|[A-F]|[a-f]))*>)/,
        /^(?:(?:(?:[A-Z]|[a-z]|[\u00c0-\u00d6]|[\u00d8-\u00f6]|[\u00f8-\u02ff]|[\u0370-\u037d]|[\u037f-\u1fff]|[\u200c-\u200d]|[\u2070-\u218f]|[\u2c00-\u2fef]|[\u3001-\ud7ff]|[\uf900-\ufdcf]|[\ufdf0-\ufffd]|[\uD800-\uDB7F][\uDC00-\uDFFF])(?:(?:[A-Z]|[a-z]|[\u00c0-\u00d6]|[\u00d8-\u00f6]|[\u00f8-\u02ff]|[\u0370-\u037d]|[\u037f-\u1fff]|[\u200c-\u200d]|[\u2070-\u218f]|[\u2c00-\u2fef]|[\u3001-\ud7ff]|[\uf900-\ufdcf]|[\ufdf0-\ufffd]|[\uD800-\uDB7F][\uDC00-\uDFFF]|_|_|-|[0-9]|[\u00b7]|[\u0300-\u036f]|[\u203f-\u2040]|\.)*(?:[A-Z]|[a-z]|[\u00c0-\u00d6]|[\u00d8-\u00f6]|[\u00f8-\u02ff]|[\u0370-\u037d]|[\u037f-\u1fff]|[\u200c-\u200d]|[\u2070-\u218f]|[\u2c00-\u2fef]|[\u3001-\ud7ff]|[\uf900-\ufdcf]|[\ufdf0-\ufffd]|[\uD800-\uDB7F][\uDC00-\uDFFF]|_|_|-|[0-9]|[\u00b7]|[\u0300-\u036f]|[\u203f-\u2040]))?)?:(?:[A-Z]|[a-z]|[\u00c0-\u00d6]|[\u00d8-\u00f6]|[\u00f8-\u02ff]|[\u0370-\u037d]|[\u037f-\u1fff]|[\u200c-\u200d]|[\u2070-\u218f]|[\u2c00-\u2fef]|[\u3001-\ud7ff]|[\uf900-\ufdcf]|[\ufdf0-\ufffd]|[\uD800-\uDB7F][\uDC00-\uDFFF]|_|_|:|[0-9]|%(?:[0-9]|[A-F]|[a-f])(?:[0-9]|[A-F]|[a-f])|\\(?:_|~|\.|-|!|\$|&|'|\(|\)|\*|\+|,|;|=|\/|\?|#|@|%))(?:[A-Z]|[a-z]|[\u00c0-\u00d6]|[\u00d8-\u00f6]|[\u00f8-\u02ff]|[\u0370-\u037d]|[\u037f-\u1fff]|[\u200c-\u200d]|[\u2070-\u218f]|[\u2c00-\u2fef]|[\u3001-\ud7ff]|[\uf900-\ufdcf]|[\ufdf0-\ufffd]|[\uD800-\uDB7F][\uDC00-\uDFFF]|_|_|-|[0-9]|[\u00b7]|[\u0300-\u036f]|[\u203f-\u2040]|\.|:|%(?:[0-9]|[A-F]|[a-f])(?:[0-9]|[A-F]|[a-f])|\\(?:_|~|\.|-|!|\$|&|'|\(|\)|\*|\+|,|;|=|\/|\?|#|@|%))*)/,
        /^(?:(?:(?:[A-Z]|[a-z]|[\u00c0-\u00d6]|[\u00d8-\u00f6]|[\u00f8-\u02ff]|[\u0370-\u037d]|[\u037f-\u1fff]|[\u200c-\u200d]|[\u2070-\u218f]|[\u2c00-\u2fef]|[\u3001-\ud7ff]|[\uf900-\ufdcf]|[\ufdf0-\ufffd]|[\uD800-\uDB7F][\uDC00-\uDFFF])(?:(?:[A-Z]|[a-z]|[\u00c0-\u00d6]|[\u00d8-\u00f6]|[\u00f8-\u02ff]|[\u0370-\u037d]|[\u037f-\u1fff]|[\u200c-\u200d]|[\u2070-\u218f]|[\u2c00-\u2fef]|[\u3001-\ud7ff]|[\uf900-\ufdcf]|[\ufdf0-\ufffd]|[\uD800-\uDB7F][\uDC00-\uDFFF]|_|_|-|[0-9]|[\u00b7]|[\u0300-\u036f]|[\u203f-\u2040]|\.)*(?:[A-Z]|[a-z]|[\u00c0-\u00d6]|[\u00d8-\u00f6]|[\u00f8-\u02ff]|[\u0370-\u037d]|[\u037f-\u1fff]|[\u200c-\u200d]|[\u2070-\u218f]|[\u2c00-\u2fef]|[\u3001-\ud7ff]|[\uf900-\ufdcf]|[\ufdf0-\ufffd]|[\uD800-\uDB7F][\uDC00-\uDFFF]|_|_|-|[0-9]|[\u00b7]|[\u0300-\u036f]|[\u203f-\u2040]))?)?:)/,
        /^(?:_:(?:[A-Z]|[a-z]|[\u00c0-\u00d6]|[\u00d8-\u00f6]|[\u00f8-\u02ff]|[\u0370-\u037d]|[\u037f-\u1fff]|[\u200c-\u200d]|[\u2070-\u218f]|[\u2c00-\u2fef]|[\u3001-\ud7ff]|[\uf900-\ufdcf]|[\ufdf0-\ufffd]|[\uD800-\uDB7F][\uDC00-\uDFFF]|_|_|[0-9])(?:(?:[A-Z]|[a-z]|[\u00c0-\u00d6]|[\u00d8-\u00f6]|[\u00f8-\u02ff]|[\u0370-\u037d]|[\u037f-\u1fff]|[\u200c-\u200d]|[\u2070-\u218f]|[\u2c00-\u2fef]|[\u3001-\ud7ff]|[\uf900-\ufdcf]|[\ufdf0-\ufffd]|[\uD800-\uDB7F][\uDC00-\uDFFF]|_|_|-|[0-9]|[\u00b7]|[\u0300-\u036f]|[\u203f-\u2040]|\.)*(?:[A-Z]|[a-z]|[\u00c0-\u00d6]|[\u00d8-\u00f6]|[\u00f8-\u02ff]|[\u0370-\u037d]|[\u037f-\u1fff]|[\u200c-\u200d]|[\u2070-\u218f]|[\u2c00-\u2fef]|[\u3001-\ud7ff]|[\uf900-\ufdcf]|[\ufdf0-\ufffd]|[\uD800-\uDB7F][\uDC00-\uDFFF]|_|_|-|[0-9]|[\u00b7]|[\u0300-\u036f]|[\u203f-\u2040]))?)/,
        /^(?:@[A-Za-z]+(?:-[0-9A-Za-z]+)*)/,
        /^(?:[+-]?[0-9]+)/,
        /^(?:[+-]?[0-9]*\.[0-9]+)/,
        /^(?:[+-]?(?:[0-9]+\.[0-9]*[Ee][+-]?[0-9]+|\.?[0-9]+[Ee][+-]?[0-9]+))/,
        /^(?:'(?:[^\u0027\u005c\u000a\u000d]|\\[\"\'\\bfnrt]|\\u(?:[0-9]|[A-F]|[a-f])(?:[0-9]|[A-F]|[a-f])(?:[0-9]|[A-F]|[a-f])(?:[0-9]|[A-F]|[a-f])|\\U(?:[0-9]|[A-F]|[a-f])(?:[0-9]|[A-F]|[a-f])(?:[0-9]|[A-F]|[a-f])(?:[0-9]|[A-F]|[a-f])(?:[0-9]|[A-F]|[a-f])(?:[0-9]|[A-F]|[a-f])(?:[0-9]|[A-F]|[a-f])(?:[0-9]|[A-F]|[a-f]))*')/,
        /^(?:"(?:[^\u0022\u005c\u000a\u000d]|\\[\"\'\\bfnrt]|\\u(?:[0-9]|[A-F]|[a-f])(?:[0-9]|[A-F]|[a-f])(?:[0-9]|[A-F]|[a-f])(?:[0-9]|[A-F]|[a-f])|\\U(?:[0-9]|[A-F]|[a-f])(?:[0-9]|[A-F]|[a-f])(?:[0-9]|[A-F]|[a-f])(?:[0-9]|[A-F]|[a-f])(?:[0-9]|[A-F]|[a-f])(?:[0-9]|[A-F]|[a-f])(?:[0-9]|[A-F]|[a-f])(?:[0-9]|[A-F]|[a-f]))*")/,
        /^(?:'''(?:(?:'|'')?(?:[^\'\\]|\\[\"\'\\bfnrt]|\\u(?:[0-9]|[A-F]|[a-f])(?:[0-9]|[A-F]|[a-f])(?:[0-9]|[A-F]|[a-f])(?:[0-9]|[A-F]|[a-f])|\\U(?:[0-9]|[A-F]|[a-f])(?:[0-9]|[A-F]|[a-f])(?:[0-9]|[A-F]|[a-f])(?:[0-9]|[A-F]|[a-f])(?:[0-9]|[A-F]|[a-f])(?:[0-9]|[A-F]|[a-f])(?:[0-9]|[A-F]|[a-f])(?:[0-9]|[A-F]|[a-f])))*''')/,
        /^(?:"""(?:(?:"|"")?(?:[^\"\\]|\\[\"\'\\bfnrt]|\\u(?:[0-9]|[A-F]|[a-f])(?:[0-9]|[A-F]|[a-f])(?:[0-9]|[A-F]|[a-f])(?:[0-9]|[A-F]|[a-f])|\\U(?:[0-9]|[A-F]|[a-f])(?:[0-9]|[A-F]|[a-f])(?:[0-9]|[A-F]|[a-f])(?:[0-9]|[A-F]|[a-f])(?:[0-9]|[A-F]|[a-f])(?:[0-9]|[A-F]|[a-f])(?:[0-9]|[A-F]|[a-f])(?:[0-9]|[A-F]|[a-f])))*""")/,
        /^(?:\\\[(?: |\\t|\\r|\\n)*\\\])/,
        /^(?:a\b)/,
        /^(?:$)/,
        /^(?:[a-zA-Z0-9_-]+)/,
        /^(?:.)/
    ];
        this.conditions = {"INITIAL":{"rules":[0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32],"inclusive":true}};
    }
    performAction (yy, yy_, $avoiding_name_collisions, YY_START) {
              let YYSTATE = YY_START;
            switch ($avoiding_name_collisions) {
    case 0:
  // space eaten by whitespace and comments
  if (yy.skipped.last_line === yy_.yylloc.first_line &&
      yy.skipped.last_column === yy_.yylloc.first_column) {
    // immediately follows a skipped span
    yy.skipped.last_line = yy_.yylloc.last_line;
    yy.skipped.last_column = yy_.yylloc.last_column;
  } else {
    // follows something else
    yy.skipped = yy_.yylloc
  };
  yy.addWhitespace({type: "ws", origText: yy_.yytext});

      break;
    case 1:
  // space eaten by whitespace and comments
  if (yy.skipped.last_line === yy_.yylloc.first_line &&
      yy.skipped.last_column === yy_.yylloc.first_column) {
    // immediately follows a skipped span
    yy.skipped.last_line = yy_.yylloc.last_line;
    yy.skipped.last_column = yy_.yylloc.last_column;
  } else {
    // follows something else
    yy.skipped = yy_.yylloc
  };
  yy.addWhitespace({type: "comment", origText: yy_.yytext});

      break;
    case 2:yy_.yytext = { type: "token", origText: yy_.yytext }; return 10;
    case 3:yy_.yytext = { type: "token", origText: yy_.yytext }; return 32;
    case 4:yy_.yytext = { type: "token", origText: yy_.yytext }; return 36;
    case 5:yy_.yytext = { type: "startBNode", origText: yy_.yytext }; return 48;
    case 6:yy_.yytext = { type: "endBNode", origText: yy_.yytext }; return 47;
    case 7:yy_.yytext = { type: "token", origText: yy_.yytext }; return 49;
    case 8:yy_.yytext = { type: "token", origText: yy_.yytext }; return 51;
    case 9:yy_.yytext = { type: "token", origText: yy_.yytext }; return 60;
    case 10:yy_.yytext = { type: "boolean", origText: yy_.yytext }; return 61;
    case 11:yy_.yytext = { type: "boolean", origText: yy_.yytext }; return 62;
    case 12:yy_.yytext = { type: "KEYWORD", origText: yy_.yytext }; return 19;
    case 13:yy_.yytext = { type: "KEYWORD", origText: yy_.yytext }; return 20;
    case 14:yy_.yytext = { type: "KEYWORD", origText: yy_.yytext }; return 18;
    case 15:yy_.yytext = { type: "KEYWORD", origText: yy_.yytext }; return 15;
    case 16:yy_.yytext = yy.createRelativeIri(yy_.yytext); return 17;
    case 17:yy_.yytext = yy.parsePName(yy_.yytext); return 68;
    case 18:yy_.yytext = yy.parsePrefix(yy_.yytext); return 16;
    case 19:yy_.yytext = { type: "token", origText: yy_.yytext }; return 69;
    case 20:yy_.yytext = { type: "LANGTAG", value: yy_.yytext.substring(1), origText: yy_.yytext }; return 59;
    case 21:yy_.yytext = { type: "INTEGER", value: yy_.yytext, origText: yy_.yytext }; return 53;
    case 22:yy_.yytext = { type: "DECIMAL", value: yy_.yytext, origText: yy_.yytext }; return 54;
    case 23:yy_.yytext = { type: "DOUBLE",  value: yy_.yytext, origText: yy_.yytext }; return 55;
    case 24:yy_.yytext = { type: "STRING_LITERAL1", value: yy.unescapeString(yy_.yytext, 1), origText: yy_.yytext }; return 63;
    case 25:yy_.yytext = { type: "STRING_LITERAL2", value: yy.unescapeString(yy_.yytext, 1), origText: yy_.yytext }; return 64;
    case 26:yy_.yytext = { type: "STRING_LITERAL_LONG1", value: yy.unescapeString(yy_.yytext, 3), origText: yy_.yytext }; return 65;
    case 27:yy_.yytext = { type: "STRING_LITERAL_LONG2", value: yy.unescapeString(yy_.yytext, 3), origText: yy_.yytext }; return 66;
    case 28:yy_.yytext = { type: "ANON", origText: yy_.yytext }; return 70;
    case 29:yy_.yytext = { type: "keyword", origText: yy_.yytext }; return 38;
    case 30:return 6;
    case 31:return 'unexpected word "'+yy_.yytext+'"';
    case 32:return 'invalid character '+yy_.yytext;
        }
    }
}


// Export module
Object.defineProperty(exports, "__esModule", { value: true });
exports.TurtleJisonLexer = TurtleJisonLexer;


const { JisonParser, o } = require('@ts-jison/parser');
/**
 * parser generated by  @ts-jison/parser-generator 0.4.1-alpha.2
 * @returns Parser implementing JisonParserApi and a Lexer implementing JisonLexerApi.
 */

  /*
    ShEx parser in the Jison parser generator format.
  */

  const RDF = 'http://www.w3.org/1999/02/22-rdf-syntax-ns#',
      RDF_TYPE  = RDF + 'type',
      RDF_FIRST = RDF + 'first',
      RDF_REST  = RDF + 'rest',
      RDF_NIL   = RDF + 'nil',
      XSD = 'http://www.w3.org/2001/XMLSchema#',
      XSD_INTEGER  = XSD + 'integer',
      XSD_DECIMAL  = XSD + 'decimal',
      XSD_FLOAT   = XSD + 'float',
      XSD_DOUBLE   = XSD + 'double',
      XSD_BOOLEAN  = XSD + 'boolean',
      XSD_TRUE =  '"true"^^'  + XSD_BOOLEAN,
      XSD_FALSE = '"false"^^' + XSD_BOOLEAN,
      XSD_PATTERN        = XSD + 'pattern',
      XSD_MININCLUSIVE   = XSD + 'minInclusive',
      XSD_MINEXCLUSIVE   = XSD + 'minExclusive',
      XSD_MAXINCLUSIVE   = XSD + 'maxInclusive',
      XSD_MAXEXCLUSIVE   = XSD + 'maxExclusive',
      XSD_LENGTH         = XSD + 'length',
      XSD_MINLENGTH      = XSD + 'minLength',
      XSD_MAXLENGTH      = XSD + 'maxLength',
      XSD_TOTALDIGITS    = XSD + 'totalDigits',
      XSD_FRACTIONDIGITS = XSD + 'fractionDigits';

  const numericDatatypes = [
      XSD + "integer",
      XSD + "decimal",
      XSD + "float",
      XSD + "double",
      XSD + "string",
      XSD + "boolean",
      XSD + "dateTime",
      XSD + "nonPositiveInteger",
      XSD + "negativeInteger",
      XSD + "long",
      XSD + "int",
      XSD + "short",
      XSD + "byte",
      XSD + "nonNegativeInteger",
      XSD + "unsignedLong",
      XSD + "unsignedInt",
      XSD + "unsignedShort",
      XSD + "unsignedByte",
      XSD + "positiveInteger"
  ];

  const absoluteIRI = /^[a-z][a-z0-9+.-]*:/i;

class TurtleJisonParser extends JisonParser {
    constructor(yy = {}, lexer = new TurtleJisonLexer(yy)) {
        super(yy, lexer);
        this.symbols_ = {"error":2,"turtleDoc":3,"WS":4,"Qstatement_E_Star":5,"EOF":6,"statement":7,"directive":8,"triples":9,"GT_DOT":10,"prefixID":11,"base":12,"sparqlPrefix":13,"sparqlBase":14,"PREFIX":15,"PNAME_NS":16,"IRIREF":17,"BASE":18,"SPARQL_PREFIX":19,"SPARQL_BASE":20,"subject":21,"predicateObjectList":22,"collection_SUBJECT":23,"blankNodePropertyList_SUBJECT":24,"QpredicateObjectList_E_Opt":25,"collection":26,"blankNodePropertyList":27,"verb":28,"objectList":29,"Q_O_QGT_SEMI_E_S_Qverb_E_S_QobjectList_E_Opt_C_E_Star":30,"O_Qverb_E_S_QobjectList_E_C":31,"Q_O_Qverb_E_S_QobjectList_E_C_E_Opt":32,"O_QGT_SEMI_E_S_Qverb_E_S_QobjectList_E_Opt_C":33,"GT_SEMI":34,"object":35,"Q_O_QGT_COMMA_E_S_Qobject_E_C_E_Star":36,"O_QGT_COMMA_E_S_Qobject_E_C":37,"GT_COMMA":38,"predicate":39,"RDF_TYPE":40,"iri":41,"BlankNode":42,"literal":43,"RDFLiteral":44,"NumericLiteral":45,"BooleanLiteral":46,"NEW_SUBJECT":47,"GT_RBRACKET":48,"GT_LBRACKET":49,"GT_LPAREN":50,"Qobject_E_Star":51,"GT_RPAREN":52,"collectionObject":53,"INTEGER":54,"DECIMAL":55,"DOUBLE":56,"String":57,"Q_O_QLANGTAG_E_Or_QGT_DTYPE_E_S_Qiri_E_C_E_Opt":58,"O_QLANGTAG_E_Or_QGT_DTYPE_E_S_Qiri_E_C":59,"LANGTAG":60,"GT_DTYPE":61,"IT_true":62,"IT_false":63,"STRING_LITERAL1":64,"STRING_LITERAL2":65,"STRING_LITERAL_LONG1":66,"STRING_LITERAL_LONG2":67,"PrefixedName":68,"PNAME_LN":69,"BLANK_NODE_LABEL":70,"ANON":71,"$accept":0,"$end":1};
        this.terminals_ = {2:"error",6:"EOF",10:"GT_DOT",15:"PREFIX",16:"PNAME_NS",17:"IRIREF",18:"BASE",19:"SPARQL_PREFIX",20:"SPARQL_BASE",34:"GT_SEMI",38:"GT_COMMA",40:"RDF_TYPE",48:"GT_RBRACKET",49:"GT_LBRACKET",50:"GT_LPAREN",52:"GT_RPAREN",54:"INTEGER",55:"DECIMAL",56:"DOUBLE",60:"LANGTAG",61:"GT_DTYPE",62:"IT_true",63:"IT_false",64:"STRING_LITERAL1",65:"STRING_LITERAL2",66:"STRING_LITERAL_LONG1",67:"STRING_LITERAL_LONG2",69:"PNAME_LN",70:"BLANK_NODE_LABEL",71:"ANON"};
        this.productions_ = [0,[3,3],[4,0],[5,0],[5,2],[7,1],[7,3],[8,1],[8,1],[8,1],[8,1],[11,4],[12,3],[13,5],[14,2],[9,3],[9,3],[9,2],[23,1],[24,1],[25,0],[25,1],[22,5],[31,4],[32,0],[32,1],[33,2],[30,0],[30,2],[29,3],[37,3],[36,0],[36,2],[28,1],[28,1],[21,1],[21,1],[39,1],[35,1],[35,1],[35,1],[35,1],[35,1],[43,1],[43,1],[43,1],[27,5],[47,2],[26,5],[51,0],[51,2],[53,1],[53,1],[53,1],[53,1],[53,1],[45,1],[45,1],[45,1],[44,3],[59,1],[59,3],[58,0],[58,1],[46,1],[46,1],[57,1],[57,1],[57,1],[57,1],[41,1],[41,1],[68,1],[68,1],[42,1],[42,1]];

        // shorten static method to just `o` for terse STATE_TABLE
        const $V0=[6,15,16,17,18,19,20,49,50,69,70,71],$V1=[2,2],$V2=[1,31],$V3=[16,17,40,69],$V4=[1,44],$V5=[1,41],$V6=[1,39],$V7=[1,43],$V8=[10,16,17,40,69],$V9=[2,70],$Va=[2,71],$Vb=[2,74],$Vc=[2,75],$Vd=[16,17,49,50,52,54,55,56,62,63,64,65,66,67,69,70,71],$Ve=[2,72],$Vf=[2,73],$Vg=[16,17,49,50,54,55,56,62,63,64,65,66,67,69,70,71],$Vh=[2,49],$Vi=[1,79],$Vj=[1,69],$Vk=[1,78],$Vl=[1,109],$Vm=[1,99],$Vn=[1,103],$Vo=[1,111],$Vp=[1,112],$Vq=[1,113],$Vr=[1,114],$Vs=[1,115],$Vt=[1,116],$Vu=[1,117],$Vv=[1,118],$Vw=[1,119],$Vx=[1,108],$Vy=[1,101],$Vz=[1,102],$VA=[10,34],$VB=[10,34,38],$VC=[2,38],$VD=[2,39],$VE=[2,40],$VF=[2,41],$VG=[2,42],$VH=[2,43],$VI=[2,44],$VJ=[2,45],$VK=[10,34,38,60,61],$VL=[2,56],$VM=[2,57],$VN=[2,58],$VO=[2,64],$VP=[2,65],$VQ=[2,66],$VR=[2,67],$VS=[2,68],$VT=[2,69],$VU=[16,17,49,50,52,54,55,56,60,61,62,63,64,65,66,67,69,70,71],$VV=[1,150],$VW=[1,140],$VX=[1,149],$VY=[2,27],$VZ=[2,31],$V_=[2,62],$V$=[2,48],$V01=[2,46],$V11=[34,48],$V21=[34,38,48],$V31=[34,38,48,60,61],$V41=[2,22],$V51=[2,29],$V61=[2,59],$V71=[2,63],$V81=[2,60],$V91=[16,17,69],$Va1=[2,28],$Vb1=[2,24],$Vc1=[2,32],$Vd1=[2,26],$Ve1=[2,25],$Vf1=[1,232],$Vg1=[1,222],$Vh1=[1,231],$Vi1=[2,61],$Vj1=[2,30],$Vk1=[1,271],$Vl1=[1,261],$Vm1=[1,270],$Vn1=[1,299],$Vo1=[1,289],$Vp1=[1,298],$Vq1=[2,23],$Vr1=[1,344],$Vs1=[1,334],$Vt1=[1,343],$Vu1=[1,418],$Vv1=[1,408],$Vw1=[1,417],$Vx1=[1,452],$Vy1=[1,442],$Vz1=[1,451];
        const o = JisonParser.expandParseTable;
        this.table = [o($V0,$V1,{3:1,4:2}),{1:[3]},o($V0,[2,3],{5:3}),{6:[1,4],7:5,8:6,9:7,11:8,12:9,13:10,14:11,15:[1,15],16:[1,30],17:[1,23],18:[1,16],19:[1,17],20:[1,18],21:12,23:13,24:14,26:21,27:22,41:19,42:20,47:28,49:$V2,50:[1,27],68:24,69:[1,29],70:[1,25],71:[1,26]},{1:[2,1]},o($V0,[2,4]),o($V0,[2,5]),{4:32,10:$V1},o($V0,[2,7]),o($V0,[2,8]),o($V0,[2,9]),o($V0,[2,10]),o($V3,$V1,{4:33}),o($V3,$V1,{4:34}),{10:[2,20],16:$V4,17:$V5,22:36,25:35,28:37,39:38,40:$V6,41:40,68:42,69:$V7},{16:[1,45]},{17:[1,46]},{4:47,16:$V1},{17:[1,48]},o($V3,[2,35]),o($V3,[2,36]),o($V3,[2,18]),o($V8,[2,19]),o($V3,$V9),o($V3,$Va),o($V3,$Vb),o($V3,$Vc),o($Vd,$V1,{4:49}),o($V3,$V1,{4:50}),o($V3,$Ve),o($V3,$Vf),o($V3,$V1,{4:51}),{10:[1,52]},{16:$V4,17:$V5,22:53,28:37,39:38,40:$V6,41:40,68:42,69:$V7},{16:$V4,17:$V5,22:54,28:37,39:38,40:$V6,41:40,68:42,69:$V7},{10:[2,17]},{10:[2,21]},o($Vg,$V1,{4:55}),o($Vg,[2,33]),o($Vg,[2,34]),o($Vg,[2,37]),o($Vg,$V9),o($Vg,$Va),o($Vg,$Ve),o($Vg,$Vf),{17:[1,56]},{10:[1,57]},{16:[1,58]},o($V0,[2,14]),o($Vd,$Vh,{51:59}),{16:$V4,17:$V5,22:60,28:61,39:38,40:$V6,41:40,68:42,69:$V7},o($V3,[2,47]),o($V0,[2,6]),{10:[2,15]},{10:[2,16]},{16:$Vi,17:$Vj,26:66,27:67,29:62,35:63,41:64,42:65,43:68,44:75,45:76,46:77,47:74,49:$V2,50:[1,73],54:[1,81],55:[1,82],56:[1,83],57:80,62:[1,84],63:[1,85],64:[1,86],65:[1,87],66:[1,88],67:[1,89],68:70,69:$Vk,70:[1,71],71:[1,72]},{10:[1,90]},o($V0,[2,12]),{4:91,17:$V1},{4:92,16:$Vl,17:$Vm,26:96,27:97,41:94,42:95,43:98,44:105,45:106,46:107,47:104,49:$V2,50:$Vn,52:$V1,53:93,54:$Vo,55:$Vp,56:$Vq,57:110,62:$Vr,63:$Vs,64:$Vt,65:$Vu,66:$Vv,67:$Vw,68:100,69:$Vx,70:$Vy,71:$Vz},{4:120,48:$V1},o($Vg,$V1,{4:121}),o($VA,$V1,{4:122}),o($VB,$V1,{4:123}),o($VB,$VC),o($VB,$VD),o($VB,$VE),o($VB,$VF),o($VB,$VG),o($VB,$V9),o($VB,$Va),o($VB,$Vb),o($VB,$Vc),o($Vd,$V1,{4:124}),o($V3,$V1,{4:125}),o($VB,$VH),o($VB,$VI),o($VB,$VJ),o($VB,$Ve),o($VB,$Vf),o($VK,$V1,{4:126}),o($VB,$VL),o($VB,$VM),o($VB,$VN),o($VB,$VO),o($VB,$VP),o($VK,$VQ),o($VK,$VR),o($VK,$VS),o($VK,$VT),o($V0,[2,11]),{17:[1,127]},{52:[1,128]},o($Vd,[2,50]),o($Vd,[2,51]),o($Vd,[2,52]),o($Vd,[2,53]),o($Vd,[2,54]),o($Vd,[2,55]),o($Vd,$V9),o($Vd,$Va),o($Vd,$Vb),o($Vd,$Vc),o($Vd,$V1,{4:129}),o($V3,$V1,{4:130}),o($Vd,$VH),o($Vd,$VI),o($Vd,$VJ),o($Vd,$Ve),o($Vd,$Vf),o($VU,$V1,{4:131}),o($Vd,$VL),o($Vd,$VM),o($Vd,$VN),o($Vd,$VO),o($Vd,$VP),o($VU,$VQ),o($VU,$VR),o($VU,$VS),o($VU,$VT),{48:[1,132]},{16:$VV,17:$VW,26:137,27:138,29:133,35:134,41:135,42:136,43:139,44:146,45:147,46:148,47:145,49:$V2,50:[1,144],54:[1,152],55:[1,153],56:[1,154],57:151,62:[1,155],63:[1,156],64:[1,157],65:[1,158],66:[1,159],67:[1,160],68:141,69:$VX,70:[1,142],71:[1,143]},o($VA,$VY,{30:161}),o($VB,$VZ,{36:162}),o($Vd,$Vh,{51:163}),{16:$V4,17:$V5,22:164,28:61,39:38,40:$V6,41:40,68:42,69:$V7},o($VB,$V_,{58:165,59:166,60:[1,167],61:[1,168]}),o($V0,[2,13]),o($V3,$V$),o($Vd,$Vh,{51:169}),{16:$V4,17:$V5,22:170,28:61,39:38,40:$V6,41:40,68:42,69:$V7},o($Vd,$V_,{58:171,59:172,60:[1,173],61:[1,174]}),o($V8,$V01),o($V11,$V1,{4:175}),o($V21,$V1,{4:176}),o($V21,$VC),o($V21,$VD),o($V21,$VE),o($V21,$VF),o($V21,$VG),o($V21,$V9),o($V21,$Va),o($V21,$Vb),o($V21,$Vc),o($Vd,$V1,{4:177}),o($V3,$V1,{4:178}),o($V21,$VH),o($V21,$VI),o($V21,$VJ),o($V21,$Ve),o($V21,$Vf),o($V31,$V1,{4:179}),o($V21,$VL),o($V21,$VM),o($V21,$VN),o($V21,$VO),o($V21,$VP),o($V31,$VQ),o($V31,$VR),o($V31,$VS),o($V31,$VT),{10:$V41,33:180,34:[1,181]},o($VA,$V51,{37:182,38:[1,183]}),{4:184,16:$Vl,17:$Vm,26:96,27:97,41:94,42:95,43:98,44:105,45:106,46:107,47:104,49:$V2,50:$Vn,52:$V1,53:93,54:$Vo,55:$Vp,56:$Vq,57:110,62:$Vr,63:$Vs,64:$Vt,65:$Vu,66:$Vv,67:$Vw,68:100,69:$Vx,70:$Vy,71:$Vz},{4:185,48:$V1},o($VB,$V61),o($VB,$V71),o($VB,$V81),o($V91,$V1,{4:186}),{4:187,16:$Vl,17:$Vm,26:96,27:97,41:94,42:95,43:98,44:105,45:106,46:107,47:104,49:$V2,50:$Vn,52:$V1,53:93,54:$Vo,55:$Vp,56:$Vq,57:110,62:$Vr,63:$Vs,64:$Vt,65:$Vu,66:$Vv,67:$Vw,68:100,69:$Vx,70:$Vy,71:$Vz},{4:188,48:$V1},o($Vd,$V61),o($Vd,$V71),o($Vd,$V81),o($V91,$V1,{4:189}),o($V11,$VY,{30:190}),o($V21,$VZ,{36:191}),o($Vd,$Vh,{51:192}),{16:$V4,17:$V5,22:193,28:61,39:38,40:$V6,41:40,68:42,69:$V7},o($V21,$V_,{58:194,59:195,60:[1,196],61:[1,197]}),o($VA,$Va1),o($V3,$V1,{32:198,31:199,4:200,10:$Vb1,34:$Vb1}),o($VB,$Vc1),o($Vg,$V1,{4:201}),{52:[1,202]},{48:[1,203]},{16:$Vi,17:$Vj,41:204,68:70,69:$Vk},{52:[1,205]},{48:[1,206]},{16:$Vl,17:$Vm,41:207,68:100,69:$Vx},{33:208,34:[1,209],48:$V41},o($V11,$V51,{37:210,38:[1,211]}),{4:212,16:$Vl,17:$Vm,26:96,27:97,41:94,42:95,43:98,44:105,45:106,46:107,47:104,49:$V2,50:$Vn,52:$V1,53:93,54:$Vo,55:$Vp,56:$Vq,57:110,62:$Vr,63:$Vs,64:$Vt,65:$Vu,66:$Vv,67:$Vw,68:100,69:$Vx,70:$Vy,71:$Vz},{4:213,48:$V1},o($V21,$V61),o($V21,$V71),o($V21,$V81),o($V91,$V1,{4:214}),o($VA,$Vd1),o($VA,$Ve1),{16:$V4,17:$V5,28:215,39:38,40:$V6,41:40,68:42,69:$V7},{16:$Vf1,17:$Vg1,26:219,27:220,35:216,41:217,42:218,43:221,44:228,45:229,46:230,47:227,49:$V2,50:[1,226],54:[1,234],55:[1,235],56:[1,236],57:233,62:[1,237],63:[1,238],64:[1,239],65:[1,240],66:[1,241],67:[1,242],68:223,69:$Vh1,70:[1,224],71:[1,225]},o($VB,$V$),o($VB,$V01),o($VB,$Vi1),o($Vd,$V$),o($Vd,$V01),o($Vd,$Vi1),o($V11,$Va1),o($V3,$V1,{32:243,31:244,4:245,34:$Vb1,48:$Vb1}),o($V21,$Vc1),o($Vg,$V1,{4:246}),{52:[1,247]},{48:[1,248]},{16:$VV,17:$VW,41:249,68:141,69:$VX},o($Vg,$V1,{4:250}),o($VB,$Vj1),o($VB,$VC),o($VB,$VD),o($VB,$VE),o($VB,$VF),o($VB,$VG),o($VB,$V9),o($VB,$Va),o($VB,$Vb),o($VB,$Vc),o($Vd,$V1,{4:251}),o($V3,$V1,{4:252}),o($VB,$VH),o($VB,$VI),o($VB,$VJ),o($VB,$Ve),o($VB,$Vf),o($VK,$V1,{4:253}),o($VB,$VL),o($VB,$VM),o($VB,$VN),o($VB,$VO),o($VB,$VP),o($VK,$VQ),o($VK,$VR),o($VK,$VS),o($VK,$VT),o($V11,$Vd1),o($V11,$Ve1),{16:$V4,17:$V5,28:254,39:38,40:$V6,41:40,68:42,69:$V7},{16:$Vk1,17:$Vl1,26:258,27:259,35:255,41:256,42:257,43:260,44:267,45:268,46:269,47:266,49:$V2,50:[1,265],54:[1,273],55:[1,274],56:[1,275],57:272,62:[1,276],63:[1,277],64:[1,278],65:[1,279],66:[1,280],67:[1,281],68:262,69:$Vm1,70:[1,263],71:[1,264]},o($V21,$V$),o($V21,$V01),o($V21,$Vi1),{16:$Vn1,17:$Vo1,26:286,27:287,29:282,35:283,41:284,42:285,43:288,44:295,45:296,46:297,47:294,49:$V2,50:[1,293],54:[1,301],55:[1,302],56:[1,303],57:300,62:[1,304],63:[1,305],64:[1,306],65:[1,307],66:[1,308],67:[1,309],68:290,69:$Vp1,70:[1,291],71:[1,292]},o($Vd,$Vh,{51:310}),{16:$V4,17:$V5,22:311,28:61,39:38,40:$V6,41:40,68:42,69:$V7},o($VB,$V_,{58:312,59:313,60:[1,314],61:[1,315]}),o($Vg,$V1,{4:316}),o($V21,$Vj1),o($V21,$VC),o($V21,$VD),o($V21,$VE),o($V21,$VF),o($V21,$VG),o($V21,$V9),o($V21,$Va),o($V21,$Vb),o($V21,$Vc),o($Vd,$V1,{4:317}),o($V3,$V1,{4:318}),o($V21,$VH),o($V21,$VI),o($V21,$VJ),o($V21,$Ve),o($V21,$Vf),o($V31,$V1,{4:319}),o($V21,$VL),o($V21,$VM),o($V21,$VN),o($V21,$VO),o($V21,$VP),o($V31,$VQ),o($V31,$VR),o($V31,$VS),o($V31,$VT),o($VA,$Vq1),o($VB,$V1,{4:320}),o($VB,$VC),o($VB,$VD),o($VB,$VE),o($VB,$VF),o($VB,$VG),o($VB,$V9),o($VB,$Va),o($VB,$Vb),o($VB,$Vc),o($Vd,$V1,{4:321}),o($V3,$V1,{4:322}),o($VB,$VH),o($VB,$VI),o($VB,$VJ),o($VB,$Ve),o($VB,$Vf),o($VK,$V1,{4:323}),o($VB,$VL),o($VB,$VM),o($VB,$VN),o($VB,$VO),o($VB,$VP),o($VK,$VQ),o($VK,$VR),o($VK,$VS),o($VK,$VT),{4:324,16:$Vl,17:$Vm,26:96,27:97,41:94,42:95,43:98,44:105,45:106,46:107,47:104,49:$V2,50:$Vn,52:$V1,53:93,54:$Vo,55:$Vp,56:$Vq,57:110,62:$Vr,63:$Vs,64:$Vt,65:$Vu,66:$Vv,67:$Vw,68:100,69:$Vx,70:$Vy,71:$Vz},{4:325,48:$V1},o($VB,$V61),o($VB,$V71),o($VB,$V81),o($V91,$V1,{4:326}),{16:$Vr1,17:$Vs1,26:331,27:332,29:327,35:328,41:329,42:330,43:333,44:340,45:341,46:342,47:339,49:$V2,50:[1,338],54:[1,346],55:[1,347],56:[1,348],57:345,62:[1,349],63:[1,350],64:[1,351],65:[1,352],66:[1,353],67:[1,354],68:335,69:$Vt1,70:[1,336],71:[1,337]},o($Vd,$Vh,{51:355}),{16:$V4,17:$V5,22:356,28:61,39:38,40:$V6,41:40,68:42,69:$V7},o($V21,$V_,{58:357,59:358,60:[1,359],61:[1,360]}),o($VB,$VZ,{36:361}),o($Vd,$Vh,{51:362}),{16:$V4,17:$V5,22:363,28:61,39:38,40:$V6,41:40,68:42,69:$V7},o($VB,$V_,{58:364,59:365,60:[1,366],61:[1,367]}),{52:[1,368]},{48:[1,369]},{16:$Vf1,17:$Vg1,41:370,68:223,69:$Vh1},o($V11,$Vq1),o($V21,$V1,{4:371}),o($V21,$VC),o($V21,$VD),o($V21,$VE),o($V21,$VF),o($V21,$VG),o($V21,$V9),o($V21,$Va),o($V21,$Vb),o($V21,$Vc),o($Vd,$V1,{4:372}),o($V3,$V1,{4:373}),o($V21,$VH),o($V21,$VI),o($V21,$VJ),o($V21,$Ve),o($V21,$Vf),o($V31,$V1,{4:374}),o($V21,$VL),o($V21,$VM),o($V21,$VN),o($V21,$VO),o($V21,$VP),o($V31,$VQ),o($V31,$VR),o($V31,$VS),o($V31,$VT),{4:375,16:$Vl,17:$Vm,26:96,27:97,41:94,42:95,43:98,44:105,45:106,46:107,47:104,49:$V2,50:$Vn,52:$V1,53:93,54:$Vo,55:$Vp,56:$Vq,57:110,62:$Vr,63:$Vs,64:$Vt,65:$Vu,66:$Vv,67:$Vw,68:100,69:$Vx,70:$Vy,71:$Vz},{4:376,48:$V1},o($V21,$V61),o($V21,$V71),o($V21,$V81),o($V91,$V1,{4:377}),o($VA,$V51,{37:378,38:[1,379]}),{4:380,16:$Vl,17:$Vm,26:96,27:97,41:94,42:95,43:98,44:105,45:106,46:107,47:104,49:$V2,50:$Vn,52:$V1,53:93,54:$Vo,55:$Vp,56:$Vq,57:110,62:$Vr,63:$Vs,64:$Vt,65:$Vu,66:$Vv,67:$Vw,68:100,69:$Vx,70:$Vy,71:$Vz},{4:381,48:$V1},o($VB,$V61),o($VB,$V71),o($VB,$V81),o($V91,$V1,{4:382}),o($VB,$V$),o($VB,$V01),o($VB,$Vi1),o($V21,$VZ,{36:383}),o($Vd,$Vh,{51:384}),{16:$V4,17:$V5,22:385,28:61,39:38,40:$V6,41:40,68:42,69:$V7},o($V21,$V_,{58:386,59:387,60:[1,388],61:[1,389]}),{52:[1,390]},{48:[1,391]},{16:$Vk1,17:$Vl1,41:392,68:262,69:$Vm1},o($VB,$Vc1),o($Vg,$V1,{4:393}),{52:[1,394]},{48:[1,395]},{16:$Vn1,17:$Vo1,41:396,68:290,69:$Vp1},o($V11,$V51,{37:397,38:[1,398]}),{4:399,16:$Vl,17:$Vm,26:96,27:97,41:94,42:95,43:98,44:105,45:106,46:107,47:104,49:$V2,50:$Vn,52:$V1,53:93,54:$Vo,55:$Vp,56:$Vq,57:110,62:$Vr,63:$Vs,64:$Vt,65:$Vu,66:$Vv,67:$Vw,68:100,69:$Vx,70:$Vy,71:$Vz},{4:400,48:$V1},o($V21,$V61),o($V21,$V71),o($V21,$V81),o($V91,$V1,{4:401}),o($V21,$V$),o($V21,$V01),o($V21,$Vi1),{16:$Vu1,17:$Vv1,26:405,27:406,35:402,41:403,42:404,43:407,44:414,45:415,46:416,47:413,49:$V2,50:[1,412],54:[1,420],55:[1,421],56:[1,422],57:419,62:[1,423],63:[1,424],64:[1,425],65:[1,426],66:[1,427],67:[1,428],68:409,69:$Vw1,70:[1,410],71:[1,411]},o($VB,$V$),o($VB,$V01),o($VB,$Vi1),o($V21,$Vc1),o($Vg,$V1,{4:429}),{52:[1,430]},{48:[1,431]},{16:$Vr1,17:$Vs1,41:432,68:335,69:$Vt1},o($VB,$Vj1),o($VB,$VC),o($VB,$VD),o($VB,$VE),o($VB,$VF),o($VB,$VG),o($VB,$V9),o($VB,$Va),o($VB,$Vb),o($VB,$Vc),o($Vd,$V1,{4:433}),o($V3,$V1,{4:434}),o($VB,$VH),o($VB,$VI),o($VB,$VJ),o($VB,$Ve),o($VB,$Vf),o($VK,$V1,{4:435}),o($VB,$VL),o($VB,$VM),o($VB,$VN),o($VB,$VO),o($VB,$VP),o($VK,$VQ),o($VK,$VR),o($VK,$VS),o($VK,$VT),{16:$Vx1,17:$Vy1,26:439,27:440,35:436,41:437,42:438,43:441,44:448,45:449,46:450,47:447,49:$V2,50:[1,446],54:[1,454],55:[1,455],56:[1,456],57:453,62:[1,457],63:[1,458],64:[1,459],65:[1,460],66:[1,461],67:[1,462],68:443,69:$Vz1,70:[1,444],71:[1,445]},o($V21,$V$),o($V21,$V01),o($V21,$Vi1),o($Vd,$Vh,{51:463}),{16:$V4,17:$V5,22:464,28:61,39:38,40:$V6,41:40,68:42,69:$V7},o($VB,$V_,{58:465,59:466,60:[1,467],61:[1,468]}),o($V21,$Vj1),o($V21,$VC),o($V21,$VD),o($V21,$VE),o($V21,$VF),o($V21,$VG),o($V21,$V9),o($V21,$Va),o($V21,$Vb),o($V21,$Vc),o($Vd,$V1,{4:469}),o($V3,$V1,{4:470}),o($V21,$VH),o($V21,$VI),o($V21,$VJ),o($V21,$Ve),o($V21,$Vf),o($V31,$V1,{4:471}),o($V21,$VL),o($V21,$VM),o($V21,$VN),o($V21,$VO),o($V21,$VP),o($V31,$VQ),o($V31,$VR),o($V31,$VS),o($V31,$VT),{4:472,16:$Vl,17:$Vm,26:96,27:97,41:94,42:95,43:98,44:105,45:106,46:107,47:104,49:$V2,50:$Vn,52:$V1,53:93,54:$Vo,55:$Vp,56:$Vq,57:110,62:$Vr,63:$Vs,64:$Vt,65:$Vu,66:$Vv,67:$Vw,68:100,69:$Vx,70:$Vy,71:$Vz},{4:473,48:$V1},o($VB,$V61),o($VB,$V71),o($VB,$V81),o($V91,$V1,{4:474}),o($Vd,$Vh,{51:475}),{16:$V4,17:$V5,22:476,28:61,39:38,40:$V6,41:40,68:42,69:$V7},o($V21,$V_,{58:477,59:478,60:[1,479],61:[1,480]}),{52:[1,481]},{48:[1,482]},{16:$Vu1,17:$Vv1,41:483,68:409,69:$Vw1},{4:484,16:$Vl,17:$Vm,26:96,27:97,41:94,42:95,43:98,44:105,45:106,46:107,47:104,49:$V2,50:$Vn,52:$V1,53:93,54:$Vo,55:$Vp,56:$Vq,57:110,62:$Vr,63:$Vs,64:$Vt,65:$Vu,66:$Vv,67:$Vw,68:100,69:$Vx,70:$Vy,71:$Vz},{4:485,48:$V1},o($V21,$V61),o($V21,$V71),o($V21,$V81),o($V91,$V1,{4:486}),o($VB,$V$),o($VB,$V01),o($VB,$Vi1),{52:[1,487]},{48:[1,488]},{16:$Vx1,17:$Vy1,41:489,68:443,69:$Vz1},o($V21,$V$),o($V21,$V01),o($V21,$Vi1)];
        this.defaultActions = {4:[2,1],35:[2,17],36:[2,21],53:[2,15],54:[2,16]};
    }
    performAction (yytext, yyleng, yylineno, yy, yystate /* action[1] */, $$ /* vstack */, _$ /* lstack */) {
/* this == yyval */
          const $0 = $$.length - 1;
        switch (yystate) {
case 1:

        return { statementList: $$[$0-2].concat($$[$0-1]) };
      
break;
case 2: case 20: case 24: case 27:
this.$ = yy.getWhitespace();
break;
case 3: case 31: case 49:
this.$ = [];
break;
case 4:
this.$ = $$[$0-1].concat($$[$0]);
break;
case 6:
this.$ = $$[$0-2].concat($$[$0-1], $$[$0], yy.getWhitespace());;
break;
case 11:

        yy._prefixes[$$[$0-2].slice(0, -1)] = $$[$0-1];
      
break;
case 12:

        yy._setBase(yy._base === null ||
                    absoluteIRI.test($$[$0-1].slice(1, -1)) ? $$[$0-1].slice(1, -1) : yy._resolveIRI($$[$0-1].slice(1, -1)));
      
break;
case 13:

        yy._prefixes[$$[$0-2].value] = $$[$0].value;
        this.$ = [{ "type": "sparqlPrefix", keyword: $$[$0-4], ws1: $$[$0-3], prefix: $$[$0-2], ws2: $$[$0-1], namespace: $$[$0] }].concat(yy.getWhitespace());
      
break;
case 14:

        yy._setBase(yy._base === null ||
                    absoluteIRI.test($$[$0].slice(1, -1)) ? $$[$0].slice(1, -1) : yy._resolveIRI($$[$0].slice(1, -1)));
      
break;
case 15:
this.$ = yy.finishSubject([{ type: "subject_predicateObjectList", subject: $$[$0-2], ws1: $$[$0-1], predicateObjectList: $$[$0]}].concat(yy.getWhitespace()));
break;
case 16:
this.$ = yy.finishSubject([{ type: "collection_predicateObjectList", collection: $$[$0-2], ws1: $$[$0-1], predicateObjectList: $$[$0]}].concat(yy.getWhitespace()));
break;
case 17:
this.$ = yy.finishSubject($$[$0-1].concat($$[$0])) // blankNodePropertyList _QpredicateObjectList_E_Opt;
break;
case 18:
 yy.setSubject($$[$0].node); this.$ = $$[$0].elts.concat(yy.getWhitespace()); // collection_SUBJECT
 
break;
case 19:
 yy.setSubject($$[$0].node); this.$ = $$[$0].elts.concat(yy.getWhitespace()); // blankNodePropertyList_SUBJECT
 
break;
case 21:
this.$ = $$[$0].concat(yy.getWhitespace());;
break;
case 22:
this.$ = [{ type: "verb_objectList", verb: $$[$0-4], ws1: $$[$0-3], objectList: $$[$0-2].concat($$[$0-1]) }].concat($$[$0]).concat(yy.getWhitespace()) // verb objectList _Q_O_QGT_SEMI_E_S_Qverb_E_S_QobjectList_E_Opt_C_E_Star;
break;
case 23:
this.$ = $$[$0-3].concat([{ type: "verb_objectList", verb: $$[$0-2], ws1: $$[$0-1], objectList: $$[$0] }], yy.getWhitespace());
break;
case 25:
this.$ =$$[$0].concat(yy.getWhitespace());
break;
case 26:
this.$ = [$$[$0-1]].concat($$[$0], yy.getWhitespace());
break;
case 28:
this.$ = $$[$0-1].concat($$[$0], yy.getWhitespace()) // Q_O_QGT_SEMI_E_S_Qverb_E_S_QobjectList_E_Opt_C_E_Star _O_QGT_SEMI_E_S_Qverb_E_S_QobjectList_E_Opt_C;
break;
case 29:
this.$ = yy.finishObjectList($$[$0-2].concat($$[$0-1], $$[$0])) // object _Q_O_QGT_COMMA_E_S_Qobject_E_C_E_Star;
break;
case 30:
this.$ = [$$[$0-2]].concat($$[$0-1], $$[$0], yy.getWhitespace());
break;
case 32:
this.$ = $$[$0-1].concat($$[$0]) // Q_O_QGT_COMMA_E_S_Qobject_E_C_E_Star _O_QGT_COMMA_E_S_Qobject_E_C;
break;
case 33:
this.$ = yy.setPredicate($$[$0]);
break;
case 34:
this.$ = yy.setPredicate({ "type": "a", "origText": "a" }) // left is a token, right a const;
break;
case 35: case 36:
this.$ = yy.setSubject($$[$0]);
break;
case 38: case 39: case 42:
this.$ = [yy.finishTriple($$[$0])];
break;
case 40:
this.$ = $$[$0] // object collection;
break;
case 41:
 yy.finishTriple($$[$0].node); this.$ = $$[$0].elts; 
break;
case 46:
this.$ = yy.finishBlankNodePropertyList($$[$0-4], $$[$0-3].concat($$[$0-2], $$[$0-1]), $$[$0]);
break;
case 47:
this.$ = yy.startBlankNodePropertyList($$[$0-1], $$[$0]);;
break;
case 48:
this.$ = yy.makeFirstRest($$[$0-4], $$[$0-3], $$[$0-2], $$[$0-1], $$[$0]);
break;
case 50:
this.$ = $$[$0-1].concat({node: $$[$0].node, nested: $$[$0].nested.concat(yy.getWhitespace())}) // Qobject_E_Star object -- collectionObject;
break;
case 51: case 52: case 55:
this.$ = {node: $$[$0], nested: []};
break;
case 53:
this.$ = $$[$0] // collection collection;
break;
case 54:
this.$ = {node: $$[$0][0].subject, nested: $$[$0]} // collection blankNodePropertyList;
break;
case 56:
this.$ = yy.createTypedLiteral($$[$0], XSD_INTEGER);
break;
case 57:
this.$ = yy.createTypedLiteral($$[$0], XSD_DECIMAL);
break;
case 58:
this.$ = yy.createTypedLiteral($$[$0], XSD_DOUBLE);
break;
case 59:
this.$ = yy.createParsedLiteral($$[$0].type, $$[$0-2], $$[$0-1], $$[$0].attrs);
break;
case 60:
this.$ = { type: "langTagLiteral", attrs: { language: $$[$0] } };
break;
case 61:
this.$ = { type: "datatypedLiteral", attrs: { datatype: { type: "ParsedDatatype", value: $$[$0].value, token: $$[$0-2], ws1: $$[$0-1], iri: $$[$0] } } };
break;
case 62:
this.$ = { type: "simpleLiteral", attrs: {} };
break;
case 64: case 65:
this.$ = yy.createTypedLiteral($$[$0], XSD_BOOLEAN);
break;
case 74:
this.$ = yy.createBlankNode($$[$0]);
break;
case 75:
this.$ = yy.createBlankNode();
break;
        }
    }
}

// Export module
Object.defineProperty(exports, "__esModule", { value: true });
exports.TurtleJisonParser = TurtleJisonParser;


/* generated by @ts-jison/lexer-generator 0.4.1-alpha.2 */
const { JisonLexer } = require('@ts-jison/lexer');

class TurtleJisonLexer extends JisonLexer {
    constructor (yy = {}) {
        super(yy);
        this.options = {"moduleName":"TurtleJison"};
        this.rules = [
        /^(?:\s+)/,
        /^(?:#[^\u000a\u000d]*|\/\*(?:[^*]|\*(?:[^/]|\\\/))*\*\/)/,
        /^(?:\.)/,
        /^(?:;)/,
        /^(?:,)/,
        /^(?:\[)/,
        /^(?:\])/,
        /^(?:\()/,
        /^(?:\))/,
        /^(?:\^\^)/,
        /^(?:true\b)/,
        /^(?:false\b)/,
        /^(?:[Pp][Rr][Ee][Ff][Ii][Xx])/,
        /^(?:[Bb][Aa][Ss][Ee])/,
        /^(?:@base\b)/,
        /^(?:@prefix\b)/,
        /^(?:<(?:[^\u0000-\u0020<>\"{}|^`\\]|\\u(?:[0-9]|[A-F]|[a-f])(?:[0-9]|[A-F]|[a-f])(?:[0-9]|[A-F]|[a-f])(?:[0-9]|[A-F]|[a-f])|\\U(?:[0-9]|[A-F]|[a-f])(?:[0-9]|[A-F]|[a-f])(?:[0-9]|[A-F]|[a-f])(?:[0-9]|[A-F]|[a-f])(?:[0-9]|[A-F]|[a-f])(?:[0-9]|[A-F]|[a-f])(?:[0-9]|[A-F]|[a-f])(?:[0-9]|[A-F]|[a-f]))*>)/,
        /^(?:(?:(?:[A-Z]|[a-z]|[\u00c0-\u00d6]|[\u00d8-\u00f6]|[\u00f8-\u02ff]|[\u0370-\u037d]|[\u037f-\u1fff]|[\u200c-\u200d]|[\u2070-\u218f]|[\u2c00-\u2fef]|[\u3001-\ud7ff]|[\uf900-\ufdcf]|[\ufdf0-\ufffd]|[\uD800-\uDB7F][\uDC00-\uDFFF])(?:(?:[A-Z]|[a-z]|[\u00c0-\u00d6]|[\u00d8-\u00f6]|[\u00f8-\u02ff]|[\u0370-\u037d]|[\u037f-\u1fff]|[\u200c-\u200d]|[\u2070-\u218f]|[\u2c00-\u2fef]|[\u3001-\ud7ff]|[\uf900-\ufdcf]|[\ufdf0-\ufffd]|[\uD800-\uDB7F][\uDC00-\uDFFF]|_|_|-|[0-9]|[\u00b7]|[\u0300-\u036f]|[\u203f-\u2040]|\.)*(?:[A-Z]|[a-z]|[\u00c0-\u00d6]|[\u00d8-\u00f6]|[\u00f8-\u02ff]|[\u0370-\u037d]|[\u037f-\u1fff]|[\u200c-\u200d]|[\u2070-\u218f]|[\u2c00-\u2fef]|[\u3001-\ud7ff]|[\uf900-\ufdcf]|[\ufdf0-\ufffd]|[\uD800-\uDB7F][\uDC00-\uDFFF]|_|_|-|[0-9]|[\u00b7]|[\u0300-\u036f]|[\u203f-\u2040]))?)?:(?:[A-Z]|[a-z]|[\u00c0-\u00d6]|[\u00d8-\u00f6]|[\u00f8-\u02ff]|[\u0370-\u037d]|[\u037f-\u1fff]|[\u200c-\u200d]|[\u2070-\u218f]|[\u2c00-\u2fef]|[\u3001-\ud7ff]|[\uf900-\ufdcf]|[\ufdf0-\ufffd]|[\uD800-\uDB7F][\uDC00-\uDFFF]|_|_|:|[0-9]|%(?:[0-9]|[A-F]|[a-f])(?:[0-9]|[A-F]|[a-f])|\\(?:_|~|\.|-|!|\$|&|'|\(|\)|\*|\+|,|;|=|\/|\?|#|@|%))(?:[A-Z]|[a-z]|[\u00c0-\u00d6]|[\u00d8-\u00f6]|[\u00f8-\u02ff]|[\u0370-\u037d]|[\u037f-\u1fff]|[\u200c-\u200d]|[\u2070-\u218f]|[\u2c00-\u2fef]|[\u3001-\ud7ff]|[\uf900-\ufdcf]|[\ufdf0-\ufffd]|[\uD800-\uDB7F][\uDC00-\uDFFF]|_|_|-|[0-9]|[\u00b7]|[\u0300-\u036f]|[\u203f-\u2040]|\.|:|%(?:[0-9]|[A-F]|[a-f])(?:[0-9]|[A-F]|[a-f])|\\(?:_|~|\.|-|!|\$|&|'|\(|\)|\*|\+|,|;|=|\/|\?|#|@|%))*)/,
        /^(?:(?:(?:[A-Z]|[a-z]|[\u00c0-\u00d6]|[\u00d8-\u00f6]|[\u00f8-\u02ff]|[\u0370-\u037d]|[\u037f-\u1fff]|[\u200c-\u200d]|[\u2070-\u218f]|[\u2c00-\u2fef]|[\u3001-\ud7ff]|[\uf900-\ufdcf]|[\ufdf0-\ufffd]|[\uD800-\uDB7F][\uDC00-\uDFFF])(?:(?:[A-Z]|[a-z]|[\u00c0-\u00d6]|[\u00d8-\u00f6]|[\u00f8-\u02ff]|[\u0370-\u037d]|[\u037f-\u1fff]|[\u200c-\u200d]|[\u2070-\u218f]|[\u2c00-\u2fef]|[\u3001-\ud7ff]|[\uf900-\ufdcf]|[\ufdf0-\ufffd]|[\uD800-\uDB7F][\uDC00-\uDFFF]|_|_|-|[0-9]|[\u00b7]|[\u0300-\u036f]|[\u203f-\u2040]|\.)*(?:[A-Z]|[a-z]|[\u00c0-\u00d6]|[\u00d8-\u00f6]|[\u00f8-\u02ff]|[\u0370-\u037d]|[\u037f-\u1fff]|[\u200c-\u200d]|[\u2070-\u218f]|[\u2c00-\u2fef]|[\u3001-\ud7ff]|[\uf900-\ufdcf]|[\ufdf0-\ufffd]|[\uD800-\uDB7F][\uDC00-\uDFFF]|_|_|-|[0-9]|[\u00b7]|[\u0300-\u036f]|[\u203f-\u2040]))?)?:)/,
        /^(?:_:(?:[A-Z]|[a-z]|[\u00c0-\u00d6]|[\u00d8-\u00f6]|[\u00f8-\u02ff]|[\u0370-\u037d]|[\u037f-\u1fff]|[\u200c-\u200d]|[\u2070-\u218f]|[\u2c00-\u2fef]|[\u3001-\ud7ff]|[\uf900-\ufdcf]|[\ufdf0-\ufffd]|[\uD800-\uDB7F][\uDC00-\uDFFF]|_|_|[0-9])(?:(?:[A-Z]|[a-z]|[\u00c0-\u00d6]|[\u00d8-\u00f6]|[\u00f8-\u02ff]|[\u0370-\u037d]|[\u037f-\u1fff]|[\u200c-\u200d]|[\u2070-\u218f]|[\u2c00-\u2fef]|[\u3001-\ud7ff]|[\uf900-\ufdcf]|[\ufdf0-\ufffd]|[\uD800-\uDB7F][\uDC00-\uDFFF]|_|_|-|[0-9]|[\u00b7]|[\u0300-\u036f]|[\u203f-\u2040]|\.)*(?:[A-Z]|[a-z]|[\u00c0-\u00d6]|[\u00d8-\u00f6]|[\u00f8-\u02ff]|[\u0370-\u037d]|[\u037f-\u1fff]|[\u200c-\u200d]|[\u2070-\u218f]|[\u2c00-\u2fef]|[\u3001-\ud7ff]|[\uf900-\ufdcf]|[\ufdf0-\ufffd]|[\uD800-\uDB7F][\uDC00-\uDFFF]|_|_|-|[0-9]|[\u00b7]|[\u0300-\u036f]|[\u203f-\u2040]))?)/,
        /^(?:@[A-Za-z]+(?:-[0-9A-Za-z]+)*)/,
        /^(?:[+-]?[0-9]+)/,
        /^(?:[+-]?[0-9]*\.[0-9]+)/,
        /^(?:[+-]?(?:[0-9]+\.[0-9]*[Ee][+-]?[0-9]+|\.?[0-9]+[Ee][+-]?[0-9]+))/,
        /^(?:'(?:[^\u0027\u005c\u000a\u000d]|\\[\"\'\\bfnrt]|\\u(?:[0-9]|[A-F]|[a-f])(?:[0-9]|[A-F]|[a-f])(?:[0-9]|[A-F]|[a-f])(?:[0-9]|[A-F]|[a-f])|\\U(?:[0-9]|[A-F]|[a-f])(?:[0-9]|[A-F]|[a-f])(?:[0-9]|[A-F]|[a-f])(?:[0-9]|[A-F]|[a-f])(?:[0-9]|[A-F]|[a-f])(?:[0-9]|[A-F]|[a-f])(?:[0-9]|[A-F]|[a-f])(?:[0-9]|[A-F]|[a-f]))*')/,
        /^(?:"(?:[^\u0022\u005c\u000a\u000d]|\\[\"\'\\bfnrt]|\\u(?:[0-9]|[A-F]|[a-f])(?:[0-9]|[A-F]|[a-f])(?:[0-9]|[A-F]|[a-f])(?:[0-9]|[A-F]|[a-f])|\\U(?:[0-9]|[A-F]|[a-f])(?:[0-9]|[A-F]|[a-f])(?:[0-9]|[A-F]|[a-f])(?:[0-9]|[A-F]|[a-f])(?:[0-9]|[A-F]|[a-f])(?:[0-9]|[A-F]|[a-f])(?:[0-9]|[A-F]|[a-f])(?:[0-9]|[A-F]|[a-f]))*")/,
        /^(?:'''(?:(?:'|'')?(?:[^\'\\]|\\[\"\'\\bfnrt]|\\u(?:[0-9]|[A-F]|[a-f])(?:[0-9]|[A-F]|[a-f])(?:[0-9]|[A-F]|[a-f])(?:[0-9]|[A-F]|[a-f])|\\U(?:[0-9]|[A-F]|[a-f])(?:[0-9]|[A-F]|[a-f])(?:[0-9]|[A-F]|[a-f])(?:[0-9]|[A-F]|[a-f])(?:[0-9]|[A-F]|[a-f])(?:[0-9]|[A-F]|[a-f])(?:[0-9]|[A-F]|[a-f])(?:[0-9]|[A-F]|[a-f])))*''')/,
        /^(?:"""(?:(?:"|"")?(?:[^\"\\]|\\[\"\'\\bfnrt]|\\u(?:[0-9]|[A-F]|[a-f])(?:[0-9]|[A-F]|[a-f])(?:[0-9]|[A-F]|[a-f])(?:[0-9]|[A-F]|[a-f])|\\U(?:[0-9]|[A-F]|[a-f])(?:[0-9]|[A-F]|[a-f])(?:[0-9]|[A-F]|[a-f])(?:[0-9]|[A-F]|[a-f])(?:[0-9]|[A-F]|[a-f])(?:[0-9]|[A-F]|[a-f])(?:[0-9]|[A-F]|[a-f])(?:[0-9]|[A-F]|[a-f])))*""")/,
        /^(?:\\\[(?: |\\t|\\r|\\n)*\\\])/,
        /^(?:a\b)/,
        /^(?:$)/,
        /^(?:[a-zA-Z0-9_-]+)/,
        /^(?:.)/
    ];
        this.conditions = {"INITIAL":{"rules":[0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32],"inclusive":true}};
    }
    performAction (yy, yy_, $avoiding_name_collisions, YY_START) {
              let YYSTATE = YY_START;
            switch ($avoiding_name_collisions) {
    case 0:
  // space eaten by whitespace and comments
  if (yy.skipped.last_line === yy_.yylloc.first_line &&
      yy.skipped.last_column === yy_.yylloc.first_column) {
    // immediately follows a skipped span
    yy.skipped.last_line = yy_.yylloc.last_line;
    yy.skipped.last_column = yy_.yylloc.last_column;
  } else {
    // follows something else
    yy.skipped = yy_.yylloc
  };
  yy.addWhitespace({type: "ws", origText: yy_.yytext});

      break;
    case 1:
  // space eaten by whitespace and comments
  if (yy.skipped.last_line === yy_.yylloc.first_line &&
      yy.skipped.last_column === yy_.yylloc.first_column) {
    // immediately follows a skipped span
    yy.skipped.last_line = yy_.yylloc.last_line;
    yy.skipped.last_column = yy_.yylloc.last_column;
  } else {
    // follows something else
    yy.skipped = yy_.yylloc
  };
  yy.addWhitespace({type: "comment", origText: yy_.yytext});

      break;
    case 2:yy_.yytext = { type: "token", origText: yy_.yytext }; return 10;
    case 3:yy_.yytext = { type: "token", origText: yy_.yytext }; return 34;
    case 4:yy_.yytext = { type: "token", origText: yy_.yytext }; return 38;
    case 5:yy_.yytext = { type: "startBNode", origText: yy_.yytext }; return 49;
    case 6:yy_.yytext = { type: "endBNode", origText: yy_.yytext }; return 48;
    case 7:yy_.yytext = { type: "token", origText: yy_.yytext }; return 50;
    case 8:yy_.yytext = { type: "token", origText: yy_.yytext }; return 52;
    case 9:yy_.yytext = { type: "token", origText: yy_.yytext }; return 61;
    case 10:yy_.yytext = { type: "boolean", origText: yy_.yytext }; return 62;
    case 11:yy_.yytext = { type: "boolean", origText: yy_.yytext }; return 63;
    case 12:yy_.yytext = { type: "KEYWORD", origText: yy_.yytext }; return 19;
    case 13:yy_.yytext = { type: "KEYWORD", origText: yy_.yytext }; return 20;
    case 14:yy_.yytext = { type: "KEYWORD", origText: yy_.yytext }; return 18;
    case 15:yy_.yytext = { type: "KEYWORD", origText: yy_.yytext }; return 15;
    case 16:yy_.yytext = yy.createRelativeIri(yy_.yytext); return 17;
    case 17:yy_.yytext = yy.parsePName(yy_.yytext); return 69;
    case 18:yy_.yytext = yy.parsePrefix(yy_.yytext); return 16;
    case 19:yy_.yytext = { type: "token", origText: yy_.yytext }; return 70;
    case 20:yy_.yytext = { type: "LANGTAG", value: yy_.yytext.substring(1), origText: yy_.yytext }; return 60;
    case 21:yy_.yytext = { type: "INTEGER", value: yy_.yytext, origText: yy_.yytext }; return 54;
    case 22:yy_.yytext = { type: "DECIMAL", value: yy_.yytext, origText: yy_.yytext }; return 55;
    case 23:yy_.yytext = { type: "DOUBLE",  value: yy_.yytext, origText: yy_.yytext }; return 56;
    case 24:yy_.yytext = { type: "STRING_LITERAL1", value: yy.unescapeString(yy_.yytext, 1), origText: yy_.yytext }; return 64;
    case 25:yy_.yytext = { type: "STRING_LITERAL2", value: yy.unescapeString(yy_.yytext, 1), origText: yy_.yytext }; return 65;
    case 26:yy_.yytext = { type: "STRING_LITERAL_LONG1", value: yy.unescapeString(yy_.yytext, 3), origText: yy_.yytext }; return 66;
    case 27:yy_.yytext = { type: "STRING_LITERAL_LONG2", value: yy.unescapeString(yy_.yytext, 3), origText: yy_.yytext }; return 67;
    case 28:yy_.yytext = { type: "ANON", origText: yy_.yytext }; return 71;
    case 29:yy_.yytext = { type: "keyword", origText: yy_.yytext }; return 40;
    case 30:return 6;
    case 31:return 'unexpected word "'+yy_.yytext+'"';
    case 32:return 'invalid character '+yy_.yytext;
        }
    }
}


// Export module
Object.defineProperty(exports, "__esModule", { value: true });
exports.TurtleJisonLexer = TurtleJisonLexer;


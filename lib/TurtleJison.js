const { JisonParser, o } = require('@ts-jison/parser');
/**
 * parser generated by  @ts-jison/parser-generator 0.4.1-alpha.2
 * @returns Parser implementing JisonParserApi and a Lexer implementing JisonLexerApi.
 */

  /*
    ShEx parser in the Jison parser generator format.
  */

  const RDF = 'http://www.w3.org/1999/02/22-rdf-syntax-ns#',
      RDF_TYPE  = RDF + 'type',
      RDF_FIRST = RDF + 'first',
      RDF_REST  = RDF + 'rest',
      RDF_NIL   = RDF + 'nil',
      XSD = 'http://www.w3.org/2001/XMLSchema#',
      XSD_INTEGER  = XSD + 'integer',
      XSD_DECIMAL  = XSD + 'decimal',
      XSD_FLOAT   = XSD + 'float',
      XSD_DOUBLE   = XSD + 'double',
      XSD_BOOLEAN  = XSD + 'boolean',
      XSD_TRUE =  '"true"^^'  + XSD_BOOLEAN,
      XSD_FALSE = '"false"^^' + XSD_BOOLEAN,
      XSD_PATTERN        = XSD + 'pattern',
      XSD_MININCLUSIVE   = XSD + 'minInclusive',
      XSD_MINEXCLUSIVE   = XSD + 'minExclusive',
      XSD_MAXINCLUSIVE   = XSD + 'maxInclusive',
      XSD_MAXEXCLUSIVE   = XSD + 'maxExclusive',
      XSD_LENGTH         = XSD + 'length',
      XSD_MINLENGTH      = XSD + 'minLength',
      XSD_MAXLENGTH      = XSD + 'maxLength',
      XSD_TOTALDIGITS    = XSD + 'totalDigits',
      XSD_FRACTIONDIGITS = XSD + 'fractionDigits';

  const numericDatatypes = [
      XSD + "integer",
      XSD + "decimal",
      XSD + "float",
      XSD + "double",
      XSD + "string",
      XSD + "boolean",
      XSD + "dateTime",
      XSD + "nonPositiveInteger",
      XSD + "negativeInteger",
      XSD + "long",
      XSD + "int",
      XSD + "short",
      XSD + "byte",
      XSD + "nonNegativeInteger",
      XSD + "unsignedLong",
      XSD + "unsignedInt",
      XSD + "unsignedShort",
      XSD + "unsignedByte",
      XSD + "positiveInteger"
  ];

  const absoluteIRI = /^[a-z][a-z0-9+.-]*:/i;

class TurtleJisonParser extends JisonParser {
    constructor(yy = {}, lexer = new TurtleJisonLexer(yy)) {
        super(yy, lexer);
        this.symbols_ = {"error":2,"turtleDoc":3,"WSS":4,"Qstatement_E_Star":5,"EOF":6,"WS_OR_COMMENT":7,"WS":8,"COMMENT":9,"statement":10,"directive":11,"triples":12,"GT_DOT":13,"prefixID":14,"base":15,"sparqlPrefix":16,"sparqlBase":17,"PREFIX":18,"PNAME_NS":19,"IRIREF":20,"BASE":21,"SPARQL_PREFIX":22,"SPARQL_BASE":23,"subject":24,"predicateObjectList":25,"collection_SUBJECT":26,"blankNodePropertyList_SUBJECT":27,"QpredicateObjectList_E_Opt":28,"collection":29,"blankNodePropertyList":30,"verb":31,"objectList":32,"Q_O_QGT_SEMI_E_S_Qverb_E_S_QobjectList_E_Opt_C_E_Star":33,"O_Qverb_E_S_QobjectList_E_C":34,"Q_O_Qverb_E_S_QobjectList_E_C_E_Opt":35,"O_QGT_SEMI_E_S_Qverb_E_S_QobjectList_E_Opt_C":36,"GT_SEMI":37,"object":38,"Q_O_QGT_COMMA_E_S_Qobject_E_C_E_Star":39,"O_QGT_COMMA_E_S_Qobject_E_C":40,"GT_COMMA":41,"predicate":42,"RDF_TYPE":43,"iri":44,"BlankNode":45,"literal":46,"RDFLiteral":47,"NumericLiteral":48,"BooleanLiteral":49,"NEW_SUBJECT":50,"GT_RBRACKET":51,"GT_LBRACKET":52,"GT_LPAREN":53,"Qobject_E_Star":54,"GT_RPAREN":55,"collectionObject":56,"INTEGER":57,"DECIMAL":58,"DOUBLE":59,"String":60,"Q_O_QLANGTAG_E_Or_QGT_DTYPE_E_S_Qiri_E_C_E_Opt":61,"O_QLANGTAG_E_Or_QGT_DTYPE_E_S_Qiri_E_C":62,"LANGTAG_MARKER":63,"DATATYPE_MARKER":64,"IT_true":65,"IT_false":66,"STRING_LITERAL1":67,"STRING_LITERAL2":68,"STRING_LITERAL_LONG1":69,"STRING_LITERAL_LONG2":70,"PrefixedName":71,"PNAME_LN":72,"BLANK_NODE_LABEL":73,"ANON":74,"$accept":0,"$end":1};
        this.terminals_ = {2:"error",6:"EOF",8:"WS",9:"COMMENT",13:"GT_DOT",18:"PREFIX",19:"PNAME_NS",20:"IRIREF",21:"BASE",22:"SPARQL_PREFIX",23:"SPARQL_BASE",37:"GT_SEMI",41:"GT_COMMA",43:"RDF_TYPE",51:"GT_RBRACKET",52:"GT_LBRACKET",53:"GT_LPAREN",55:"GT_RPAREN",57:"INTEGER",58:"DECIMAL",59:"DOUBLE",63:"LANGTAG_MARKER",64:"DATATYPE_MARKER",65:"IT_true",66:"IT_false",67:"STRING_LITERAL1",68:"STRING_LITERAL2",69:"STRING_LITERAL_LONG1",70:"STRING_LITERAL_LONG2",72:"PNAME_LN",73:"BLANK_NODE_LABEL",74:"ANON"};
        this.productions_ = [0,[3,3],[4,0],[4,2],[7,1],[7,1],[5,0],[5,3],[10,1],[10,2],[11,1],[11,1],[11,1],[11,1],[14,7],[15,5],[16,5],[17,3],[12,3],[12,3],[12,3],[26,1],[27,1],[28,0],[28,1],[25,4],[34,3],[35,0],[35,1],[36,3],[33,0],[33,2],[32,3],[40,4],[39,0],[39,2],[31,1],[31,1],[24,1],[24,1],[42,1],[38,1],[38,1],[38,1],[38,1],[38,1],[46,1],[46,1],[46,1],[30,4],[50,1],[29,4],[54,0],[54,3],[56,1],[56,1],[56,1],[56,1],[56,1],[48,1],[48,1],[48,1],[47,2],[62,1],[62,3],[61,0],[61,1],[49,1],[49,1],[60,1],[60,1],[60,1],[60,1],[44,1],[44,1],[71,1],[71,1],[45,1],[45,1]];

        // shorten static method to just `o` for terse STATE_TABLE
        const $V0=[6,8,9,18,19,20,21,22,23,52,53,72,73,74],$V1=[2,2],$V2=[6,18,19,20,21,22,23,52,53,72,73,74],$V3=[1,34],$V4=[2,3],$V5=[2,4],$V6=[2,5],$V7=[8,9,19,20,43,72],$V8=[8,9,13,19,20,43,72],$V9=[8,9,19],$Va=[8,9,20],$Vb=[2,73],$Vc=[2,74],$Vd=[2,77],$Ve=[2,78],$Vf=[8,9,19,20,52,53,55,57,58,59,65,66,67,68,69,70,72,73,74],$Vg=[2,52],$Vh=[2,75],$Vi=[2,76],$Vj=[1,52],$Vk=[1,53],$Vl=[1,60],$Vm=[1,57],$Vn=[1,55],$Vo=[1,59],$Vp=[1,69],$Vq=[1,70],$Vr=[1,73],$Vs=[1,74],$Vt=[8,9,19,20,52,53,57,58,59,65,66,67,68,69,70,72,73,74],$Vu=[8,9,13],$Vv=[1,92],$Vw=[1,93],$Vx=[1,104],$Vy=[1,94],$Vz=[1,98],$VA=[1,106],$VB=[1,107],$VC=[1,108],$VD=[1,109],$VE=[1,110],$VF=[1,111],$VG=[1,112],$VH=[1,113],$VI=[1,114],$VJ=[1,103],$VK=[1,96],$VL=[1,97],$VM=[1,120],$VN=[1,121],$VO=[1,137],$VP=[1,127],$VQ=[1,136],$VR=[1,151],$VS=[1,152],$VT=[2,51],$VU=[2,46],$VV=[2,47],$VW=[2,48],$VX=[2,65],$VY=[2,59],$VZ=[2,60],$V_=[2,61],$V$=[2,67],$V01=[2,68],$V11=[8,9,19,20,52,53,55,57,58,59,63,64,65,66,67,68,69,70,72,73,74],$V21=[2,69],$V31=[2,70],$V41=[2,71],$V51=[2,72],$V61=[2,49],$V71=[1,177],$V81=[1,167],$V91=[1,176],$Va1=[13,37],$Vb1=[2,30],$Vc1=[8,9,13,37,41],$Vd1=[2,41],$Ve1=[2,42],$Vf1=[2,43],$Vg1=[2,44],$Vh1=[2,45],$Vi1=[8,9,13,37,41,63,64],$Vj1=[2,62],$Vk1=[2,66],$Vl1=[2,63],$Vm1=[8,9,19,20,72],$Vn1=[37,51],$Vo1=[8,9,37,41,51],$Vp1=[8,9,37,41,51,63,64],$Vq1=[2,25],$Vr1=[13,37,41],$Vs1=[2,34],$Vt1=[1,222],$Vu1=[1,223],$Vv1=[37,41,51],$Vw1=[2,31],$Vx1=[8,9,13,19,20,37,43,72],$Vy1=[2,32],$Vz1=[2,64],$VA1=[8,9,19,20,37,43,51,72],$VB1=[2,27],$VC1=[2,35],$VD1=[2,29],$VE1=[2,28],$VF1=[1,276],$VG1=[1,266],$VH1=[1,275],$VI1=[1,304],$VJ1=[1,294],$VK1=[1,303],$VL1=[1,332],$VM1=[1,322],$VN1=[1,331],$VO1=[1,367],$VP1=[1,357],$VQ1=[1,366],$VR1=[2,26],$VS1=[2,33],$VT1=[1,459],$VU1=[1,449],$VV1=[1,458],$VW1=[1,486],$VX1=[1,476],$VY1=[1,485];
        const o = JisonParser.expandParseTable;
        this.table = [o($V0,$V1,{3:1,4:2}),{1:[3]},o($V2,[2,6],{5:3,7:4,8:[1,5],9:[1,6]}),{6:[1,7],10:8,11:9,12:10,14:11,15:12,16:13,17:14,18:[1,18],19:[1,33],20:[1,26],21:[1,19],22:[1,20],23:[1,21],24:15,26:16,27:17,29:24,30:25,44:22,45:23,50:31,52:$V3,53:[1,30],71:27,72:[1,32],73:[1,28],74:[1,29]},o($V0,$V4),o($V0,$V5),o($V0,$V6),{1:[2,1]},o($V0,$V1,{4:35}),o($V0,[2,8]),{13:[1,36]},o($V0,[2,10]),o($V0,[2,11]),o($V0,[2,12]),o($V0,[2,13]),o($V7,$V1,{4:37}),o($V7,$V1,{4:38}),o($V8,$V1,{4:39}),o($V9,$V1,{4:40}),o($Va,$V1,{4:41}),o($V9,$V1,{4:42}),o($Va,$V1,{4:43}),o($V7,[2,38]),o($V7,[2,39]),o($V7,[2,21]),o($V8,[2,22]),o($V7,$Vb),o($V7,$Vc),o($V7,$Vd),o($V7,$Ve),o($Vf,$Vg,{54:44}),o($V7,$V1,{4:45}),o($V7,$Vh),o($V7,$Vi),o($V7,[2,50]),o($V2,[2,7],{7:46,8:[1,47],9:[1,48]}),o($V0,[2,9]),{7:50,8:$Vj,9:$Vk,19:$Vl,20:$Vm,25:49,31:51,42:54,43:$Vn,44:56,71:58,72:$Vo},{7:50,8:$Vj,9:$Vk,19:$Vl,20:$Vm,25:61,31:51,42:54,43:$Vn,44:56,71:58,72:$Vo},{7:63,8:[1,65],9:[1,66],13:[2,23],19:$Vl,20:$Vm,25:64,28:62,31:51,42:54,43:$Vn,44:56,71:58,72:$Vo},{7:68,8:$Vp,9:$Vq,19:[1,67]},{7:72,8:$Vr,9:$Vs,20:[1,71]},{7:68,8:$Vp,9:$Vq,19:[1,75]},{7:72,8:$Vr,9:$Vs,20:[1,76]},o($Vf,$V1,{4:77}),{7:50,8:$Vj,9:$Vk,19:$Vl,20:$Vm,25:78,31:79,42:54,43:$Vn,44:56,71:58,72:$Vo},o($V0,$V4),o($V0,$V5),o($V0,$V6),{13:[2,18]},o($V7,$V4),o($Vt,$V1,{4:80}),o($V7,$V5),o($V7,$V6),o($Vt,[2,36]),o($Vt,[2,37]),o($Vt,[2,40]),o($Vt,$Vb),o($Vt,$Vc),o($Vt,$Vh),o($Vt,$Vi),{13:[2,19]},{13:[2,20]},o($V8,$V4),{13:[2,24]},o($V8,$V5),o($V8,$V6),o($Va,$V1,{4:81}),o($V9,$V4),o($V9,$V5),o($V9,$V6),o($Vu,$V1,{4:82}),o($Va,$V4),o($Va,$V5),o($Va,$V6),o($Va,$V1,{4:83}),o($V0,[2,17]),{7:86,8:$Vv,9:$Vw,19:$Vx,20:$Vy,29:89,30:90,44:87,45:88,46:91,47:100,48:101,49:102,50:99,52:$V3,53:$Vz,55:[1,84],56:85,57:$VA,58:$VB,59:$VC,60:105,65:$VD,66:$VE,67:$VF,68:$VG,69:$VH,70:$VI,71:95,72:$VJ,73:$VK,74:$VL},{51:[1,115]},o($Vt,$V1,{4:116}),{7:118,8:$VM,9:$VN,19:$VO,20:$VP,29:124,30:125,32:117,38:119,44:122,45:123,46:126,47:133,48:134,49:135,50:132,52:$V3,53:[1,131],57:[1,139],58:[1,140],59:[1,141],60:138,65:[1,142],66:[1,143],67:[1,144],68:[1,145],69:[1,146],70:[1,147],71:128,72:$VQ,73:[1,129],74:[1,130]},{7:72,8:$Vr,9:$Vs,20:[1,148]},{7:150,8:$VR,9:$VS,13:[1,149]},{7:72,8:$Vr,9:$Vs,20:[1,153]},o($V7,$VT),o($Vf,[2,53]),o($Vf,$V4),o($Vf,[2,54]),o($Vf,[2,55]),o($Vf,[2,56]),o($Vf,[2,57]),o($Vf,[2,58]),o($Vf,$V5),o($Vf,$V6),o($Vf,$Vb),o($Vf,$Vc),o($Vf,$Vd),o($Vf,$Ve),o($Vf,$Vg,{54:154}),o($V7,$V1,{4:155}),o($Vf,$VU),o($Vf,$VV),o($Vf,$VW),o($Vf,$Vh),o($Vf,$Vi),o($Vf,$VX,{61:156,62:157,63:[1,158],64:[1,159]}),o($Vf,$VY),o($Vf,$VZ),o($Vf,$V_),o($Vf,$V$),o($Vf,$V01),o($V11,$V21),o($V11,$V31),o($V11,$V41),o($V11,$V51),o($V8,$V61),{7:118,8:$VM,9:$VN,19:$V71,20:$V81,29:164,30:165,32:160,38:161,44:162,45:163,46:166,47:173,48:174,49:175,50:172,52:$V3,53:[1,171],57:[1,179],58:[1,180],59:[1,181],60:178,65:[1,182],66:[1,183],67:[1,184],68:[1,185],69:[1,186],70:[1,187],71:168,72:$V91,73:[1,169],74:[1,170]},o($Va1,$Vb1,{33:188}),o($Vt,$V4),o($Vc1,$V1,{4:189}),o($Vt,$V5),o($Vt,$V6),o($Vc1,$Vd1),o($Vc1,$Ve1),o($Vc1,$Vf1),o($Vc1,$Vg1),o($Vc1,$Vh1),o($Vc1,$Vb),o($Vc1,$Vc),o($Vc1,$Vd),o($Vc1,$Ve),o($Vf,$Vg,{54:190}),o($V7,$V1,{4:191}),o($Vc1,$VU),o($Vc1,$VV),o($Vc1,$VW),o($Vc1,$Vh),o($Vc1,$Vi),o($Vc1,$VX,{61:192,62:193,63:[1,194],64:[1,195]}),o($Vc1,$VY),o($Vc1,$VZ),o($Vc1,$V_),o($Vc1,$V$),o($Vc1,$V01),o($Vi1,$V21),o($Vi1,$V31),o($Vi1,$V41),o($Vi1,$V51),o($Vu,$V1,{4:196}),o($V0,[2,15]),o($Vu,$V4),o($Vu,$V5),o($Vu,$V6),o($V0,[2,16]),o($Vf,$V1,{4:197}),{7:50,8:$Vj,9:$Vk,19:$Vl,20:$Vm,25:198,31:79,42:54,43:$Vn,44:56,71:58,72:$Vo},o($Vf,$Vj1),o($Vf,$Vk1),o($Vf,$Vl1),o($Vm1,$V1,{4:199}),o($Vn1,$Vb1,{33:200}),o($Vo1,$V1,{4:201}),o($Vo1,$Vd1),o($Vo1,$Ve1),o($Vo1,$Vf1),o($Vo1,$Vg1),o($Vo1,$Vh1),o($Vo1,$Vb),o($Vo1,$Vc),o($Vo1,$Vd),o($Vo1,$Ve),o($Vf,$Vg,{54:202}),o($V7,$V1,{4:203}),o($Vo1,$VU),o($Vo1,$VV),o($Vo1,$VW),o($Vo1,$Vh),o($Vo1,$Vi),o($Vo1,$VX,{61:204,62:205,63:[1,206],64:[1,207]}),o($Vo1,$VY),o($Vo1,$VZ),o($Vo1,$V_),o($Vo1,$V$),o($Vo1,$V01),o($Vp1,$V21),o($Vp1,$V31),o($Vp1,$V41),o($Vp1,$V51),{13:$Vq1,36:208,37:[1,209]},o($Vr1,$Vs1,{39:210,7:211,8:[1,212],9:[1,213]}),o($Vf,$V1,{4:214}),{7:50,8:$Vj,9:$Vk,19:$Vl,20:$Vm,25:215,31:79,42:54,43:$Vn,44:56,71:58,72:$Vo},o($Vc1,$Vj1),o($Vc1,$Vk1),o($Vc1,$Vl1),o($Vm1,$V1,{4:216}),{7:150,8:$VR,9:$VS,13:[1,217]},{7:86,8:$Vv,9:$Vw,19:$Vx,20:$Vy,29:89,30:90,44:87,45:88,46:91,47:100,48:101,49:102,50:99,52:$V3,53:$Vz,55:[1,218],56:85,57:$VA,58:$VB,59:$VC,60:105,65:$VD,66:$VE,67:$VF,68:$VG,69:$VH,70:$VI,71:95,72:$VJ,73:$VK,74:$VL},{51:[1,219]},{7:221,8:$Vt1,9:$Vu1,19:$Vx,20:$Vy,44:220,71:95,72:$VJ},{36:224,37:[1,225],51:$Vq1},o($Vv1,$Vs1,{39:226,7:227,8:[1,228],9:[1,229]}),o($Vf,$V1,{4:230}),{7:50,8:$Vj,9:$Vk,19:$Vl,20:$Vm,25:231,31:79,42:54,43:$Vn,44:56,71:58,72:$Vo},o($Vo1,$Vj1),o($Vo1,$Vk1),o($Vo1,$Vl1),o($Vm1,$V1,{4:232}),o($Va1,$Vw1),o($Vx1,$V1,{4:233}),o($Va1,$Vy1,{40:234,41:[1,235]}),o($Vc1,$V4),o($Vc1,$V5),o($Vc1,$V6),{7:86,8:$Vv,9:$Vw,19:$Vx,20:$Vy,29:89,30:90,44:87,45:88,46:91,47:100,48:101,49:102,50:99,52:$V3,53:$Vz,55:[1,236],56:85,57:$VA,58:$VB,59:$VC,60:105,65:$VD,66:$VE,67:$VF,68:$VG,69:$VH,70:$VI,71:95,72:$VJ,73:$VK,74:$VL},{51:[1,237]},{7:221,8:$Vt1,9:$Vu1,19:$VO,20:$VP,44:238,71:128,72:$VQ},o($V0,[2,14]),o($Vf,$VT),o($Vf,$V61),o($Vf,$Vz1),o($Vm1,$V4),o($Vm1,$V5),o($Vm1,$V6),o($Vn1,$Vw1),o($VA1,$V1,{4:239}),o($Vn1,$Vy1,{40:240,41:[1,241]}),o($Vo1,$V4),o($Vo1,$V5),o($Vo1,$V6),{7:86,8:$Vv,9:$Vw,19:$Vx,20:$Vy,29:89,30:90,44:87,45:88,46:91,47:100,48:101,49:102,50:99,52:$V3,53:$Vz,55:[1,242],56:85,57:$VA,58:$VB,59:$VC,60:105,65:$VD,66:$VE,67:$VF,68:$VG,69:$VH,70:$VI,71:95,72:$VJ,73:$VK,74:$VL},{51:[1,243]},{7:221,8:$Vt1,9:$Vu1,19:$V71,20:$V81,44:244,71:168,72:$V91},o($Va1,$VB1,{42:54,44:56,71:58,35:245,7:246,34:247,31:250,8:[1,248],9:[1,249],19:$Vl,20:$Vm,43:$Vn,72:$Vo}),o($Vr1,$VC1),o($Vt,$V1,{4:251}),o($Vc1,$VT),o($Vc1,$V61),o($Vc1,$Vz1),o($Vn1,$VB1,{42:54,44:56,71:58,35:252,7:253,34:254,31:257,8:[1,255],9:[1,256],19:$Vl,20:$Vm,43:$Vn,72:$Vo}),o($Vv1,$VC1),o($Vt,$V1,{4:258}),o($Vo1,$VT),o($Vo1,$V61),o($Vo1,$Vz1),o($Va1,$VD1),o($Vx1,$V4),o($Va1,$VE1),o($Vx1,$V5),o($Vx1,$V6),o($Vt,$V1,{4:259}),{7:118,8:$VM,9:$VN,19:$VF1,20:$VG1,29:263,30:264,38:260,44:261,45:262,46:265,47:272,48:273,49:274,50:271,52:$V3,53:[1,270],57:[1,278],58:[1,279],59:[1,280],60:277,65:[1,281],66:[1,282],67:[1,283],68:[1,284],69:[1,285],70:[1,286],71:267,72:$VH1,73:[1,268],74:[1,269]},o($Vn1,$VD1),o($VA1,$V4),o($Vn1,$VE1),o($VA1,$V5),o($VA1,$V6),o($Vt,$V1,{4:287}),{7:118,8:$VM,9:$VN,19:$VI1,20:$VJ1,29:291,30:292,38:288,44:289,45:290,46:293,47:300,48:301,49:302,50:299,52:$V3,53:[1,298],57:[1,306],58:[1,307],59:[1,308],60:305,65:[1,309],66:[1,310],67:[1,311],68:[1,312],69:[1,313],70:[1,314],71:295,72:$VK1,73:[1,296],74:[1,297]},{7:118,8:$VM,9:$VN,19:$VL1,20:$VM1,29:319,30:320,32:315,38:316,44:317,45:318,46:321,47:328,48:329,49:330,50:327,52:$V3,53:[1,326],57:[1,334],58:[1,335],59:[1,336],60:333,65:[1,337],66:[1,338],67:[1,339],68:[1,340],69:[1,341],70:[1,342],71:323,72:$VN1,73:[1,324],74:[1,325]},o($Vc1,$V1,{4:343}),o($Vc1,$Vd1),o($Vc1,$Ve1),o($Vc1,$Vf1),o($Vc1,$Vg1),o($Vc1,$Vh1),o($Vc1,$Vb),o($Vc1,$Vc),o($Vc1,$Vd),o($Vc1,$Ve),o($Vf,$Vg,{54:344}),o($V7,$V1,{4:345}),o($Vc1,$VU),o($Vc1,$VV),o($Vc1,$VW),o($Vc1,$Vh),o($Vc1,$Vi),o($Vc1,$VX,{61:346,62:347,63:[1,348],64:[1,349]}),o($Vc1,$VY),o($Vc1,$VZ),o($Vc1,$V_),o($Vc1,$V$),o($Vc1,$V01),o($Vi1,$V21),o($Vi1,$V31),o($Vi1,$V41),o($Vi1,$V51),{7:118,8:$VM,9:$VN,19:$VO1,20:$VP1,29:354,30:355,32:350,38:351,44:352,45:353,46:356,47:363,48:364,49:365,50:362,52:$V3,53:[1,361],57:[1,369],58:[1,370],59:[1,371],60:368,65:[1,372],66:[1,373],67:[1,374],68:[1,375],69:[1,376],70:[1,377],71:358,72:$VQ1,73:[1,359],74:[1,360]},o($Vo1,$V1,{4:378}),o($Vo1,$Vd1),o($Vo1,$Ve1),o($Vo1,$Vf1),o($Vo1,$Vg1),o($Vo1,$Vh1),o($Vo1,$Vb),o($Vo1,$Vc),o($Vo1,$Vd),o($Vo1,$Ve),o($Vf,$Vg,{54:379}),o($V7,$V1,{4:380}),o($Vo1,$VU),o($Vo1,$VV),o($Vo1,$VW),o($Vo1,$Vh),o($Vo1,$Vi),o($Vo1,$VX,{61:381,62:382,63:[1,383],64:[1,384]}),o($Vo1,$VY),o($Vo1,$VZ),o($Vo1,$V_),o($Vo1,$V$),o($Vo1,$V01),o($Vp1,$V21),o($Vp1,$V31),o($Vp1,$V41),o($Vp1,$V51),o($Va1,$VR1),o($Vc1,$V1,{4:385}),o($Vc1,$Vd1),o($Vc1,$Ve1),o($Vc1,$Vf1),o($Vc1,$Vg1),o($Vc1,$Vh1),o($Vc1,$Vb),o($Vc1,$Vc),o($Vc1,$Vd),o($Vc1,$Ve),o($Vf,$Vg,{54:386}),o($V7,$V1,{4:387}),o($Vc1,$VU),o($Vc1,$VV),o($Vc1,$VW),o($Vc1,$Vh),o($Vc1,$Vi),o($Vc1,$VX,{61:388,62:389,63:[1,390],64:[1,391]}),o($Vc1,$VY),o($Vc1,$VZ),o($Vc1,$V_),o($Vc1,$V$),o($Vc1,$V01),o($Vi1,$V21),o($Vi1,$V31),o($Vi1,$V41),o($Vi1,$V51),o($Vr1,$VS1,{7:392,8:[1,393],9:[1,394]}),o($Vf,$V1,{4:395}),{7:50,8:$Vj,9:$Vk,19:$Vl,20:$Vm,25:396,31:79,42:54,43:$Vn,44:56,71:58,72:$Vo},o($Vc1,$Vj1),o($Vc1,$Vk1),o($Vc1,$Vl1),o($Vm1,$V1,{4:397}),o($Vn1,$VR1),o($Vo1,$V1,{4:398}),o($Vo1,$Vd1),o($Vo1,$Ve1),o($Vo1,$Vf1),o($Vo1,$Vg1),o($Vo1,$Vh1),o($Vo1,$Vb),o($Vo1,$Vc),o($Vo1,$Vd),o($Vo1,$Ve),o($Vf,$Vg,{54:399}),o($V7,$V1,{4:400}),o($Vo1,$VU),o($Vo1,$VV),o($Vo1,$VW),o($Vo1,$Vh),o($Vo1,$Vi),o($Vo1,$VX,{61:401,62:402,63:[1,403],64:[1,404]}),o($Vo1,$VY),o($Vo1,$VZ),o($Vo1,$V_),o($Vo1,$V$),o($Vo1,$V01),o($Vp1,$V21),o($Vp1,$V31),o($Vp1,$V41),o($Vp1,$V51),o($Vv1,$VS1,{7:405,8:[1,406],9:[1,407]}),o($Vf,$V1,{4:408}),{7:50,8:$Vj,9:$Vk,19:$Vl,20:$Vm,25:409,31:79,42:54,43:$Vn,44:56,71:58,72:$Vo},o($Vo1,$Vj1),o($Vo1,$Vk1),o($Vo1,$Vl1),o($Vm1,$V1,{4:410}),o($Vr1,$Vs1,{39:411,7:412,8:[1,413],9:[1,414]}),o($Vf,$V1,{4:415}),{7:50,8:$Vj,9:$Vk,19:$Vl,20:$Vm,25:416,31:79,42:54,43:$Vn,44:56,71:58,72:$Vo},o($Vc1,$Vj1),o($Vc1,$Vk1),o($Vc1,$Vl1),o($Vm1,$V1,{4:417}),o($Vc1,$V4),o($Vc1,$V5),o($Vc1,$V6),{7:86,8:$Vv,9:$Vw,19:$Vx,20:$Vy,29:89,30:90,44:87,45:88,46:91,47:100,48:101,49:102,50:99,52:$V3,53:$Vz,55:[1,418],56:85,57:$VA,58:$VB,59:$VC,60:105,65:$VD,66:$VE,67:$VF,68:$VG,69:$VH,70:$VI,71:95,72:$VJ,73:$VK,74:$VL},{51:[1,419]},{7:221,8:$Vt1,9:$Vu1,19:$VF1,20:$VG1,44:420,71:267,72:$VH1},o($Vv1,$Vs1,{39:421,7:422,8:[1,423],9:[1,424]}),o($Vf,$V1,{4:425}),{7:50,8:$Vj,9:$Vk,19:$Vl,20:$Vm,25:426,31:79,42:54,43:$Vn,44:56,71:58,72:$Vo},o($Vo1,$Vj1),o($Vo1,$Vk1),o($Vo1,$Vl1),o($Vm1,$V1,{4:427}),o($Vo1,$V4),o($Vo1,$V5),o($Vo1,$V6),{7:86,8:$Vv,9:$Vw,19:$Vx,20:$Vy,29:89,30:90,44:87,45:88,46:91,47:100,48:101,49:102,50:99,52:$V3,53:$Vz,55:[1,428],56:85,57:$VA,58:$VB,59:$VC,60:105,65:$VD,66:$VE,67:$VF,68:$VG,69:$VH,70:$VI,71:95,72:$VJ,73:$VK,74:$VL},{51:[1,429]},{7:221,8:$Vt1,9:$Vu1,19:$VI1,20:$VJ1,44:430,71:295,72:$VK1},o($Va1,$Vy1,{40:431,41:[1,432]}),o($Vc1,$V4),o($Vc1,$V5),o($Vc1,$V6),{7:86,8:$Vv,9:$Vw,19:$Vx,20:$Vy,29:89,30:90,44:87,45:88,46:91,47:100,48:101,49:102,50:99,52:$V3,53:$Vz,55:[1,433],56:85,57:$VA,58:$VB,59:$VC,60:105,65:$VD,66:$VE,67:$VF,68:$VG,69:$VH,70:$VI,71:95,72:$VJ,73:$VK,74:$VL},{51:[1,434]},{7:221,8:$Vt1,9:$Vu1,19:$VL1,20:$VM1,44:435,71:323,72:$VN1},o($Vc1,$VT),o($Vc1,$V61),o($Vc1,$Vz1),o($Vn1,$Vy1,{40:436,41:[1,437]}),o($Vo1,$V4),o($Vo1,$V5),o($Vo1,$V6),{7:86,8:$Vv,9:$Vw,19:$Vx,20:$Vy,29:89,30:90,44:87,45:88,46:91,47:100,48:101,49:102,50:99,52:$V3,53:$Vz,55:[1,438],56:85,57:$VA,58:$VB,59:$VC,60:105,65:$VD,66:$VE,67:$VF,68:$VG,69:$VH,70:$VI,71:95,72:$VJ,73:$VK,74:$VL},{51:[1,439]},{7:221,8:$Vt1,9:$Vu1,19:$VO1,20:$VP1,44:440,71:358,72:$VQ1},o($Vo1,$VT),o($Vo1,$V61),o($Vo1,$Vz1),o($Vr1,$VC1),o($Vt,$V1,{4:441}),o($Vc1,$VT),o($Vc1,$V61),o($Vc1,$Vz1),o($Vv1,$VC1),o($Vt,$V1,{4:442}),o($Vo1,$VT),o($Vo1,$V61),o($Vo1,$Vz1),{7:118,8:$VM,9:$VN,19:$VT1,20:$VU1,29:446,30:447,38:443,44:444,45:445,46:448,47:455,48:456,49:457,50:454,52:$V3,53:[1,453],57:[1,461],58:[1,462],59:[1,463],60:460,65:[1,464],66:[1,465],67:[1,466],68:[1,467],69:[1,468],70:[1,469],71:450,72:$VV1,73:[1,451],74:[1,452]},{7:118,8:$VM,9:$VN,19:$VW1,20:$VX1,29:473,30:474,38:470,44:471,45:472,46:475,47:482,48:483,49:484,50:481,52:$V3,53:[1,480],57:[1,488],58:[1,489],59:[1,490],60:487,65:[1,491],66:[1,492],67:[1,493],68:[1,494],69:[1,495],70:[1,496],71:477,72:$VY1,73:[1,478],74:[1,479]},o($Vc1,$V1,{4:497}),o($Vc1,$Vd1),o($Vc1,$Ve1),o($Vc1,$Vf1),o($Vc1,$Vg1),o($Vc1,$Vh1),o($Vc1,$Vb),o($Vc1,$Vc),o($Vc1,$Vd),o($Vc1,$Ve),o($Vf,$Vg,{54:498}),o($V7,$V1,{4:499}),o($Vc1,$VU),o($Vc1,$VV),o($Vc1,$VW),o($Vc1,$Vh),o($Vc1,$Vi),o($Vc1,$VX,{61:500,62:501,63:[1,502],64:[1,503]}),o($Vc1,$VY),o($Vc1,$VZ),o($Vc1,$V_),o($Vc1,$V$),o($Vc1,$V01),o($Vi1,$V21),o($Vi1,$V31),o($Vi1,$V41),o($Vi1,$V51),o($Vo1,$V1,{4:504}),o($Vo1,$Vd1),o($Vo1,$Ve1),o($Vo1,$Vf1),o($Vo1,$Vg1),o($Vo1,$Vh1),o($Vo1,$Vb),o($Vo1,$Vc),o($Vo1,$Vd),o($Vo1,$Ve),o($Vf,$Vg,{54:505}),o($V7,$V1,{4:506}),o($Vo1,$VU),o($Vo1,$VV),o($Vo1,$VW),o($Vo1,$Vh),o($Vo1,$Vi),o($Vo1,$VX,{61:507,62:508,63:[1,509],64:[1,510]}),o($Vo1,$VY),o($Vo1,$VZ),o($Vo1,$V_),o($Vo1,$V$),o($Vo1,$V01),o($Vp1,$V21),o($Vp1,$V31),o($Vp1,$V41),o($Vp1,$V51),o($Vr1,$VS1,{7:511,8:[1,512],9:[1,513]}),o($Vf,$V1,{4:514}),{7:50,8:$Vj,9:$Vk,19:$Vl,20:$Vm,25:515,31:79,42:54,43:$Vn,44:56,71:58,72:$Vo},o($Vc1,$Vj1),o($Vc1,$Vk1),o($Vc1,$Vl1),o($Vm1,$V1,{4:516}),o($Vv1,$VS1,{7:517,8:[1,518],9:[1,519]}),o($Vf,$V1,{4:520}),{7:50,8:$Vj,9:$Vk,19:$Vl,20:$Vm,25:521,31:79,42:54,43:$Vn,44:56,71:58,72:$Vo},o($Vo1,$Vj1),o($Vo1,$Vk1),o($Vo1,$Vl1),o($Vm1,$V1,{4:522}),o($Vc1,$V4),o($Vc1,$V5),o($Vc1,$V6),{7:86,8:$Vv,9:$Vw,19:$Vx,20:$Vy,29:89,30:90,44:87,45:88,46:91,47:100,48:101,49:102,50:99,52:$V3,53:$Vz,55:[1,523],56:85,57:$VA,58:$VB,59:$VC,60:105,65:$VD,66:$VE,67:$VF,68:$VG,69:$VH,70:$VI,71:95,72:$VJ,73:$VK,74:$VL},{51:[1,524]},{7:221,8:$Vt1,9:$Vu1,19:$VT1,20:$VU1,44:525,71:450,72:$VV1},o($Vo1,$V4),o($Vo1,$V5),o($Vo1,$V6),{7:86,8:$Vv,9:$Vw,19:$Vx,20:$Vy,29:89,30:90,44:87,45:88,46:91,47:100,48:101,49:102,50:99,52:$V3,53:$Vz,55:[1,526],56:85,57:$VA,58:$VB,59:$VC,60:105,65:$VD,66:$VE,67:$VF,68:$VG,69:$VH,70:$VI,71:95,72:$VJ,73:$VK,74:$VL},{51:[1,527]},{7:221,8:$Vt1,9:$Vu1,19:$VW1,20:$VX1,44:528,71:477,72:$VY1},o($Vc1,$VT),o($Vc1,$V61),o($Vc1,$Vz1),o($Vo1,$VT),o($Vo1,$V61),o($Vo1,$Vz1)];
        this.defaultActions = {7:[2,1],49:[2,18],61:[2,19],62:[2,20],64:[2,24]};
    }
    performAction (yytext, yyleng, yylineno, yy, yystate /* action[1] */, $$ /* vstack */, _$ /* lstack */) {
/* this == yyval */
          const $0 = $$.length - 1;
        switch (yystate) {
case 1:

        return { statementList: $$[$0-2].concat($$[$0-1]) };
      
break;
case 2: case 6: case 23: case 27: case 30: case 34: case 52:
this.$ = [];
break;
case 3:
this.$ = $$[$0-1].concat([$$[$0]]);
break;
case 7:
this.$ = $$[$0-2].concat($$[$0-1], $$[$0]);
break;
case 9:
this.$ = $$[$0-1].concat([$$[$0]]);;
break;
case 14:

        yy._prefixes[$$[$0-4].value] = $$[$0-2].value;
        this.$ = [{ "type": "prefix", keyword: $$[$0-6], ws1: $$[$0-5], prefix: $$[$0-4], ws2: $$[$0-3], namespace: $$[$0-2], ws3: $$[$0-1], dot: $$[$0] }];
      
break;
case 15:

        yy._setBase(yy._base === null ||
                    absoluteIRI.test($$[$0-2].value.slice(1, -1)) ? $$[$0-2].value.slice(1, -1) : yy._resolveIRI($$[$0-2].value.slice(1, -1)));
        this.$ = [{ "type": "base", keyword: $$[$0-4], ws1: $$[$0-3], base: $$[$0-2], ws2: $$[$0-1], dot: $$[$0] }];
      
break;
case 16:

        yy._prefixes[$$[$0-2].value] = $$[$0].value;
        this.$ = [{ "type": "sparqlPrefix", keyword: $$[$0-4], ws1: $$[$0-3], prefix: $$[$0-2], ws2: $$[$0-1], namespace: $$[$0] }];
      
break;
case 17:

        yy._setBase(yy._base === null ||
                    absoluteIRI.test($$[$0].value.slice(1, -1)) ? $$[$0].value.slice(1, -1) : yy._resolveIRI($$[$0].value.slice(1, -1)));
        this.$ = [{ "type": "sparqlBase", keyword: $$[$0-2], ws1: $$[$0-1], base: $$[$0] }];
      
break;
case 18: case 19:
this.$ = yy.finishSubject([{ type: "triples", subject: $$[$0-2], ws1: $$[$0-1], predicateObjectList: $$[$0]}]);
break;
case 20:
this.$ = yy.finishSubject([{ type: "triples", subject: $$[$0-2], ws1: $$[$0-1], predicateObjectList: $$[$0]}]) // blankNodePropertyList _QpredicateObjectList_E_Opt;
break;
case 21:
 yy.setSubject($$[$0].node); this.$ = $$[$0].elts; // collection_SUBJECT
 
break;
case 22:
 yy.setSubject($$[$0].node); this.$ = $$[$0].elts[0]; // blankNodePropertyList_SUBJECT
 
break;
case 24:
this.$ = $$[$0];;
break;
case 25:
this.$ = [{ type: "verb_objectList", verb: $$[$0-3], ws1: $$[$0-2], objectList: $$[$0-1] }].concat($$[$0]) // verb objectList _Q_O_QGT_SEMI_E_S_Qverb_E_S_QobjectList_E_Opt_C_E_Star;
break;
case 26:
this.$ = [{ type: "verb_objectList", verb: $$[$0-2], ws1: $$[$0-1], objectList: $$[$0] }];
break;
case 29:
this.$ = [$$[$0-2]].concat($$[$0-1], $$[$0]);
break;
case 31:
this.$ = $$[$0-1].concat($$[$0]) // Q_O_QGT_SEMI_E_S_Qverb_E_S_QobjectList_E_Opt_C_E_Star _O_QGT_SEMI_E_S_Qverb_E_S_QobjectList_E_Opt_C;
break;
case 32:
this.$ = yy.finishObjectList($$[$0-2], $$[$0-1].concat($$[$0])) // object _Q_O_QGT_COMMA_E_S_Qobject_E_C_E_Star;
break;
case 33:
this.$ = [$$[$0-3]].concat($$[$0-2], $$[$0-1], $$[$0]);
break;
case 35:
this.$ = $$[$0-1].concat($$[$0]) // Q_O_QGT_COMMA_E_S_Qobject_E_C_E_Star _O_QGT_COMMA_E_S_Qobject_E_C;
break;
case 36:
this.$ = yy.setPredicate($$[$0]);
break;
case 37:
this.$ = yy.setPredicate({ "type": "a", "origText": "a" }) // left is a token, right a const;
break;
case 38: case 39:
this.$ = yy.setSubject($$[$0]);
break;
case 41: case 42: case 45:
this.$ = [yy.finishTriple($$[$0])];
break;
case 43:
yy.finishTriple($$[$0].node); this.$ = $$[$0].elts
break;
case 44:
 yy.finishTriple($$[$0].node); this.$ = $$[$0].elts; 
break;
case 49:
this.$ = yy.finishBlankNodePropertyList($$[$0-3], $$[$0-2], $$[$0-1], $$[$0]);
break;
case 50:
this.$ = yy.startBlankNodePropertyList($$[$0]);;
break;
case 51:
this.$ = yy.makeFirstRest($$[$0-3], $$[$0-2], $$[$0-1], $$[$0]);
break;
case 53:
this.$ = $$[$0-2].concat({ws0: $$[$0-1], node: $$[$0].node, elts: $$[$0].elts}) // Qobject_E_Star object -- collectionObject;
break;
case 54: case 55: case 58:
this.$ = {node: $$[$0], elts: [$$[$0]]};
break;
case 56:
this.$ = $$[$0] // collection collection;
break;
case 57:
this.$ = {node: $$[$0].node, elts: $$[$0].elts} // collection blankNodePropertyList;
break;
case 59:
this.$ = yy.createTypedLiteral($$[$0], XSD_INTEGER);
break;
case 60:
this.$ = yy.createTypedLiteral($$[$0], XSD_DECIMAL);
break;
case 61:
this.$ = yy.createTypedLiteral($$[$0], XSD_DOUBLE);
break;
case 62:
this.$ = yy.createParsedLiteral($$[$0].type, $$[$0-1], $$[$0].attrs);
break;
case 63:
this.$ = { type: "langTagLiteral", attrs: { language: { type: "LANGTAG", ws0: $$[$0].ws, value: yytext.rest.substring(1), origText: $$[$0].rest } } };
break;
case 64:
this.$ = { type: "datatypedLiteral", attrs: { datatype: { type: "ParsedDatatype", ws0: $$[$0-2].ws, token: { type: "token", origText: $$[$0-2].rest }, ws1: $$[$0-1], iri: $$[$0] } } };
break;
case 65:
this.$ = { type: "simpleLiteral", attrs: {} };
break;
case 66:
this.$ = $$[$0];
break;
case 67: case 68:
this.$ = yy.createTypedLiteral($$[$0], XSD_BOOLEAN);
break;
        }
    }
}

// Export module
Object.defineProperty(exports, "__esModule", { value: true });
exports.TurtleJisonParser = TurtleJisonParser;


/* generated by @ts-jison/lexer-generator 0.4.1-alpha.2 */
const { JisonLexer } = require('@ts-jison/lexer');

class TurtleJisonLexer extends JisonLexer {
    constructor (yy = {}) {
        super(yy);
        this.options = {"moduleName":"TurtleJison"};
        this.rules = [
        /^(?:(?:\s+|#[^\u000a\u000d]*|\/\*(?:[^*]|\*(?:[^/]|\\\/))*\*\/)*\^\^)/,
        /^(?:\s+)/,
        /^(?:#[^\u000a\u000d]*|\/\*(?:[^*]|\*(?:[^/]|\\\/))*\*\/)/,
        /^(?:@base\b)/,
        /^(?:@prefix\b)/,
        /^(?:@[A-Za-z]+(?:-[0-9A-Za-z]+)*)/,
        /^(?:true\b)/,
        /^(?:false\b)/,
        /^(?:[Pp][Rr][Ee][Ff][Ii][Xx])/,
        /^(?:[Bb][Aa][Ss][Ee])/,
        /^(?:\[(?:\s+|#[^\u000a\u000d]*|\/\*(?:[^*]|\*(?:[^/]|\\\/))*\*\/)*\])/,
        /^(?:<(?:[^\u0000-\u0020<>\"{}|^`\\]|\\u(?:[0-9]|[A-F]|[a-f])(?:[0-9]|[A-F]|[a-f])(?:[0-9]|[A-F]|[a-f])(?:[0-9]|[A-F]|[a-f])|\\U(?:[0-9]|[A-F]|[a-f])(?:[0-9]|[A-F]|[a-f])(?:[0-9]|[A-F]|[a-f])(?:[0-9]|[A-F]|[a-f])(?:[0-9]|[A-F]|[a-f])(?:[0-9]|[A-F]|[a-f])(?:[0-9]|[A-F]|[a-f])(?:[0-9]|[A-F]|[a-f]))*>)/,
        /^(?:(?:(?:[A-Z]|[a-z]|[\u00c0-\u00d6]|[\u00d8-\u00f6]|[\u00f8-\u02ff]|[\u0370-\u037d]|[\u037f-\u1fff]|[\u200c-\u200d]|[\u2070-\u218f]|[\u2c00-\u2fef]|[\u3001-\ud7ff]|[\uf900-\ufdcf]|[\ufdf0-\ufffd]|[\uD800-\uDB7F][\uDC00-\uDFFF])(?:(?:[A-Z]|[a-z]|[\u00c0-\u00d6]|[\u00d8-\u00f6]|[\u00f8-\u02ff]|[\u0370-\u037d]|[\u037f-\u1fff]|[\u200c-\u200d]|[\u2070-\u218f]|[\u2c00-\u2fef]|[\u3001-\ud7ff]|[\uf900-\ufdcf]|[\ufdf0-\ufffd]|[\uD800-\uDB7F][\uDC00-\uDFFF]|_|_|-|[0-9]|[\u00b7]|[\u0300-\u036f]|[\u203f-\u2040]|\.)*(?:[A-Z]|[a-z]|[\u00c0-\u00d6]|[\u00d8-\u00f6]|[\u00f8-\u02ff]|[\u0370-\u037d]|[\u037f-\u1fff]|[\u200c-\u200d]|[\u2070-\u218f]|[\u2c00-\u2fef]|[\u3001-\ud7ff]|[\uf900-\ufdcf]|[\ufdf0-\ufffd]|[\uD800-\uDB7F][\uDC00-\uDFFF]|_|_|-|[0-9]|[\u00b7]|[\u0300-\u036f]|[\u203f-\u2040]))?)?:(?:[A-Z]|[a-z]|[\u00c0-\u00d6]|[\u00d8-\u00f6]|[\u00f8-\u02ff]|[\u0370-\u037d]|[\u037f-\u1fff]|[\u200c-\u200d]|[\u2070-\u218f]|[\u2c00-\u2fef]|[\u3001-\ud7ff]|[\uf900-\ufdcf]|[\ufdf0-\ufffd]|[\uD800-\uDB7F][\uDC00-\uDFFF]|_|_|:|[0-9]|%(?:[0-9]|[A-F]|[a-f])(?:[0-9]|[A-F]|[a-f])|\\(?:_|~|\.|-|!|\$|&|'|\(|\)|\*|\+|,|;|=|\/|\?|#|@|%))(?:[A-Z]|[a-z]|[\u00c0-\u00d6]|[\u00d8-\u00f6]|[\u00f8-\u02ff]|[\u0370-\u037d]|[\u037f-\u1fff]|[\u200c-\u200d]|[\u2070-\u218f]|[\u2c00-\u2fef]|[\u3001-\ud7ff]|[\uf900-\ufdcf]|[\ufdf0-\ufffd]|[\uD800-\uDB7F][\uDC00-\uDFFF]|_|_|-|[0-9]|[\u00b7]|[\u0300-\u036f]|[\u203f-\u2040]|\.|:|%(?:[0-9]|[A-F]|[a-f])(?:[0-9]|[A-F]|[a-f])|\\(?:_|~|\.|-|!|\$|&|'|\(|\)|\*|\+|,|;|=|\/|\?|#|@|%))*)/,
        /^(?:(?:(?:[A-Z]|[a-z]|[\u00c0-\u00d6]|[\u00d8-\u00f6]|[\u00f8-\u02ff]|[\u0370-\u037d]|[\u037f-\u1fff]|[\u200c-\u200d]|[\u2070-\u218f]|[\u2c00-\u2fef]|[\u3001-\ud7ff]|[\uf900-\ufdcf]|[\ufdf0-\ufffd]|[\uD800-\uDB7F][\uDC00-\uDFFF])(?:(?:[A-Z]|[a-z]|[\u00c0-\u00d6]|[\u00d8-\u00f6]|[\u00f8-\u02ff]|[\u0370-\u037d]|[\u037f-\u1fff]|[\u200c-\u200d]|[\u2070-\u218f]|[\u2c00-\u2fef]|[\u3001-\ud7ff]|[\uf900-\ufdcf]|[\ufdf0-\ufffd]|[\uD800-\uDB7F][\uDC00-\uDFFF]|_|_|-|[0-9]|[\u00b7]|[\u0300-\u036f]|[\u203f-\u2040]|\.)*(?:[A-Z]|[a-z]|[\u00c0-\u00d6]|[\u00d8-\u00f6]|[\u00f8-\u02ff]|[\u0370-\u037d]|[\u037f-\u1fff]|[\u200c-\u200d]|[\u2070-\u218f]|[\u2c00-\u2fef]|[\u3001-\ud7ff]|[\uf900-\ufdcf]|[\ufdf0-\ufffd]|[\uD800-\uDB7F][\uDC00-\uDFFF]|_|_|-|[0-9]|[\u00b7]|[\u0300-\u036f]|[\u203f-\u2040]))?)?:)/,
        /^(?:_:(?:[A-Z]|[a-z]|[\u00c0-\u00d6]|[\u00d8-\u00f6]|[\u00f8-\u02ff]|[\u0370-\u037d]|[\u037f-\u1fff]|[\u200c-\u200d]|[\u2070-\u218f]|[\u2c00-\u2fef]|[\u3001-\ud7ff]|[\uf900-\ufdcf]|[\ufdf0-\ufffd]|[\uD800-\uDB7F][\uDC00-\uDFFF]|_|_|[0-9])(?:(?:[A-Z]|[a-z]|[\u00c0-\u00d6]|[\u00d8-\u00f6]|[\u00f8-\u02ff]|[\u0370-\u037d]|[\u037f-\u1fff]|[\u200c-\u200d]|[\u2070-\u218f]|[\u2c00-\u2fef]|[\u3001-\ud7ff]|[\uf900-\ufdcf]|[\ufdf0-\ufffd]|[\uD800-\uDB7F][\uDC00-\uDFFF]|_|_|-|[0-9]|[\u00b7]|[\u0300-\u036f]|[\u203f-\u2040]|\.)*(?:[A-Z]|[a-z]|[\u00c0-\u00d6]|[\u00d8-\u00f6]|[\u00f8-\u02ff]|[\u0370-\u037d]|[\u037f-\u1fff]|[\u200c-\u200d]|[\u2070-\u218f]|[\u2c00-\u2fef]|[\u3001-\ud7ff]|[\uf900-\ufdcf]|[\ufdf0-\ufffd]|[\uD800-\uDB7F][\uDC00-\uDFFF]|_|_|-|[0-9]|[\u00b7]|[\u0300-\u036f]|[\u203f-\u2040]))?)/,
        /^(?:[+-]?(?:[0-9]+\.[0-9]*[Ee][+-]?[0-9]+|\.?[0-9]+[Ee][+-]?[0-9]+))/,
        /^(?:[+-]?[0-9]*\.[0-9]+)/,
        /^(?:[+-]?[0-9]+)/,
        /^(?:'''(?:(?:'|'')?(?:[^\'\\]|\\[\"\'\\bfnrt]|\\u(?:[0-9]|[A-F]|[a-f])(?:[0-9]|[A-F]|[a-f])(?:[0-9]|[A-F]|[a-f])(?:[0-9]|[A-F]|[a-f])|\\U(?:[0-9]|[A-F]|[a-f])(?:[0-9]|[A-F]|[a-f])(?:[0-9]|[A-F]|[a-f])(?:[0-9]|[A-F]|[a-f])(?:[0-9]|[A-F]|[a-f])(?:[0-9]|[A-F]|[a-f])(?:[0-9]|[A-F]|[a-f])(?:[0-9]|[A-F]|[a-f])))*''')/,
        /^(?:"""(?:(?:"|"")?(?:[^\"\\]|\\[\"\'\\bfnrt]|\\u(?:[0-9]|[A-F]|[a-f])(?:[0-9]|[A-F]|[a-f])(?:[0-9]|[A-F]|[a-f])(?:[0-9]|[A-F]|[a-f])|\\U(?:[0-9]|[A-F]|[a-f])(?:[0-9]|[A-F]|[a-f])(?:[0-9]|[A-F]|[a-f])(?:[0-9]|[A-F]|[a-f])(?:[0-9]|[A-F]|[a-f])(?:[0-9]|[A-F]|[a-f])(?:[0-9]|[A-F]|[a-f])(?:[0-9]|[A-F]|[a-f])))*""")/,
        /^(?:'(?:[^\u0027\u005c\u000a\u000d]|\\[\"\'\\bfnrt]|\\u(?:[0-9]|[A-F]|[a-f])(?:[0-9]|[A-F]|[a-f])(?:[0-9]|[A-F]|[a-f])(?:[0-9]|[A-F]|[a-f])|\\U(?:[0-9]|[A-F]|[a-f])(?:[0-9]|[A-F]|[a-f])(?:[0-9]|[A-F]|[a-f])(?:[0-9]|[A-F]|[a-f])(?:[0-9]|[A-F]|[a-f])(?:[0-9]|[A-F]|[a-f])(?:[0-9]|[A-F]|[a-f])(?:[0-9]|[A-F]|[a-f]))*')/,
        /^(?:"(?:[^\u0022\u005c\u000a\u000d]|\\[\"\'\\bfnrt]|\\u(?:[0-9]|[A-F]|[a-f])(?:[0-9]|[A-F]|[a-f])(?:[0-9]|[A-F]|[a-f])(?:[0-9]|[A-F]|[a-f])|\\U(?:[0-9]|[A-F]|[a-f])(?:[0-9]|[A-F]|[a-f])(?:[0-9]|[A-F]|[a-f])(?:[0-9]|[A-F]|[a-f])(?:[0-9]|[A-F]|[a-f])(?:[0-9]|[A-F]|[a-f])(?:[0-9]|[A-F]|[a-f])(?:[0-9]|[A-F]|[a-f]))*")/,
        /^(?:a\b)/,
        /^(?:\.)/,
        /^(?:;)/,
        /^(?:,)/,
        /^(?:\[)/,
        /^(?:\])/,
        /^(?:\()/,
        /^(?:\))/,
        /^(?:$)/,
        /^(?:[a-zA-Z0-9_-]+)/,
        /^(?:.)/
    ];
        this.conditions = {"INITIAL":{"rules":[0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32],"inclusive":true}};
    }
    performAction (yy, yy_, $avoiding_name_collisions, YY_START) {
              let YYSTATE = YY_START;
            switch ($avoiding_name_collisions) {
    case 0:yy_.yytext = yy.crackSkipped(yy_.yytext, yy_.yylloc); return 64;
    case 1:yy_.yytext = yy.skip('ws', yy_.yytext, yy_.yylloc); return 8
    case 2:yy_.yytext = yy.skip('comment', yy_.yytext, yy_.yylloc); return 9
    case 3:yy_.yytext = { type: "KEYWORD", origText: yy_.yytext }; return 21;
    case 4:yy_.yytext = { type: "KEYWORD", origText: yy_.yytext }; return 18;
    case 5:yy_.yytext = yy.crackSkipped(yy_.yytext, yy_.yylloc); return 63;
    case 6:yy_.yytext = { type: "boolean", origText: yy_.yytext }; return 65;
    case 7:yy_.yytext = { type: "boolean", origText: yy_.yytext }; return 66;
    case 8:yy_.yytext = { type: "KEYWORD", origText: yy_.yytext }; return 22;
    case 9:yy_.yytext = { type: "KEYWORD", origText: yy_.yytext }; return 23;
    case 10:yy_.yytext = yy.createBlankNode("ANON", yy_.yytext); return 74;
    case 11:yy_.yytext = yy.createRelativeIri(yy_.yytext); return 20;
    case 12:yy_.yytext = yy.createPrefixedIri(yy_.yytext); return 72;
    case 13:yy_.yytext = yy.parsePrefix(yy_.yytext); return 19;
    case 14:yy_.yytext = yy.createBlankNode("BLANK_NODE_LABEL", yy_.yytext); return 73;
    case 15:yy_.yytext = { type: "DOUBLE",  value: yy_.yytext, origText: yy_.yytext }; return 59;
    case 16:yy_.yytext = { type: "DECIMAL", value: yy_.yytext, origText: yy_.yytext }; return 58;
    case 17:yy_.yytext = { type: "INTEGER", value: yy_.yytext, origText: yy_.yytext }; return 57;
    case 18:yy_.yytext = { type: "STRING_LITERAL_LONG1", value: yy.unescapeString(yy_.yytext, 3), origText: yy_.yytext }; return 69;
    case 19:yy_.yytext = { type: "STRING_LITERAL_LONG2", value: yy.unescapeString(yy_.yytext, 3), origText: yy_.yytext }; return 70;
    case 20:yy_.yytext = { type: "STRING_LITERAL1", value: yy.unescapeString(yy_.yytext, 1), origText: yy_.yytext }; return 67;
    case 21:yy_.yytext = { type: "STRING_LITERAL2", value: yy.unescapeString(yy_.yytext, 1), origText: yy_.yytext }; return 68;
    case 22:yy_.yytext = { type: "keyword", origText: yy_.yytext }; return 43;
    case 23:yy_.yytext = { type: "token", origText: yy_.yytext }; return 13;
    case 24:yy_.yytext = { type: "token", origText: yy_.yytext }; return 37;
    case 25:yy_.yytext = { type: "token", origText: yy_.yytext }; return 41;
    case 26:yy_.yytext = { type: "startBNode", origText: yy_.yytext }; return 52;
    case 27:yy_.yytext = { type: "endBNode", origText: yy_.yytext }; return 51;
    case 28:yy_.yytext = { type: "startCollection", origText: yy_.yytext }; return 53;
    case 29:yy_.yytext = { type: "endCollection", origText: yy_.yytext }; return 55;
    case 30:return 6;
    case 31:return 'unexpected word "'+yy_.yytext+'"';
    case 32:return 'invalid character '+yy_.yytext;
        }
    }
}


// Export module
Object.defineProperty(exports, "__esModule", { value: true });
exports.TurtleJisonLexer = TurtleJisonLexer;


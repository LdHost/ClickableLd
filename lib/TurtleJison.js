const { JisonParser, o } = require('@ts-jison/parser');
/**
 * parser generated by  @ts-jison/parser-generator 0.4.1-alpha.2
 * @returns Parser implementing JisonParserApi and a Lexer implementing JisonLexerApi.
 */

  /*
    ShEx parser in the Jison parser generator format.
  */

  const RDF = 'http://www.w3.org/1999/02/22-rdf-syntax-ns#',
      RDF_TYPE  = RDF + 'type',
      RDF_FIRST = RDF + 'first',
      RDF_REST  = RDF + 'rest',
      RDF_NIL   = RDF + 'nil',
      XSD = 'http://www.w3.org/2001/XMLSchema#',
      XSD_INTEGER  = XSD + 'integer',
      XSD_DECIMAL  = XSD + 'decimal',
      XSD_FLOAT   = XSD + 'float',
      XSD_DOUBLE   = XSD + 'double',
      XSD_BOOLEAN  = XSD + 'boolean',
      XSD_TRUE =  '"true"^^'  + XSD_BOOLEAN,
      XSD_FALSE = '"false"^^' + XSD_BOOLEAN,
      XSD_PATTERN        = XSD + 'pattern',
      XSD_MININCLUSIVE   = XSD + 'minInclusive',
      XSD_MINEXCLUSIVE   = XSD + 'minExclusive',
      XSD_MAXINCLUSIVE   = XSD + 'maxInclusive',
      XSD_MAXEXCLUSIVE   = XSD + 'maxExclusive',
      XSD_LENGTH         = XSD + 'length',
      XSD_MINLENGTH      = XSD + 'minLength',
      XSD_MAXLENGTH      = XSD + 'maxLength',
      XSD_TOTALDIGITS    = XSD + 'totalDigits',
      XSD_FRACTIONDIGITS = XSD + 'fractionDigits';

  const numericDatatypes = [
      XSD + "integer",
      XSD + "decimal",
      XSD + "float",
      XSD + "double",
      XSD + "string",
      XSD + "boolean",
      XSD + "dateTime",
      XSD + "nonPositiveInteger",
      XSD + "negativeInteger",
      XSD + "long",
      XSD + "int",
      XSD + "short",
      XSD + "byte",
      XSD + "nonNegativeInteger",
      XSD + "unsignedLong",
      XSD + "unsignedInt",
      XSD + "unsignedShort",
      XSD + "unsignedByte",
      XSD + "positiveInteger"
  ];

  const absoluteIRI = /^[a-z][a-z0-9+.-]*:/i;


  // Creates a literal with the given value and type
  function createLiteral(value, type) {
    return { value: value, type: type };
  }

  // Regular expression and replacement strings to escape strings
  const stringEscapeReplacements = { '\\': '\\', "'": "'", '"': '"',
                                   't': '\t', 'b': '\b', 'n': '\n', 'r': '\r', 'f': '\f' },
      semactEscapeReplacements = { '\\': '\\', '%': '%' },
      pnameEscapeReplacements = {
        '\\': '\\', "'": "'", '"': '"',
        'n': '\n', 'r': '\r', 't': '\t', 'f': '\f', 'b': '\b',
        '_': '_', '~': '~', '.': '.', '-': '-', '!': '!', '$': '$', '&': '&',
        '(': '(', ')': ')', '*': '*', '+': '+', ',': ',', ';': ';', '=': '=',
        '/': '/', '?': '?', '#': '#', '@': '@', '%': '%',
      };


  // Translates string escape codes in the string into their textual equivalent
  function unescapeString(string, trimLength) {
    string = string.substring(trimLength, string.length - trimLength);
    return unescapeText(string, stringEscapeReplacements);
  }

  function unescapeLangString(string, trimLength) {
    const at = string.lastIndexOf("@");
    const lang = string.substr(at);
    string = string.substr(0, at);
    const u = unescapeString(string, trimLength);
    return extend(u, { language: lowercase(lang.substr(1)) });
  }

  function unescapeText (string, replacements) {
    const regex = /\\u([a-fA-F0-9]{4})|\\U([a-fA-F0-9]{8})|\\(.)/g;
    try {
      string = string.replace(regex, function (sequence, unicode4, unicode8, escapedChar) {
        let charCode;
        if (unicode4) {
          charCode = parseInt(unicode4, 16);
          if (isNaN(charCode)) throw new Error(); // can never happen (regex), but helps performance
          return String.fromCharCode(charCode);
        }
        else if (unicode8) {
          charCode = parseInt(unicode8, 16);
          if (isNaN(charCode)) throw new Error(); // can never happen (regex), but helps performance
          if (charCode < 0xFFFF) return String.fromCharCode(charCode);
          return String.fromCharCode(0xD800 + ((charCode -= 0x10000) >> 10), 0xDC00 + (charCode & 0x3FF));
        }
        else {
          const replacement = replacements[escapedChar];
          if (!replacement) throw new Error("no replacement found for '" + escapedChar + "'");
          return replacement;
        }
      });
      return string;
    }
    catch (error) { console.warn(error); return ''; }
  }

class TurtleJisonParser extends JisonParser {
    constructor(yy = {}, lexer = new TurtleJisonLexer(yy)) {
        super(yy, lexer);
        this.symbols_ = {"error":2,"turtleDoc":3,"Qstatement_E_Star":4,"EOF":5,"statement":6,"directive":7,"triples":8,"GT_DOT":9,"prefixID":10,"base":11,"sparqlPrefix":12,"sparqlBase":13,"PREFIX":14,"PNAME_NS":15,"IRIREF":16,"BASE":17,"SPARQL_PREFIX":18,"SPARQL_BASE":19,"subject":20,"predicateObjectList":21,"blankNodePropertyList":22,"QpredicateObjectList_E_Opt":23,"verb":24,"objectList":25,"Q_O_QGT_SEMI_E_S_Qverb_E_S_QobjectList_E_Opt_C_E_Star":26,"O_Qverb_E_S_QobjectList_E_C":27,"Q_O_Qverb_E_S_QobjectList_E_C_E_Opt":28,"O_QGT_SEMI_E_S_Qverb_E_S_QobjectList_E_Opt_C":29,"GT_SEMI":30,"object":31,"Q_O_QGT_COMMA_E_S_Qobject_E_C_E_Star":32,"O_QGT_COMMA_E_S_Qobject_E_C":33,"GT_COMMA":34,"predicate":35,"RDF_TYPE":36,"iri":37,"BlankNode":38,"collection":39,"literal":40,"RDFLiteral":41,"NumericLiteral":42,"BooleanLiteral":43,"GT_LBRACKET":44,"GT_RBRACKET":45,"GT_LPAREN":46,"Qobject_E_Star":47,"GT_RPAREN":48,"collectionObject":49,"INTEGER":50,"DECIMAL":51,"DOUBLE":52,"String":53,"Q_O_QLANGTAG_E_Or_QGT_DTYPE_E_S_Qiri_E_C_E_Opt":54,"O_QLANGTAG_E_Or_QGT_DTYPE_E_S_Qiri_E_C":55,"LANGTAG":56,"GT_DTYPE":57,"IT_true":58,"IT_false":59,"STRING_LITERAL1":60,"STRING_LITERAL2":61,"STRING_LITERAL_LONG1":62,"STRING_LITERAL_LONG2":63,"PrefixedName":64,"PNAME_LN":65,"BLANK_NODE_LABEL":66,"ANON":67,"$accept":0,"$end":1};
        this.terminals_ = {2:"error",5:"EOF",9:"GT_DOT",14:"PREFIX",15:"PNAME_NS",16:"IRIREF",17:"BASE",18:"SPARQL_PREFIX",19:"SPARQL_BASE",30:"GT_SEMI",34:"GT_COMMA",36:"RDF_TYPE",44:"GT_LBRACKET",45:"GT_RBRACKET",46:"GT_LPAREN",48:"GT_RPAREN",50:"INTEGER",51:"DECIMAL",52:"DOUBLE",56:"LANGTAG",57:"GT_DTYPE",58:"IT_true",59:"IT_false",60:"STRING_LITERAL1",61:"STRING_LITERAL2",62:"STRING_LITERAL_LONG1",63:"STRING_LITERAL_LONG2",65:"PNAME_LN",66:"BLANK_NODE_LABEL",67:"ANON"};
        this.productions_ = [0,[3,2],[4,0],[4,2],[6,1],[6,2],[7,1],[7,1],[7,1],[7,1],[10,4],[11,3],[12,3],[13,2],[8,2],[8,2],[23,0],[23,1],[21,3],[27,2],[28,0],[28,1],[29,2],[26,0],[26,2],[25,2],[33,2],[32,0],[32,2],[24,1],[24,1],[20,1],[20,1],[20,1],[35,1],[31,1],[31,1],[31,1],[31,1],[31,1],[40,1],[40,1],[40,1],[22,3],[39,3],[47,0],[47,2],[49,1],[49,1],[49,1],[49,1],[49,1],[42,1],[42,1],[42,1],[41,2],[55,1],[55,2],[54,0],[54,1],[43,1],[43,1],[53,1],[53,1],[53,1],[53,1],[37,1],[37,1],[64,1],[64,1],[38,1],[38,1]];

        // shorten static method to just `o` for terse STATE_TABLE
        const $V0=[5,14,15,16,17,18,19,44,46,65,66,67],$V1=[1,37],$V2=[1,34],$V3=[1,32],$V4=[1,36],$V5=[15,16,36,65],$V6=[2,66],$V7=[2,67],$V8=[2,70],$V9=[2,71],$Va=[15,16,44,46,48,50,51,52,58,59,60,61,62,63,65,66,67],$Vb=[2,45],$Vc=[2,68],$Vd=[2,69],$Ve=[1,64],$Vf=[1,54],$Vg=[1,63],$Vh=[15,16,44,46,50,51,52,58,59,60,61,62,63,65,66,67],$Vi=[1,96],$Vj=[1,86],$Vk=[1,95],$Vl=[1,124],$Vm=[1,114],$Vn=[1,119],$Vo=[1,118],$Vp=[1,126],$Vq=[1,127],$Vr=[1,128],$Vs=[1,129],$Vt=[1,130],$Vu=[1,131],$Vv=[1,132],$Vw=[1,133],$Vx=[1,134],$Vy=[1,123],$Vz=[1,116],$VA=[1,117],$VB=[9,30],$VC=[2,23],$VD=[9,30,34],$VE=[2,27],$VF=[2,35],$VG=[2,36],$VH=[2,37],$VI=[2,38],$VJ=[2,39],$VK=[2,40],$VL=[2,41],$VM=[2,42],$VN=[2,58],$VO=[2,52],$VP=[2,53],$VQ=[2,54],$VR=[2,60],$VS=[2,61],$VT=[9,30,34,56,57],$VU=[2,62],$VV=[2,63],$VW=[2,64],$VX=[2,65],$VY=[2,43],$VZ=[30,45],$V_=[30,34,45],$V$=[30,34,45,56,57],$V01=[2,44],$V11=[15,16,44,46,48,50,51,52,56,57,58,59,60,61,62,63,65,66,67],$V21=[2,18],$V31=[2,25],$V41=[2,55],$V51=[2,59],$V61=[2,56],$V71=[2,24],$V81=[2,20],$V91=[2,28],$Va1=[1,194],$Vb1=[1,184],$Vc1=[1,193],$Vd1=[2,57],$Ve1=[1,224],$Vf1=[1,214],$Vg1=[1,223],$Vh1=[2,22],$Vi1=[2,21],$Vj1=[1,252],$Vk1=[1,242],$Vl1=[1,251],$Vm1=[2,26],$Vn1=[1,286],$Vo1=[1,276],$Vp1=[1,285],$Vq1=[2,19],$Vr1=[1,349],$Vs1=[1,339],$Vt1=[1,348],$Vu1=[1,376],$Vv1=[1,366],$Vw1=[1,375];
        const o = JisonParser.expandParseTable;
        this.table = [o($V0,[2,2],{3:1,4:2}),{1:[3]},{5:[1,3],6:4,7:5,8:6,10:7,11:8,12:9,13:10,14:[1,13],15:[1,27],16:[1,21],17:[1,14],18:[1,15],19:[1,16],20:11,22:12,37:17,38:18,39:19,44:[1,20],46:[1,25],64:22,65:[1,26],66:[1,23],67:[1,24]},{1:[2,1]},o($V0,[2,3]),o($V0,[2,4]),{9:[1,28]},o($V0,[2,6]),o($V0,[2,7]),o($V0,[2,8]),o($V0,[2,9]),{15:$V1,16:$V2,21:29,24:30,35:31,36:$V3,37:33,64:35,65:$V4},{9:[2,16],15:$V1,16:$V2,21:39,23:38,24:30,35:31,36:$V3,37:33,64:35,65:$V4},{15:[1,40]},{16:[1,41]},{15:[1,42]},{16:[1,43]},o($V5,[2,31]),o($V5,[2,32]),o($V5,[2,33]),{15:$V1,16:$V2,21:44,24:45,35:31,36:$V3,37:33,64:35,65:$V4},o($V5,$V6),o($V5,$V7),o($V5,$V8),o($V5,$V9),o($Va,$Vb,{47:46}),o($V5,$Vc),o($V5,$Vd),o($V0,[2,5]),{9:[2,14]},{15:$Ve,16:$Vf,22:52,25:47,31:48,37:49,38:50,39:51,40:53,41:60,42:61,43:62,44:[1,59],46:[1,58],50:[1,66],51:[1,67],52:[1,68],53:65,58:[1,69],59:[1,70],60:[1,71],61:[1,72],62:[1,73],63:[1,74],64:55,65:$Vg,66:[1,56],67:[1,57]},o($Vh,[2,29]),o($Vh,[2,30]),o($Vh,[2,34]),o($Vh,$V6),o($Vh,$V7),o($Vh,$Vc),o($Vh,$Vd),{9:[2,15]},{9:[2,17]},{16:[1,75]},{9:[1,76]},{16:[1,77]},o($V0,[2,13]),{45:[1,78]},{15:$Vi,16:$Vj,22:84,25:79,31:80,37:81,38:82,39:83,40:85,41:92,42:93,43:94,44:[1,91],46:[1,90],50:[1,98],51:[1,99],52:[1,100],53:97,58:[1,101],59:[1,102],60:[1,103],61:[1,104],62:[1,105],63:[1,106],64:87,65:$Vk,66:[1,88],67:[1,89]},{15:$Vl,16:$Vm,22:112,37:109,38:110,39:111,40:113,41:120,42:121,43:122,44:$Vn,46:$Vo,48:[1,107],49:108,50:$Vp,51:$Vq,52:$Vr,53:125,58:$Vs,59:$Vt,60:$Vu,61:$Vv,62:$Vw,63:$Vx,64:115,65:$Vy,66:$Vz,67:$VA},o($VB,$VC,{26:135}),o($VD,$VE,{32:136}),o($VD,$VF),o($VD,$VG),o($VD,$VH),o($VD,$VI),o($VD,$VJ),o($VD,$V6),o($VD,$V7),o($VD,$V8),o($VD,$V9),o($Va,$Vb,{47:137}),{15:$V1,16:$V2,21:138,24:45,35:31,36:$V3,37:33,64:35,65:$V4},o($VD,$VK),o($VD,$VL),o($VD,$VM),o($VD,$Vc),o($VD,$Vd),o($VD,$VN,{54:139,55:140,56:[1,141],57:[1,142]}),o($VD,$VO),o($VD,$VP),o($VD,$VQ),o($VD,$VR),o($VD,$VS),o($VT,$VU),o($VT,$VV),o($VT,$VW),o($VT,$VX),{9:[1,143]},o($V0,[2,11]),o($V0,[2,12]),o([9,15,16,36,65],$VY),o($VZ,$VC,{26:144}),o($V_,$VE,{32:145}),o($V_,$VF),o($V_,$VG),o($V_,$VH),o($V_,$VI),o($V_,$VJ),o($V_,$V6),o($V_,$V7),o($V_,$V8),o($V_,$V9),o($Va,$Vb,{47:146}),{15:$V1,16:$V2,21:147,24:45,35:31,36:$V3,37:33,64:35,65:$V4},o($V_,$VK),o($V_,$VL),o($V_,$VM),o($V_,$Vc),o($V_,$Vd),o($V_,$VN,{54:148,55:149,56:[1,150],57:[1,151]}),o($V_,$VO),o($V_,$VP),o($V_,$VQ),o($V_,$VR),o($V_,$VS),o($V$,$VU),o($V$,$VV),o($V$,$VW),o($V$,$VX),o($V5,$V01),o($Va,[2,46]),o($Va,[2,47]),o($Va,[2,48]),o($Va,[2,49]),o($Va,[2,50]),o($Va,[2,51]),o($Va,$V6),o($Va,$V7),o($Va,$V8),o($Va,$V9),o($Va,$Vb,{47:152}),{15:$V1,16:$V2,21:153,24:45,35:31,36:$V3,37:33,64:35,65:$V4},o($Va,$VK),o($Va,$VL),o($Va,$VM),o($Va,$Vc),o($Va,$Vd),o($Va,$VN,{54:154,55:155,56:[1,156],57:[1,157]}),o($Va,$VO),o($Va,$VP),o($Va,$VQ),o($Va,$VR),o($Va,$VS),o($V11,$VU),o($V11,$VV),o($V11,$VW),o($V11,$VX),{9:$V21,29:158,30:[1,159]},o($VB,$V31,{33:160,34:[1,161]}),{15:$Vl,16:$Vm,22:112,37:109,38:110,39:111,40:113,41:120,42:121,43:122,44:$Vn,46:$Vo,48:[1,162],49:108,50:$Vp,51:$Vq,52:$Vr,53:125,58:$Vs,59:$Vt,60:$Vu,61:$Vv,62:$Vw,63:$Vx,64:115,65:$Vy,66:$Vz,67:$VA},{45:[1,163]},o($VD,$V41),o($VD,$V51),o($VD,$V61),{15:$Ve,16:$Vf,37:164,64:55,65:$Vg},o($V0,[2,10]),{29:165,30:[1,166],45:$V21},o($VZ,$V31,{33:167,34:[1,168]}),{15:$Vl,16:$Vm,22:112,37:109,38:110,39:111,40:113,41:120,42:121,43:122,44:$Vn,46:$Vo,48:[1,169],49:108,50:$Vp,51:$Vq,52:$Vr,53:125,58:$Vs,59:$Vt,60:$Vu,61:$Vv,62:$Vw,63:$Vx,64:115,65:$Vy,66:$Vz,67:$VA},{45:[1,170]},o($V_,$V41),o($V_,$V51),o($V_,$V61),{15:$Vi,16:$Vj,37:171,64:87,65:$Vk},{15:$Vl,16:$Vm,22:112,37:109,38:110,39:111,40:113,41:120,42:121,43:122,44:$Vn,46:$Vo,48:[1,172],49:108,50:$Vp,51:$Vq,52:$Vr,53:125,58:$Vs,59:$Vt,60:$Vu,61:$Vv,62:$Vw,63:$Vx,64:115,65:$Vy,66:$Vz,67:$VA},{45:[1,173]},o($Va,$V41),o($Va,$V51),o($Va,$V61),{15:$Vl,16:$Vm,37:174,64:115,65:$Vy},o($VB,$V71),o($VB,$V81,{35:31,37:33,64:35,28:175,27:176,24:177,15:$V1,16:$V2,36:$V3,65:$V4}),o($VD,$V91),{15:$Va1,16:$Vb1,22:182,31:178,37:179,38:180,39:181,40:183,41:190,42:191,43:192,44:[1,189],46:[1,188],50:[1,196],51:[1,197],52:[1,198],53:195,58:[1,199],59:[1,200],60:[1,201],61:[1,202],62:[1,203],63:[1,204],64:185,65:$Vc1,66:[1,186],67:[1,187]},o($VD,$V01),o($VD,$VY),o($VD,$Vd1),o($VZ,$V71),o($VZ,$V81,{35:31,37:33,64:35,28:205,27:206,24:207,15:$V1,16:$V2,36:$V3,65:$V4}),o($V_,$V91),{15:$Ve1,16:$Vf1,22:212,31:208,37:209,38:210,39:211,40:213,41:220,42:221,43:222,44:[1,219],46:[1,218],50:[1,226],51:[1,227],52:[1,228],53:225,58:[1,229],59:[1,230],60:[1,231],61:[1,232],62:[1,233],63:[1,234],64:215,65:$Vg1,66:[1,216],67:[1,217]},o($V_,$V01),o($V_,$VY),o($V_,$Vd1),o($Va,$V01),o($Va,$VY),o($Va,$Vd1),o($VB,$Vh1),o($VB,$Vi1),{15:$Vj1,16:$Vk1,22:240,25:235,31:236,37:237,38:238,39:239,40:241,41:248,42:249,43:250,44:[1,247],46:[1,246],50:[1,254],51:[1,255],52:[1,256],53:253,58:[1,257],59:[1,258],60:[1,259],61:[1,260],62:[1,261],63:[1,262],64:243,65:$Vl1,66:[1,244],67:[1,245]},o($VD,$Vm1),o($VD,$VF),o($VD,$VG),o($VD,$VH),o($VD,$VI),o($VD,$VJ),o($VD,$V6),o($VD,$V7),o($VD,$V8),o($VD,$V9),o($Va,$Vb,{47:263}),{15:$V1,16:$V2,21:264,24:45,35:31,36:$V3,37:33,64:35,65:$V4},o($VD,$VK),o($VD,$VL),o($VD,$VM),o($VD,$Vc),o($VD,$Vd),o($VD,$VN,{54:265,55:266,56:[1,267],57:[1,268]}),o($VD,$VO),o($VD,$VP),o($VD,$VQ),o($VD,$VR),o($VD,$VS),o($VT,$VU),o($VT,$VV),o($VT,$VW),o($VT,$VX),o($VZ,$Vh1),o($VZ,$Vi1),{15:$Vn1,16:$Vo1,22:274,25:269,31:270,37:271,38:272,39:273,40:275,41:282,42:283,43:284,44:[1,281],46:[1,280],50:[1,288],51:[1,289],52:[1,290],53:287,58:[1,291],59:[1,292],60:[1,293],61:[1,294],62:[1,295],63:[1,296],64:277,65:$Vp1,66:[1,278],67:[1,279]},o($V_,$Vm1),o($V_,$VF),o($V_,$VG),o($V_,$VH),o($V_,$VI),o($V_,$VJ),o($V_,$V6),o($V_,$V7),o($V_,$V8),o($V_,$V9),o($Va,$Vb,{47:297}),{15:$V1,16:$V2,21:298,24:45,35:31,36:$V3,37:33,64:35,65:$V4},o($V_,$VK),o($V_,$VL),o($V_,$VM),o($V_,$Vc),o($V_,$Vd),o($V_,$VN,{54:299,55:300,56:[1,301],57:[1,302]}),o($V_,$VO),o($V_,$VP),o($V_,$VQ),o($V_,$VR),o($V_,$VS),o($V$,$VU),o($V$,$VV),o($V$,$VW),o($V$,$VX),o($VB,$Vq1),o($VD,$VE,{32:303}),o($VD,$VF),o($VD,$VG),o($VD,$VH),o($VD,$VI),o($VD,$VJ),o($VD,$V6),o($VD,$V7),o($VD,$V8),o($VD,$V9),o($Va,$Vb,{47:304}),{15:$V1,16:$V2,21:305,24:45,35:31,36:$V3,37:33,64:35,65:$V4},o($VD,$VK),o($VD,$VL),o($VD,$VM),o($VD,$Vc),o($VD,$Vd),o($VD,$VN,{54:306,55:307,56:[1,308],57:[1,309]}),o($VD,$VO),o($VD,$VP),o($VD,$VQ),o($VD,$VR),o($VD,$VS),o($VT,$VU),o($VT,$VV),o($VT,$VW),o($VT,$VX),{15:$Vl,16:$Vm,22:112,37:109,38:110,39:111,40:113,41:120,42:121,43:122,44:$Vn,46:$Vo,48:[1,310],49:108,50:$Vp,51:$Vq,52:$Vr,53:125,58:$Vs,59:$Vt,60:$Vu,61:$Vv,62:$Vw,63:$Vx,64:115,65:$Vy,66:$Vz,67:$VA},{45:[1,311]},o($VD,$V41),o($VD,$V51),o($VD,$V61),{15:$Va1,16:$Vb1,37:312,64:185,65:$Vc1},o($VZ,$Vq1),o($V_,$VE,{32:313}),o($V_,$VF),o($V_,$VG),o($V_,$VH),o($V_,$VI),o($V_,$VJ),o($V_,$V6),o($V_,$V7),o($V_,$V8),o($V_,$V9),o($Va,$Vb,{47:314}),{15:$V1,16:$V2,21:315,24:45,35:31,36:$V3,37:33,64:35,65:$V4},o($V_,$VK),o($V_,$VL),o($V_,$VM),o($V_,$Vc),o($V_,$Vd),o($V_,$VN,{54:316,55:317,56:[1,318],57:[1,319]}),o($V_,$VO),o($V_,$VP),o($V_,$VQ),o($V_,$VR),o($V_,$VS),o($V$,$VU),o($V$,$VV),o($V$,$VW),o($V$,$VX),{15:$Vl,16:$Vm,22:112,37:109,38:110,39:111,40:113,41:120,42:121,43:122,44:$Vn,46:$Vo,48:[1,320],49:108,50:$Vp,51:$Vq,52:$Vr,53:125,58:$Vs,59:$Vt,60:$Vu,61:$Vv,62:$Vw,63:$Vx,64:115,65:$Vy,66:$Vz,67:$VA},{45:[1,321]},o($V_,$V41),o($V_,$V51),o($V_,$V61),{15:$Ve1,16:$Vf1,37:322,64:215,65:$Vg1},o($VB,$V31,{33:323,34:[1,324]}),{15:$Vl,16:$Vm,22:112,37:109,38:110,39:111,40:113,41:120,42:121,43:122,44:$Vn,46:$Vo,48:[1,325],49:108,50:$Vp,51:$Vq,52:$Vr,53:125,58:$Vs,59:$Vt,60:$Vu,61:$Vv,62:$Vw,63:$Vx,64:115,65:$Vy,66:$Vz,67:$VA},{45:[1,326]},o($VD,$V41),o($VD,$V51),o($VD,$V61),{15:$Vj1,16:$Vk1,37:327,64:243,65:$Vl1},o($VD,$V01),o($VD,$VY),o($VD,$Vd1),o($VZ,$V31,{33:328,34:[1,329]}),{15:$Vl,16:$Vm,22:112,37:109,38:110,39:111,40:113,41:120,42:121,43:122,44:$Vn,46:$Vo,48:[1,330],49:108,50:$Vp,51:$Vq,52:$Vr,53:125,58:$Vs,59:$Vt,60:$Vu,61:$Vv,62:$Vw,63:$Vx,64:115,65:$Vy,66:$Vz,67:$VA},{45:[1,331]},o($V_,$V41),o($V_,$V51),o($V_,$V61),{15:$Vn1,16:$Vo1,37:332,64:277,65:$Vp1},o($V_,$V01),o($V_,$VY),o($V_,$Vd1),o($VD,$V91),{15:$Vr1,16:$Vs1,22:337,31:333,37:334,38:335,39:336,40:338,41:345,42:346,43:347,44:[1,344],46:[1,343],50:[1,351],51:[1,352],52:[1,353],53:350,58:[1,354],59:[1,355],60:[1,356],61:[1,357],62:[1,358],63:[1,359],64:340,65:$Vt1,66:[1,341],67:[1,342]},o($VD,$V01),o($VD,$VY),o($VD,$Vd1),o($V_,$V91),{15:$Vu1,16:$Vv1,22:364,31:360,37:361,38:362,39:363,40:365,41:372,42:373,43:374,44:[1,371],46:[1,370],50:[1,378],51:[1,379],52:[1,380],53:377,58:[1,381],59:[1,382],60:[1,383],61:[1,384],62:[1,385],63:[1,386],64:367,65:$Vw1,66:[1,368],67:[1,369]},o($V_,$V01),o($V_,$VY),o($V_,$Vd1),o($VD,$Vm1),o($VD,$VF),o($VD,$VG),o($VD,$VH),o($VD,$VI),o($VD,$VJ),o($VD,$V6),o($VD,$V7),o($VD,$V8),o($VD,$V9),o($Va,$Vb,{47:387}),{15:$V1,16:$V2,21:388,24:45,35:31,36:$V3,37:33,64:35,65:$V4},o($VD,$VK),o($VD,$VL),o($VD,$VM),o($VD,$Vc),o($VD,$Vd),o($VD,$VN,{54:389,55:390,56:[1,391],57:[1,392]}),o($VD,$VO),o($VD,$VP),o($VD,$VQ),o($VD,$VR),o($VD,$VS),o($VT,$VU),o($VT,$VV),o($VT,$VW),o($VT,$VX),o($V_,$Vm1),o($V_,$VF),o($V_,$VG),o($V_,$VH),o($V_,$VI),o($V_,$VJ),o($V_,$V6),o($V_,$V7),o($V_,$V8),o($V_,$V9),o($Va,$Vb,{47:393}),{15:$V1,16:$V2,21:394,24:45,35:31,36:$V3,37:33,64:35,65:$V4},o($V_,$VK),o($V_,$VL),o($V_,$VM),o($V_,$Vc),o($V_,$Vd),o($V_,$VN,{54:395,55:396,56:[1,397],57:[1,398]}),o($V_,$VO),o($V_,$VP),o($V_,$VQ),o($V_,$VR),o($V_,$VS),o($V$,$VU),o($V$,$VV),o($V$,$VW),o($V$,$VX),{15:$Vl,16:$Vm,22:112,37:109,38:110,39:111,40:113,41:120,42:121,43:122,44:$Vn,46:$Vo,48:[1,399],49:108,50:$Vp,51:$Vq,52:$Vr,53:125,58:$Vs,59:$Vt,60:$Vu,61:$Vv,62:$Vw,63:$Vx,64:115,65:$Vy,66:$Vz,67:$VA},{45:[1,400]},o($VD,$V41),o($VD,$V51),o($VD,$V61),{15:$Vr1,16:$Vs1,37:401,64:340,65:$Vt1},{15:$Vl,16:$Vm,22:112,37:109,38:110,39:111,40:113,41:120,42:121,43:122,44:$Vn,46:$Vo,48:[1,402],49:108,50:$Vp,51:$Vq,52:$Vr,53:125,58:$Vs,59:$Vt,60:$Vu,61:$Vv,62:$Vw,63:$Vx,64:115,65:$Vy,66:$Vz,67:$VA},{45:[1,403]},o($V_,$V41),o($V_,$V51),o($V_,$V61),{15:$Vu1,16:$Vv1,37:404,64:367,65:$Vw1},o($VD,$V01),o($VD,$VY),o($VD,$Vd1),o($V_,$V01),o($V_,$VY),o($V_,$Vd1)];
        this.defaultActions = {3:[2,1],29:[2,14],38:[2,15],39:[2,17]};
    }
    performAction (yytext, yyleng, yylineno, yy, yystate /* action[1] */, $$ /* vstack */, _$ /* lstack */) {
/* this == yyval */
          const $0 = $$.length - 1;
        switch (yystate) {
case 1:

        return $$[$0-1];
      
break;
case 2: case 4: case 16: case 20: case 23: case 27: case 45:
this.$ = [];
break;
case 3:
this.$ = $$[$0-1].concat($$[$0]);
break;
case 10:

        yy._prefixes[$$[$0-2].slice(0, -1)] = $$[$0-1];
      
break;
case 11:

        yy._setBase(yy._base === null ||
                    absoluteIRI.test($$[$0-1].slice(1, -1)) ? $$[$0-1].slice(1, -1) : yy._resolveIRI($$[$0-1].slice(1, -1)));
      
break;
case 12:

        yy._prefixes[$$[$0-1].slice(0, -1)] = $$[$0];
      
break;
case 13:

        yy._setBase(yy._base === null ||
                    absoluteIRI.test($$[$0].slice(1, -1)) ? $$[$0].slice(1, -1) : yy._resolveIRI($$[$0].slice(1, -1)));
      
break;
case 14:
this.$ = yy.finishSubject($$[$0-1].concat($$[$0])) // <<(1 2) a (3 4)>> has n triples;
break;
case 15:
this.$ = yy.finishSubject($$[$0-1].concat($$[$0])) // blankNodePropertyList _QpredicateObjectList_E_Opt;
break;
case 18:
this.$ = $$[$0-1].concat($$[$0]) // verb objectList _Q_O_QGT_SEMI_E_S_Qverb_E_S_QobjectList_E_Opt_C_E_Star;
break;
case 19: case 22: case 26:
this.$ = $$[$0];
break;
case 24:
this.$ = $$[$0-1].concat($$[$0]) // Q_O_QGT_SEMI_E_S_Qverb_E_S_QobjectList_E_Opt_C_E_Star _O_QGT_SEMI_E_S_Qverb_E_S_QobjectList_E_Opt_C;
break;
case 25:
this.$ = yy.finishObjectList($$[$0-1].concat($$[$0])) // object _Q_O_QGT_COMMA_E_S_Qobject_E_C_E_Star;
break;
case 28:
this.$ = $$[$0-1].concat($$[$0]) // Q_O_QGT_COMMA_E_S_Qobject_E_C_E_Star _O_QGT_COMMA_E_S_Qobject_E_C;
break;
case 29:
this.$ = yy.setPredicate($$[$0]);
break;
case 30:
this.$ = yy.setPredicate(RDF_TYPE) // left is a token, right a const;
break;
case 31: case 32:
this.$ = yy.setSubject($$[$0]);
break;
case 33:
this.$ = yy.collectionSubject($$[$0]);
break;
case 35: case 36: case 39:
this.$ = [yy.triple($$[$0])];
break;
case 37:
this.$ = [yy.triple($$[$0][0].subject)].concat($$[$0]) // collection;
break;
case 38:
this.$ = [yy.triple($$[$0])].concat($$[$0]) // blankNodePropertyList;
break;
case 43: case 44:
this.$ = $$[$0-1];
break;
case 46:
this.$ = $$[$0-1].concat($$[$0]) // Qobject_E_Star object;
break;
case 47: case 48: case 51:
this.$ = {node: $$[$0], nested: []};
break;
case 49:
this.$ = {node: $$[$0][0].subject, nested: $$[$0]} // collection;
break;
case 50:
this.$ = {node: $$[$0][0].subject, nested: $$[$0]} // blankNodePropertyList;
break;
case 52:
this.$ = yy.createLiteral($$[$0], XSD_INTEGER);
break;
case 53:
this.$ = yy.createLiteral($$[$0], XSD_DECIMAL);
break;
case 54:
this.$ = yy.createLiteral($$[$0], XSD_DOUBLE);
break;
case 55:
this.$ = yy.createLiteral($$[$0-1], $$[$0]);
break;
case 58:
this.$ = null;
break;
case 60: case 61:
this.$ = yy.createLiteral($$[$0], XSD_BOOLEAN);
break;
case 62: case 63:
this.$ = unescapeString($$[$0], 1);
break;
case 64: case 65:
this.$ = unescapeString($$[$0], 3);
break;
case 66:

        const unesc = unescapeText($$[$0].slice(1,-1), {});
        this.$ = yy._base === null || absoluteIRI.test(unesc) ? unesc : yy._resolveIRI(unesc)
      
break;
case 68:

        const namePos1 = $$[$0].indexOf(':');
        this.$ = yy.expandPrefix($$[$0].substr(0, namePos1), yy) + unescapeText($$[$0].substr(namePos1 + 1), pnameEscapeReplacements);
      
break;
case 69:

        this.$ = yy.expandPrefix($$[$0].substr(0, $$[$0].length - 1), yy);
      
break;
case 70:
this.$ = yy.createBlankNode($$[$0]);
break;
case 71:
this.$ = yy.createBlankNode();
break;
        }
    }
}

// Export module
Object.defineProperty(exports, "__esModule", { value: true });
exports.TurtleJisonParser = TurtleJisonParser;


/* generated by @ts-jison/lexer-generator 0.4.1-alpha.2 */
const { JisonLexer } = require('@ts-jison/lexer');

class TurtleJisonLexer extends JisonLexer {
    constructor (yy = {}) {
        super(yy);
        this.options = {"moduleName":"TurtleJison"};
        this.rules = [
        /^(?:\s+|#[^\u000a\u000d]*|\/\*(?:[^*]|\*(?:[^/]|\\\/))*\*\/)/,
        /^(?:\.)/,
        /^(?:;)/,
        /^(?:,)/,
        /^(?:\[)/,
        /^(?:\])/,
        /^(?:\()/,
        /^(?:\))/,
        /^(?:\^\^)/,
        /^(?:true\b)/,
        /^(?:false\b)/,
        /^(?:[Pp][Rr][Ee][Ff][Ii][Xx])/,
        /^(?:[Bb][Aa][Ss][Ee])/,
        /^(?:@base\b)/,
        /^(?:@prefix\b)/,
        /^(?:<(?:[^\u0000-\u0020<>\"{}|^`\\]|\\u(?:[0-9]|[A-F]|[a-f])(?:[0-9]|[A-F]|[a-f])(?:[0-9]|[A-F]|[a-f])(?:[0-9]|[A-F]|[a-f])|\\U(?:[0-9]|[A-F]|[a-f])(?:[0-9]|[A-F]|[a-f])(?:[0-9]|[A-F]|[a-f])(?:[0-9]|[A-F]|[a-f])(?:[0-9]|[A-F]|[a-f])(?:[0-9]|[A-F]|[a-f])(?:[0-9]|[A-F]|[a-f])(?:[0-9]|[A-F]|[a-f]))*>)/,
        /^(?:(?:(?:[A-Z]|[a-z]|[\u00c0-\u00d6]|[\u00d8-\u00f6]|[\u00f8-\u02ff]|[\u0370-\u037d]|[\u037f-\u1fff]|[\u200c-\u200d]|[\u2070-\u218f]|[\u2c00-\u2fef]|[\u3001-\ud7ff]|[\uf900-\ufdcf]|[\ufdf0-\ufffd]|[\uD800-\uDB7F][\uDC00-\uDFFF])(?:(?:[A-Z]|[a-z]|[\u00c0-\u00d6]|[\u00d8-\u00f6]|[\u00f8-\u02ff]|[\u0370-\u037d]|[\u037f-\u1fff]|[\u200c-\u200d]|[\u2070-\u218f]|[\u2c00-\u2fef]|[\u3001-\ud7ff]|[\uf900-\ufdcf]|[\ufdf0-\ufffd]|[\uD800-\uDB7F][\uDC00-\uDFFF]|_|_|-|[0-9]|[\u00b7]|[\u0300-\u036f]|[\u203f-\u2040]|\.)*(?:[A-Z]|[a-z]|[\u00c0-\u00d6]|[\u00d8-\u00f6]|[\u00f8-\u02ff]|[\u0370-\u037d]|[\u037f-\u1fff]|[\u200c-\u200d]|[\u2070-\u218f]|[\u2c00-\u2fef]|[\u3001-\ud7ff]|[\uf900-\ufdcf]|[\ufdf0-\ufffd]|[\uD800-\uDB7F][\uDC00-\uDFFF]|_|_|-|[0-9]|[\u00b7]|[\u0300-\u036f]|[\u203f-\u2040]))?)?:(?:[A-Z]|[a-z]|[\u00c0-\u00d6]|[\u00d8-\u00f6]|[\u00f8-\u02ff]|[\u0370-\u037d]|[\u037f-\u1fff]|[\u200c-\u200d]|[\u2070-\u218f]|[\u2c00-\u2fef]|[\u3001-\ud7ff]|[\uf900-\ufdcf]|[\ufdf0-\ufffd]|[\uD800-\uDB7F][\uDC00-\uDFFF]|_|_|:|[0-9]|%(?:[0-9]|[A-F]|[a-f])(?:[0-9]|[A-F]|[a-f])|\\(?:_|~|\.|-|!|\$|&|'|\(|\)|\*|\+|,|;|=|\/|\?|#|@|%))(?:[A-Z]|[a-z]|[\u00c0-\u00d6]|[\u00d8-\u00f6]|[\u00f8-\u02ff]|[\u0370-\u037d]|[\u037f-\u1fff]|[\u200c-\u200d]|[\u2070-\u218f]|[\u2c00-\u2fef]|[\u3001-\ud7ff]|[\uf900-\ufdcf]|[\ufdf0-\ufffd]|[\uD800-\uDB7F][\uDC00-\uDFFF]|_|_|-|[0-9]|[\u00b7]|[\u0300-\u036f]|[\u203f-\u2040]|\.|:|%(?:[0-9]|[A-F]|[a-f])(?:[0-9]|[A-F]|[a-f])|\\(?:_|~|\.|-|!|\$|&|'|\(|\)|\*|\+|,|;|=|\/|\?|#|@|%))*)/,
        /^(?:(?:(?:[A-Z]|[a-z]|[\u00c0-\u00d6]|[\u00d8-\u00f6]|[\u00f8-\u02ff]|[\u0370-\u037d]|[\u037f-\u1fff]|[\u200c-\u200d]|[\u2070-\u218f]|[\u2c00-\u2fef]|[\u3001-\ud7ff]|[\uf900-\ufdcf]|[\ufdf0-\ufffd]|[\uD800-\uDB7F][\uDC00-\uDFFF])(?:(?:[A-Z]|[a-z]|[\u00c0-\u00d6]|[\u00d8-\u00f6]|[\u00f8-\u02ff]|[\u0370-\u037d]|[\u037f-\u1fff]|[\u200c-\u200d]|[\u2070-\u218f]|[\u2c00-\u2fef]|[\u3001-\ud7ff]|[\uf900-\ufdcf]|[\ufdf0-\ufffd]|[\uD800-\uDB7F][\uDC00-\uDFFF]|_|_|-|[0-9]|[\u00b7]|[\u0300-\u036f]|[\u203f-\u2040]|\.)*(?:[A-Z]|[a-z]|[\u00c0-\u00d6]|[\u00d8-\u00f6]|[\u00f8-\u02ff]|[\u0370-\u037d]|[\u037f-\u1fff]|[\u200c-\u200d]|[\u2070-\u218f]|[\u2c00-\u2fef]|[\u3001-\ud7ff]|[\uf900-\ufdcf]|[\ufdf0-\ufffd]|[\uD800-\uDB7F][\uDC00-\uDFFF]|_|_|-|[0-9]|[\u00b7]|[\u0300-\u036f]|[\u203f-\u2040]))?)?:)/,
        /^(?:_:(?:[A-Z]|[a-z]|[\u00c0-\u00d6]|[\u00d8-\u00f6]|[\u00f8-\u02ff]|[\u0370-\u037d]|[\u037f-\u1fff]|[\u200c-\u200d]|[\u2070-\u218f]|[\u2c00-\u2fef]|[\u3001-\ud7ff]|[\uf900-\ufdcf]|[\ufdf0-\ufffd]|[\uD800-\uDB7F][\uDC00-\uDFFF]|_|_|[0-9])(?:(?:[A-Z]|[a-z]|[\u00c0-\u00d6]|[\u00d8-\u00f6]|[\u00f8-\u02ff]|[\u0370-\u037d]|[\u037f-\u1fff]|[\u200c-\u200d]|[\u2070-\u218f]|[\u2c00-\u2fef]|[\u3001-\ud7ff]|[\uf900-\ufdcf]|[\ufdf0-\ufffd]|[\uD800-\uDB7F][\uDC00-\uDFFF]|_|_|-|[0-9]|[\u00b7]|[\u0300-\u036f]|[\u203f-\u2040]|\.)*(?:[A-Z]|[a-z]|[\u00c0-\u00d6]|[\u00d8-\u00f6]|[\u00f8-\u02ff]|[\u0370-\u037d]|[\u037f-\u1fff]|[\u200c-\u200d]|[\u2070-\u218f]|[\u2c00-\u2fef]|[\u3001-\ud7ff]|[\uf900-\ufdcf]|[\ufdf0-\ufffd]|[\uD800-\uDB7F][\uDC00-\uDFFF]|_|_|-|[0-9]|[\u00b7]|[\u0300-\u036f]|[\u203f-\u2040]))?)/,
        /^(?:@[A-Za-z]+(?:-[0-9A-Za-z]+)*)/,
        /^(?:[+-]?[0-9]+)/,
        /^(?:[+-]?[0-9]*\.[0-9]+)/,
        /^(?:[+-]?(?:[0-9]+\.[0-9]*[Ee][+-]?[0-9]+|\.?[0-9]+[Ee][+-]?[0-9]+))/,
        /^(?:'(?:[^\u0027\u005c\u000a\u000d]|\\[\"\'\\bfnrt]|\\u(?:[0-9]|[A-F]|[a-f])(?:[0-9]|[A-F]|[a-f])(?:[0-9]|[A-F]|[a-f])(?:[0-9]|[A-F]|[a-f])|\\U(?:[0-9]|[A-F]|[a-f])(?:[0-9]|[A-F]|[a-f])(?:[0-9]|[A-F]|[a-f])(?:[0-9]|[A-F]|[a-f])(?:[0-9]|[A-F]|[a-f])(?:[0-9]|[A-F]|[a-f])(?:[0-9]|[A-F]|[a-f])(?:[0-9]|[A-F]|[a-f]))*')/,
        /^(?:"(?:[^\u0022\u005c\u000a\u000d]|\\[\"\'\\bfnrt]|\\u(?:[0-9]|[A-F]|[a-f])(?:[0-9]|[A-F]|[a-f])(?:[0-9]|[A-F]|[a-f])(?:[0-9]|[A-F]|[a-f])|\\U(?:[0-9]|[A-F]|[a-f])(?:[0-9]|[A-F]|[a-f])(?:[0-9]|[A-F]|[a-f])(?:[0-9]|[A-F]|[a-f])(?:[0-9]|[A-F]|[a-f])(?:[0-9]|[A-F]|[a-f])(?:[0-9]|[A-F]|[a-f])(?:[0-9]|[A-F]|[a-f]))*")/,
        /^(?:'''(?:(?:'|'')?(?:[^\'\\]|\\[\"\'\\bfnrt]|\\u(?:[0-9]|[A-F]|[a-f])(?:[0-9]|[A-F]|[a-f])(?:[0-9]|[A-F]|[a-f])(?:[0-9]|[A-F]|[a-f])|\\U(?:[0-9]|[A-F]|[a-f])(?:[0-9]|[A-F]|[a-f])(?:[0-9]|[A-F]|[a-f])(?:[0-9]|[A-F]|[a-f])(?:[0-9]|[A-F]|[a-f])(?:[0-9]|[A-F]|[a-f])(?:[0-9]|[A-F]|[a-f])(?:[0-9]|[A-F]|[a-f])))*''')/,
        /^(?:"""(?:(?:"|"")?(?:[^\"\\]|\\[\"\'\\bfnrt]|\\u(?:[0-9]|[A-F]|[a-f])(?:[0-9]|[A-F]|[a-f])(?:[0-9]|[A-F]|[a-f])(?:[0-9]|[A-F]|[a-f])|\\U(?:[0-9]|[A-F]|[a-f])(?:[0-9]|[A-F]|[a-f])(?:[0-9]|[A-F]|[a-f])(?:[0-9]|[A-F]|[a-f])(?:[0-9]|[A-F]|[a-f])(?:[0-9]|[A-F]|[a-f])(?:[0-9]|[A-F]|[a-f])(?:[0-9]|[A-F]|[a-f])))*""")/,
        /^(?:\\\[(?: |\\t|\\r|\\n)*\\\])/,
        /^(?:a\b)/,
        /^(?:$)/,
        /^(?:[a-zA-Z0-9_-]+)/,
        /^(?:.)/
    ];
        this.conditions = {"INITIAL":{"rules":[0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31],"inclusive":true}};
    }
    performAction (yy, yy_, $avoiding_name_collisions, YY_START) {
              let YYSTATE = YY_START;
            switch ($avoiding_name_collisions) {
    case 0:
  // space eaten by whitespace and comments
  if (yy.skipped.last_line === yy_.yylloc.first_line &&
      yy.skipped.last_column === yy_.yylloc.first_column) {
    // immediately follows a skipped span
    yy.skipped.last_line = yy_.yylloc.last_line;
    yy.skipped.last_column = yy_.yylloc.last_column;
  } else {
    // follows something else
    yy.skipped = yy_.yylloc
  };

      break;
    case 1:return 9;
    case 2:return 30;
    case 3:return 34;
    case 4:return 44;
    case 5:return 45;
    case 6:return 46;
    case 7:return 48;
    case 8:return 57;
    case 9:return 58;
    case 10:return 59;
    case 11:return 18;
    case 12:return 19;
    case 13:return 17;
    case 14:return 14;
    case 15:return 16;
    case 16:return 65;
    case 17:return 15;
    case 18:return 66;
    case 19:return 56;
    case 20:return 50;
    case 21:return 51;
    case 22:return 52;
    case 23:return 60;
    case 24:return 61;
    case 25:return 62;
    case 26:return 63;
    case 27:return 67;
    case 28:return 36;
    case 29:return 5;
    case 30:return 'unexpected word "'+yy_.yytext+'"';
    case 31:return 'invalid character '+yy_.yytext;
        }
    }
}


// Export module
Object.defineProperty(exports, "__esModule", { value: true });
exports.TurtleJisonLexer = TurtleJisonLexer;


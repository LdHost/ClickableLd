const { JisonParser, o } = require('@ts-jison/parser');
/**
 * parser generated by  @ts-jison/parser-generator 0.4.1-alpha.2
 * @returns Parser implementing JisonParserApi and a Lexer implementing JisonLexerApi.
 */

  /*
    ShEx parser in the Jison parser generator format.
  */

  const RDF = 'http://www.w3.org/1999/02/22-rdf-syntax-ns#',
      RDF_TYPE  = RDF + 'type',
      RDF_FIRST = RDF + 'first',
      RDF_REST  = RDF + 'rest',
      RDF_NIL   = RDF + 'nil',
      XSD = 'http://www.w3.org/2001/XMLSchema#',
      XSD_INTEGER  = XSD + 'integer',
      XSD_DECIMAL  = XSD + 'decimal',
      XSD_FLOAT   = XSD + 'float',
      XSD_DOUBLE   = XSD + 'double',
      XSD_BOOLEAN  = XSD + 'boolean',
      XSD_TRUE =  '"true"^^'  + XSD_BOOLEAN,
      XSD_FALSE = '"false"^^' + XSD_BOOLEAN,
      XSD_PATTERN        = XSD + 'pattern',
      XSD_MININCLUSIVE   = XSD + 'minInclusive',
      XSD_MINEXCLUSIVE   = XSD + 'minExclusive',
      XSD_MAXINCLUSIVE   = XSD + 'maxInclusive',
      XSD_MAXEXCLUSIVE   = XSD + 'maxExclusive',
      XSD_LENGTH         = XSD + 'length',
      XSD_MINLENGTH      = XSD + 'minLength',
      XSD_MAXLENGTH      = XSD + 'maxLength',
      XSD_TOTALDIGITS    = XSD + 'totalDigits',
      XSD_FRACTIONDIGITS = XSD + 'fractionDigits';

  const numericDatatypes = [
      XSD + "integer",
      XSD + "decimal",
      XSD + "float",
      XSD + "double",
      XSD + "string",
      XSD + "boolean",
      XSD + "dateTime",
      XSD + "nonPositiveInteger",
      XSD + "negativeInteger",
      XSD + "long",
      XSD + "int",
      XSD + "short",
      XSD + "byte",
      XSD + "nonNegativeInteger",
      XSD + "unsignedLong",
      XSD + "unsignedInt",
      XSD + "unsignedShort",
      XSD + "unsignedByte",
      XSD + "positiveInteger"
  ];

  const absoluteIRI = /^[a-z][a-z0-9+.-]*:/i;


  // Creates a literal with the given value and type
  function createLiteral(value, type) {
    return { value: value, type: type };
  }

  // Regular expression and replacement strings to escape strings
  const stringEscapeReplacements = { '\\': '\\', "'": "'", '"': '"',
                                   't': '\t', 'b': '\b', 'n': '\n', 'r': '\r', 'f': '\f' },
      semactEscapeReplacements = { '\\': '\\', '%': '%' },
      pnameEscapeReplacements = {
        '\\': '\\', "'": "'", '"': '"',
        'n': '\n', 'r': '\r', 't': '\t', 'f': '\f', 'b': '\b',
        '_': '_', '~': '~', '.': '.', '-': '-', '!': '!', '$': '$', '&': '&',
        '(': '(', ')': ')', '*': '*', '+': '+', ',': ',', ';': ';', '=': '=',
        '/': '/', '?': '?', '#': '#', '@': '@', '%': '%',
      };


  // Translates string escape codes in the string into their textual equivalent
  function unescapeString(string, trimLength) {
    string = string.substring(trimLength, string.length - trimLength);
    return unescapeText(string, stringEscapeReplacements);
  }

  function unescapeLangString(string, trimLength) {
    const at = string.lastIndexOf("@");
    const lang = string.substr(at);
    string = string.substr(0, at);
    const u = unescapeString(string, trimLength);
    return extend(u, { language: lowercase(lang.substr(1)) });
  }

  function unescapeText (string, replacements) {
    const regex = /\\u([a-fA-F0-9]{4})|\\U([a-fA-F0-9]{8})|\\(.)/g;
    try {
      string = string.replace(regex, function (sequence, unicode4, unicode8, escapedChar) {
        let charCode;
        if (unicode4) {
          charCode = parseInt(unicode4, 16);
          if (isNaN(charCode)) throw new Error(); // can never happen (regex), but helps performance
          return String.fromCharCode(charCode);
        }
        else if (unicode8) {
          charCode = parseInt(unicode8, 16);
          if (isNaN(charCode)) throw new Error(); // can never happen (regex), but helps performance
          if (charCode < 0xFFFF) return String.fromCharCode(charCode);
          return String.fromCharCode(0xD800 + ((charCode -= 0x10000) >> 10), 0xDC00 + (charCode & 0x3FF));
        }
        else {
          const replacement = replacements[escapedChar];
          if (!replacement) throw new Error("no replacement found for '" + escapedChar + "'");
          return replacement;
        }
      });
      return string;
    }
    catch (error) { console.warn(error); return ''; }
  }

class TurtleJisonParser extends JisonParser {
    constructor(yy = {}, lexer = new TurtleJisonLexer(yy)) {
        super(yy, lexer);
        this.symbols_ = {"error":2,"turtleDoc":3,"Qstatement_E_Star":4,"EOF":5,"statement":6,"directive":7,"triples":8,"GT_DOT":9,"prefixID":10,"base":11,"sparqlPrefix":12,"sparqlBase":13,"PREFIX":14,"PNAME_NS":15,"IRIREF":16,"BASE":17,"SPARQL_PREFIX":18,"SPARQL_BASE":19,"subject":20,"predicateObjectList":21,"blankNodePropertyList":22,"QpredicateObjectList_E_Opt":23,"verb":24,"objectList":25,"Q_O_QGT_SEMI_E_S_Qverb_E_S_QobjectList_E_Opt_C_E_Star":26,"O_Qverb_E_S_QobjectList_E_C":27,"Q_O_Qverb_E_S_QobjectList_E_C_E_Opt":28,"O_QGT_SEMI_E_S_Qverb_E_S_QobjectList_E_Opt_C":29,"GT_SEMI":30,"object":31,"Q_O_QGT_COMMA_E_S_Qobject_E_C_E_Star":32,"O_QGT_COMMA_E_S_Qobject_E_C":33,"GT_COMMA":34,"predicate":35,"RDF_TYPE":36,"iri":37,"BlankNode":38,"collection":39,"literal":40,"RDFLiteral":41,"NumericLiteral":42,"BooleanLiteral":43,"GT_LBRACKET":44,"NEW_SUBJECT":45,"GT_RBRACKET":46,"GT_LPAREN":47,"Qobject_E_Star":48,"GT_RPAREN":49,"collectionObject":50,"INTEGER":51,"DECIMAL":52,"DOUBLE":53,"String":54,"Q_O_QLANGTAG_E_Or_QGT_DTYPE_E_S_Qiri_E_C_E_Opt":55,"O_QLANGTAG_E_Or_QGT_DTYPE_E_S_Qiri_E_C":56,"LANGTAG":57,"GT_DTYPE":58,"IT_true":59,"IT_false":60,"STRING_LITERAL1":61,"STRING_LITERAL2":62,"STRING_LITERAL_LONG1":63,"STRING_LITERAL_LONG2":64,"PrefixedName":65,"PNAME_LN":66,"BLANK_NODE_LABEL":67,"ANON":68,"$accept":0,"$end":1};
        this.terminals_ = {2:"error",5:"EOF",9:"GT_DOT",14:"PREFIX",15:"PNAME_NS",16:"IRIREF",17:"BASE",18:"SPARQL_PREFIX",19:"SPARQL_BASE",30:"GT_SEMI",34:"GT_COMMA",36:"RDF_TYPE",44:"GT_LBRACKET",46:"GT_RBRACKET",47:"GT_LPAREN",49:"GT_RPAREN",51:"INTEGER",52:"DECIMAL",53:"DOUBLE",57:"LANGTAG",58:"GT_DTYPE",59:"IT_true",60:"IT_false",61:"STRING_LITERAL1",62:"STRING_LITERAL2",63:"STRING_LITERAL_LONG1",64:"STRING_LITERAL_LONG2",66:"PNAME_LN",67:"BLANK_NODE_LABEL",68:"ANON"};
        this.productions_ = [0,[3,2],[4,0],[4,2],[6,1],[6,2],[7,1],[7,1],[7,1],[7,1],[10,4],[11,3],[12,3],[13,2],[8,2],[8,2],[23,0],[23,1],[21,3],[27,2],[28,0],[28,1],[29,2],[26,0],[26,2],[25,2],[33,2],[32,0],[32,2],[24,1],[24,1],[20,1],[20,1],[20,1],[35,1],[31,1],[31,1],[31,1],[31,1],[31,1],[40,1],[40,1],[40,1],[22,4],[45,0],[39,3],[48,0],[48,2],[50,1],[50,1],[50,1],[50,1],[50,1],[42,1],[42,1],[42,1],[41,2],[56,1],[56,2],[55,0],[55,1],[43,1],[43,1],[54,1],[54,1],[54,1],[54,1],[37,1],[37,1],[65,1],[65,1],[38,1],[38,1]];

        // shorten static method to just `o` for terse STATE_TABLE
        const $V0=[5,14,15,16,17,18,19,44,47,66,67,68],$V1=[1,37],$V2=[1,34],$V3=[1,32],$V4=[1,36],$V5=[15,16,36,66],$V6=[2,44],$V7=[2,67],$V8=[2,68],$V9=[2,71],$Va=[2,72],$Vb=[15,16,44,47,49,51,52,53,59,60,61,62,63,64,66,67,68],$Vc=[2,46],$Vd=[2,69],$Ve=[2,70],$Vf=[1,63],$Vg=[1,53],$Vh=[1,62],$Vi=[15,16,44,47,51,52,53,59,60,61,62,63,64,66,67,68],$Vj=[1,96],$Vk=[1,86],$Vl=[1,91],$Vm=[1,90],$Vn=[1,98],$Vo=[1,99],$Vp=[1,100],$Vq=[1,101],$Vr=[1,102],$Vs=[1,103],$Vt=[1,104],$Vu=[1,105],$Vv=[1,106],$Vw=[1,95],$Vx=[1,88],$Vy=[1,89],$Vz=[9,30],$VA=[2,23],$VB=[9,30,34],$VC=[2,27],$VD=[2,35],$VE=[2,36],$VF=[2,37],$VG=[2,38],$VH=[2,39],$VI=[2,40],$VJ=[2,41],$VK=[2,42],$VL=[2,59],$VM=[2,53],$VN=[2,54],$VO=[2,55],$VP=[2,61],$VQ=[2,62],$VR=[9,30,34,57,58],$VS=[2,63],$VT=[2,64],$VU=[2,65],$VV=[2,66],$VW=[1,134],$VX=[1,124],$VY=[1,133],$VZ=[2,45],$V_=[15,16,44,47,49,51,52,53,57,58,59,60,61,62,63,64,66,67,68],$V$=[2,18],$V01=[2,25],$V11=[2,56],$V21=[2,60],$V31=[2,57],$V41=[2,43],$V51=[30,46],$V61=[30,34,46],$V71=[30,34,46,57,58],$V81=[2,24],$V91=[2,20],$Va1=[2,28],$Vb1=[1,188],$Vc1=[1,178],$Vd1=[1,187],$Ve1=[2,58],$Vf1=[2,22],$Vg1=[2,21],$Vh1=[1,225],$Vi1=[1,215],$Vj1=[1,224],$Vk1=[2,26],$Vl1=[1,261],$Vm1=[1,251],$Vn1=[1,260],$Vo1=[2,19],$Vp1=[1,300],$Vq1=[1,290],$Vr1=[1,299],$Vs1=[1,349],$Vt1=[1,339],$Vu1=[1,348],$Vv1=[1,389],$Vw1=[1,379],$Vx1=[1,388];
        const o = JisonParser.expandParseTable;
        this.table = [o($V0,[2,2],{3:1,4:2}),{1:[3]},{5:[1,3],6:4,7:5,8:6,10:7,11:8,12:9,13:10,14:[1,13],15:[1,27],16:[1,21],17:[1,14],18:[1,15],19:[1,16],20:11,22:12,37:17,38:18,39:19,44:[1,20],47:[1,25],65:22,66:[1,26],67:[1,23],68:[1,24]},{1:[2,1]},o($V0,[2,3]),o($V0,[2,4]),{9:[1,28]},o($V0,[2,6]),o($V0,[2,7]),o($V0,[2,8]),o($V0,[2,9]),{15:$V1,16:$V2,21:29,24:30,35:31,36:$V3,37:33,65:35,66:$V4},{9:[2,16],15:$V1,16:$V2,21:39,23:38,24:30,35:31,36:$V3,37:33,65:35,66:$V4},{15:[1,40]},{16:[1,41]},{15:[1,42]},{16:[1,43]},o($V5,[2,31]),o($V5,[2,32]),o($V5,[2,33]),o($V5,$V6,{45:44}),o($V5,$V7),o($V5,$V8),o($V5,$V9),o($V5,$Va),o($Vb,$Vc,{48:45}),o($V5,$Vd),o($V5,$Ve),o($V0,[2,5]),{9:[2,14]},{15:$Vf,16:$Vg,22:51,25:46,31:47,37:48,38:49,39:50,40:52,41:59,42:60,43:61,44:[1,58],47:[1,57],51:[1,65],52:[1,66],53:[1,67],54:64,59:[1,68],60:[1,69],61:[1,70],62:[1,71],63:[1,72],64:[1,73],65:54,66:$Vh,67:[1,55],68:[1,56]},o($Vi,[2,29]),o($Vi,[2,30]),o($Vi,[2,34]),o($Vi,$V7),o($Vi,$V8),o($Vi,$Vd),o($Vi,$Ve),{9:[2,15]},{9:[2,17]},{16:[1,74]},{9:[1,75]},{16:[1,76]},o($V0,[2,13]),{15:$V1,16:$V2,21:77,24:78,35:31,36:$V3,37:33,65:35,66:$V4},{15:$Vj,16:$Vk,22:84,37:81,38:82,39:83,40:85,41:92,42:93,43:94,44:$Vl,47:$Vm,49:[1,79],50:80,51:$Vn,52:$Vo,53:$Vp,54:97,59:$Vq,60:$Vr,61:$Vs,62:$Vt,63:$Vu,64:$Vv,65:87,66:$Vw,67:$Vx,68:$Vy},o($Vz,$VA,{26:107}),o($VB,$VC,{32:108}),o($VB,$VD),o($VB,$VE),o($VB,$VF),o($VB,$VG),o($VB,$VH),o($VB,$V7),o($VB,$V8),o($VB,$V9),o($VB,$Va),o($Vb,$Vc,{48:109}),o($V5,$V6,{45:110}),o($VB,$VI),o($VB,$VJ),o($VB,$VK),o($VB,$Vd),o($VB,$Ve),o($VB,$VL,{55:111,56:112,57:[1,113],58:[1,114]}),o($VB,$VM),o($VB,$VN),o($VB,$VO),o($VB,$VP),o($VB,$VQ),o($VR,$VS),o($VR,$VT),o($VR,$VU),o($VR,$VV),{9:[1,115]},o($V0,[2,11]),o($V0,[2,12]),{46:[1,116]},{15:$VW,16:$VX,22:122,25:117,31:118,37:119,38:120,39:121,40:123,41:130,42:131,43:132,44:[1,129],47:[1,128],51:[1,136],52:[1,137],53:[1,138],54:135,59:[1,139],60:[1,140],61:[1,141],62:[1,142],63:[1,143],64:[1,144],65:125,66:$VY,67:[1,126],68:[1,127]},o($V5,$VZ),o($Vb,[2,47]),o($Vb,[2,48]),o($Vb,[2,49]),o($Vb,[2,50]),o($Vb,[2,51]),o($Vb,[2,52]),o($Vb,$V7),o($Vb,$V8),o($Vb,$V9),o($Vb,$Va),o($Vb,$Vc,{48:145}),o($V5,$V6,{45:146}),o($Vb,$VI),o($Vb,$VJ),o($Vb,$VK),o($Vb,$Vd),o($Vb,$Ve),o($Vb,$VL,{55:147,56:148,57:[1,149],58:[1,150]}),o($Vb,$VM),o($Vb,$VN),o($Vb,$VO),o($Vb,$VP),o($Vb,$VQ),o($V_,$VS),o($V_,$VT),o($V_,$VU),o($V_,$VV),{9:$V$,29:151,30:[1,152]},o($Vz,$V01,{33:153,34:[1,154]}),{15:$Vj,16:$Vk,22:84,37:81,38:82,39:83,40:85,41:92,42:93,43:94,44:$Vl,47:$Vm,49:[1,155],50:80,51:$Vn,52:$Vo,53:$Vp,54:97,59:$Vq,60:$Vr,61:$Vs,62:$Vt,63:$Vu,64:$Vv,65:87,66:$Vw,67:$Vx,68:$Vy},{15:$V1,16:$V2,21:156,24:78,35:31,36:$V3,37:33,65:35,66:$V4},o($VB,$V11),o($VB,$V21),o($VB,$V31),{15:$Vf,16:$Vg,37:157,65:54,66:$Vh},o($V0,[2,10]),o([9,15,16,36,66],$V41),o($V51,$VA,{26:158}),o($V61,$VC,{32:159}),o($V61,$VD),o($V61,$VE),o($V61,$VF),o($V61,$VG),o($V61,$VH),o($V61,$V7),o($V61,$V8),o($V61,$V9),o($V61,$Va),o($Vb,$Vc,{48:160}),o($V5,$V6,{45:161}),o($V61,$VI),o($V61,$VJ),o($V61,$VK),o($V61,$Vd),o($V61,$Ve),o($V61,$VL,{55:162,56:163,57:[1,164],58:[1,165]}),o($V61,$VM),o($V61,$VN),o($V61,$VO),o($V61,$VP),o($V61,$VQ),o($V71,$VS),o($V71,$VT),o($V71,$VU),o($V71,$VV),{15:$Vj,16:$Vk,22:84,37:81,38:82,39:83,40:85,41:92,42:93,43:94,44:$Vl,47:$Vm,49:[1,166],50:80,51:$Vn,52:$Vo,53:$Vp,54:97,59:$Vq,60:$Vr,61:$Vs,62:$Vt,63:$Vu,64:$Vv,65:87,66:$Vw,67:$Vx,68:$Vy},{15:$V1,16:$V2,21:167,24:78,35:31,36:$V3,37:33,65:35,66:$V4},o($Vb,$V11),o($Vb,$V21),o($Vb,$V31),{15:$Vj,16:$Vk,37:168,65:87,66:$Vw},o($Vz,$V81),o($Vz,$V91,{35:31,37:33,65:35,28:169,27:170,24:171,15:$V1,16:$V2,36:$V3,66:$V4}),o($VB,$Va1),{15:$Vb1,16:$Vc1,22:176,31:172,37:173,38:174,39:175,40:177,41:184,42:185,43:186,44:[1,183],47:[1,182],51:[1,190],52:[1,191],53:[1,192],54:189,59:[1,193],60:[1,194],61:[1,195],62:[1,196],63:[1,197],64:[1,198],65:179,66:$Vd1,67:[1,180],68:[1,181]},o($VB,$VZ),{46:[1,199]},o($VB,$Ve1),{29:200,30:[1,201],46:$V$},o($V51,$V01,{33:202,34:[1,203]}),{15:$Vj,16:$Vk,22:84,37:81,38:82,39:83,40:85,41:92,42:93,43:94,44:$Vl,47:$Vm,49:[1,204],50:80,51:$Vn,52:$Vo,53:$Vp,54:97,59:$Vq,60:$Vr,61:$Vs,62:$Vt,63:$Vu,64:$Vv,65:87,66:$Vw,67:$Vx,68:$Vy},{15:$V1,16:$V2,21:205,24:78,35:31,36:$V3,37:33,65:35,66:$V4},o($V61,$V11),o($V61,$V21),o($V61,$V31),{15:$VW,16:$VX,37:206,65:125,66:$VY},o($Vb,$VZ),{46:[1,207]},o($Vb,$Ve1),o($Vz,$Vf1),o($Vz,$Vg1),{15:$Vh1,16:$Vi1,22:213,25:208,31:209,37:210,38:211,39:212,40:214,41:221,42:222,43:223,44:[1,220],47:[1,219],51:[1,227],52:[1,228],53:[1,229],54:226,59:[1,230],60:[1,231],61:[1,232],62:[1,233],63:[1,234],64:[1,235],65:216,66:$Vj1,67:[1,217],68:[1,218]},o($VB,$Vk1),o($VB,$VD),o($VB,$VE),o($VB,$VF),o($VB,$VG),o($VB,$VH),o($VB,$V7),o($VB,$V8),o($VB,$V9),o($VB,$Va),o($Vb,$Vc,{48:236}),o($V5,$V6,{45:237}),o($VB,$VI),o($VB,$VJ),o($VB,$VK),o($VB,$Vd),o($VB,$Ve),o($VB,$VL,{55:238,56:239,57:[1,240],58:[1,241]}),o($VB,$VM),o($VB,$VN),o($VB,$VO),o($VB,$VP),o($VB,$VQ),o($VR,$VS),o($VR,$VT),o($VR,$VU),o($VR,$VV),o($VB,$V41),o($V51,$V81),o($V51,$V91,{35:31,37:33,65:35,28:242,27:243,24:244,15:$V1,16:$V2,36:$V3,66:$V4}),o($V61,$Va1),{15:$Vl1,16:$Vm1,22:249,31:245,37:246,38:247,39:248,40:250,41:257,42:258,43:259,44:[1,256],47:[1,255],51:[1,263],52:[1,264],53:[1,265],54:262,59:[1,266],60:[1,267],61:[1,268],62:[1,269],63:[1,270],64:[1,271],65:252,66:$Vn1,67:[1,253],68:[1,254]},o($V61,$VZ),{46:[1,272]},o($V61,$Ve1),o($Vb,$V41),o($Vz,$Vo1),o($VB,$VC,{32:273}),o($VB,$VD),o($VB,$VE),o($VB,$VF),o($VB,$VG),o($VB,$VH),o($VB,$V7),o($VB,$V8),o($VB,$V9),o($VB,$Va),o($Vb,$Vc,{48:274}),o($V5,$V6,{45:275}),o($VB,$VI),o($VB,$VJ),o($VB,$VK),o($VB,$Vd),o($VB,$Ve),o($VB,$VL,{55:276,56:277,57:[1,278],58:[1,279]}),o($VB,$VM),o($VB,$VN),o($VB,$VO),o($VB,$VP),o($VB,$VQ),o($VR,$VS),o($VR,$VT),o($VR,$VU),o($VR,$VV),{15:$Vj,16:$Vk,22:84,37:81,38:82,39:83,40:85,41:92,42:93,43:94,44:$Vl,47:$Vm,49:[1,280],50:80,51:$Vn,52:$Vo,53:$Vp,54:97,59:$Vq,60:$Vr,61:$Vs,62:$Vt,63:$Vu,64:$Vv,65:87,66:$Vw,67:$Vx,68:$Vy},{15:$V1,16:$V2,21:281,24:78,35:31,36:$V3,37:33,65:35,66:$V4},o($VB,$V11),o($VB,$V21),o($VB,$V31),{15:$Vb1,16:$Vc1,37:282,65:179,66:$Vd1},o($V51,$Vf1),o($V51,$Vg1),{15:$Vp1,16:$Vq1,22:288,25:283,31:284,37:285,38:286,39:287,40:289,41:296,42:297,43:298,44:[1,295],47:[1,294],51:[1,302],52:[1,303],53:[1,304],54:301,59:[1,305],60:[1,306],61:[1,307],62:[1,308],63:[1,309],64:[1,310],65:291,66:$Vr1,67:[1,292],68:[1,293]},o($V61,$Vk1),o($V61,$VD),o($V61,$VE),o($V61,$VF),o($V61,$VG),o($V61,$VH),o($V61,$V7),o($V61,$V8),o($V61,$V9),o($V61,$Va),o($Vb,$Vc,{48:311}),o($V5,$V6,{45:312}),o($V61,$VI),o($V61,$VJ),o($V61,$VK),o($V61,$Vd),o($V61,$Ve),o($V61,$VL,{55:313,56:314,57:[1,315],58:[1,316]}),o($V61,$VM),o($V61,$VN),o($V61,$VO),o($V61,$VP),o($V61,$VQ),o($V71,$VS),o($V71,$VT),o($V71,$VU),o($V71,$VV),o($V61,$V41),o($Vz,$V01,{33:317,34:[1,318]}),{15:$Vj,16:$Vk,22:84,37:81,38:82,39:83,40:85,41:92,42:93,43:94,44:$Vl,47:$Vm,49:[1,319],50:80,51:$Vn,52:$Vo,53:$Vp,54:97,59:$Vq,60:$Vr,61:$Vs,62:$Vt,63:$Vu,64:$Vv,65:87,66:$Vw,67:$Vx,68:$Vy},{15:$V1,16:$V2,21:320,24:78,35:31,36:$V3,37:33,65:35,66:$V4},o($VB,$V11),o($VB,$V21),o($VB,$V31),{15:$Vh1,16:$Vi1,37:321,65:216,66:$Vj1},o($VB,$VZ),{46:[1,322]},o($VB,$Ve1),o($V51,$Vo1),o($V61,$VC,{32:323}),o($V61,$VD),o($V61,$VE),o($V61,$VF),o($V61,$VG),o($V61,$VH),o($V61,$V7),o($V61,$V8),o($V61,$V9),o($V61,$Va),o($Vb,$Vc,{48:324}),o($V5,$V6,{45:325}),o($V61,$VI),o($V61,$VJ),o($V61,$VK),o($V61,$Vd),o($V61,$Ve),o($V61,$VL,{55:326,56:327,57:[1,328],58:[1,329]}),o($V61,$VM),o($V61,$VN),o($V61,$VO),o($V61,$VP),o($V61,$VQ),o($V71,$VS),o($V71,$VT),o($V71,$VU),o($V71,$VV),{15:$Vj,16:$Vk,22:84,37:81,38:82,39:83,40:85,41:92,42:93,43:94,44:$Vl,47:$Vm,49:[1,330],50:80,51:$Vn,52:$Vo,53:$Vp,54:97,59:$Vq,60:$Vr,61:$Vs,62:$Vt,63:$Vu,64:$Vv,65:87,66:$Vw,67:$Vx,68:$Vy},{15:$V1,16:$V2,21:331,24:78,35:31,36:$V3,37:33,65:35,66:$V4},o($V61,$V11),o($V61,$V21),o($V61,$V31),{15:$Vl1,16:$Vm1,37:332,65:252,66:$Vn1},o($VB,$Va1),{15:$Vs1,16:$Vt1,22:337,31:333,37:334,38:335,39:336,40:338,41:345,42:346,43:347,44:[1,344],47:[1,343],51:[1,351],52:[1,352],53:[1,353],54:350,59:[1,354],60:[1,355],61:[1,356],62:[1,357],63:[1,358],64:[1,359],65:340,66:$Vu1,67:[1,341],68:[1,342]},o($VB,$VZ),{46:[1,360]},o($VB,$Ve1),o($VB,$V41),o($V51,$V01,{33:361,34:[1,362]}),{15:$Vj,16:$Vk,22:84,37:81,38:82,39:83,40:85,41:92,42:93,43:94,44:$Vl,47:$Vm,49:[1,363],50:80,51:$Vn,52:$Vo,53:$Vp,54:97,59:$Vq,60:$Vr,61:$Vs,62:$Vt,63:$Vu,64:$Vv,65:87,66:$Vw,67:$Vx,68:$Vy},{15:$V1,16:$V2,21:364,24:78,35:31,36:$V3,37:33,65:35,66:$V4},o($V61,$V11),o($V61,$V21),o($V61,$V31),{15:$Vp1,16:$Vq1,37:365,65:291,66:$Vr1},o($V61,$VZ),{46:[1,366]},o($V61,$Ve1),o($VB,$Vk1),o($VB,$VD),o($VB,$VE),o($VB,$VF),o($VB,$VG),o($VB,$VH),o($VB,$V7),o($VB,$V8),o($VB,$V9),o($VB,$Va),o($Vb,$Vc,{48:367}),o($V5,$V6,{45:368}),o($VB,$VI),o($VB,$VJ),o($VB,$VK),o($VB,$Vd),o($VB,$Ve),o($VB,$VL,{55:369,56:370,57:[1,371],58:[1,372]}),o($VB,$VM),o($VB,$VN),o($VB,$VO),o($VB,$VP),o($VB,$VQ),o($VR,$VS),o($VR,$VT),o($VR,$VU),o($VR,$VV),o($VB,$V41),o($V61,$Va1),{15:$Vv1,16:$Vw1,22:377,31:373,37:374,38:375,39:376,40:378,41:385,42:386,43:387,44:[1,384],47:[1,383],51:[1,391],52:[1,392],53:[1,393],54:390,59:[1,394],60:[1,395],61:[1,396],62:[1,397],63:[1,398],64:[1,399],65:380,66:$Vx1,67:[1,381],68:[1,382]},o($V61,$VZ),{46:[1,400]},o($V61,$Ve1),o($V61,$V41),{15:$Vj,16:$Vk,22:84,37:81,38:82,39:83,40:85,41:92,42:93,43:94,44:$Vl,47:$Vm,49:[1,401],50:80,51:$Vn,52:$Vo,53:$Vp,54:97,59:$Vq,60:$Vr,61:$Vs,62:$Vt,63:$Vu,64:$Vv,65:87,66:$Vw,67:$Vx,68:$Vy},{15:$V1,16:$V2,21:402,24:78,35:31,36:$V3,37:33,65:35,66:$V4},o($VB,$V11),o($VB,$V21),o($VB,$V31),{15:$Vs1,16:$Vt1,37:403,65:340,66:$Vu1},o($V61,$Vk1),o($V61,$VD),o($V61,$VE),o($V61,$VF),o($V61,$VG),o($V61,$VH),o($V61,$V7),o($V61,$V8),o($V61,$V9),o($V61,$Va),o($Vb,$Vc,{48:404}),o($V5,$V6,{45:405}),o($V61,$VI),o($V61,$VJ),o($V61,$VK),o($V61,$Vd),o($V61,$Ve),o($V61,$VL,{55:406,56:407,57:[1,408],58:[1,409]}),o($V61,$VM),o($V61,$VN),o($V61,$VO),o($V61,$VP),o($V61,$VQ),o($V71,$VS),o($V71,$VT),o($V71,$VU),o($V71,$VV),o($V61,$V41),o($VB,$VZ),{46:[1,410]},o($VB,$Ve1),{15:$Vj,16:$Vk,22:84,37:81,38:82,39:83,40:85,41:92,42:93,43:94,44:$Vl,47:$Vm,49:[1,411],50:80,51:$Vn,52:$Vo,53:$Vp,54:97,59:$Vq,60:$Vr,61:$Vs,62:$Vt,63:$Vu,64:$Vv,65:87,66:$Vw,67:$Vx,68:$Vy},{15:$V1,16:$V2,21:412,24:78,35:31,36:$V3,37:33,65:35,66:$V4},o($V61,$V11),o($V61,$V21),o($V61,$V31),{15:$Vv1,16:$Vw1,37:413,65:380,66:$Vx1},o($VB,$V41),o($V61,$VZ),{46:[1,414]},o($V61,$Ve1),o($V61,$V41)];
        this.defaultActions = {3:[2,1],29:[2,14],38:[2,15],39:[2,17]};
    }
    performAction (yytext, yyleng, yylineno, yy, yystate /* action[1] */, $$ /* vstack */, _$ /* lstack */) {
/* this == yyval */
          const $0 = $$.length - 1;
        switch (yystate) {
case 1:

        return $$[$0-1];
      
break;
case 2: case 4: case 16: case 20: case 23: case 27: case 46:
this.$ = [];
break;
case 3:
this.$ = $$[$0-1].concat($$[$0]);
break;
case 10:

        yy._prefixes[$$[$0-2].slice(0, -1)] = $$[$0-1];
      
break;
case 11:

        yy._setBase(yy._base === null ||
                    absoluteIRI.test($$[$0-1].slice(1, -1)) ? $$[$0-1].slice(1, -1) : yy._resolveIRI($$[$0-1].slice(1, -1)));
      
break;
case 12:

        yy._prefixes[$$[$0-1].slice(0, -1)] = $$[$0];
      
break;
case 13:

        yy._setBase(yy._base === null ||
                    absoluteIRI.test($$[$0].slice(1, -1)) ? $$[$0].slice(1, -1) : yy._resolveIRI($$[$0].slice(1, -1)));
      
break;
case 14:
this.$ = yy.finishSubject($$[$0-1].concat($$[$0])) // <<(1 2) a (3 4)>> has n triples;
break;
case 15:
this.$ = yy.finishSubject($$[$0-1].concat($$[$0])) // blankNodePropertyList _QpredicateObjectList_E_Opt;
break;
case 18:
this.$ = $$[$0-1].concat($$[$0]) // verb objectList _Q_O_QGT_SEMI_E_S_Qverb_E_S_QobjectList_E_Opt_C_E_Star;
break;
case 19: case 22: case 26:
this.$ = $$[$0];
break;
case 24:
this.$ = $$[$0-1].concat($$[$0]) // Q_O_QGT_SEMI_E_S_Qverb_E_S_QobjectList_E_Opt_C_E_Star _O_QGT_SEMI_E_S_Qverb_E_S_QobjectList_E_Opt_C;
break;
case 25:
this.$ = yy.finishObjectList($$[$0-1].concat($$[$0])) // object _Q_O_QGT_COMMA_E_S_Qobject_E_C_E_Star;
break;
case 28:
this.$ = $$[$0-1].concat($$[$0]) // Q_O_QGT_COMMA_E_S_Qobject_E_C_E_Star _O_QGT_COMMA_E_S_Qobject_E_C;
break;
case 29:
this.$ = yy.setPredicate($$[$0]);
break;
case 30:
this.$ = yy.setPredicate(RDF_TYPE) // left is a token, right a const;
break;
case 31: case 32:
this.$ = yy.setSubject($$[$0]);
break;
case 33:
this.$ = yy.collectionSubject($$[$0]);
break;
case 35: case 36: case 39:
this.$ = [yy.triple($$[$0])];
break;
case 37:
this.$ = [yy.triple($$[$0][0].subject)].concat($$[$0]) // collection;
break;
case 38:
this.$ = [yy.triple($$[$0][0].subject)].concat($$[$0]) // blankNodePropertyList;
break;
case 43:
this.$ = yy.finishBlankNodePropertyList($$[$0-1], $$[$0-2]);
break;
case 44:
this.$ = yy.startBlankNodePropertyList();;
break;
case 45:
this.$ = $$[$0-1];
break;
case 47:
this.$ = $$[$0-1].concat($$[$0]) // Qobject_E_Star object;
break;
case 48: case 49: case 52:
this.$ = {node: $$[$0], nested: []};
break;
case 50:
this.$ = yy.makeFirstRest($$[$0]) // collection;
break;
case 51:
this.$ = {node: $$[$0][0].subject, nested: $$[$0]} // blankNodePropertyList;
break;
case 53:
this.$ = yy.createLiteral($$[$0], XSD_INTEGER);
break;
case 54:
this.$ = yy.createLiteral($$[$0], XSD_DECIMAL);
break;
case 55:
this.$ = yy.createLiteral($$[$0], XSD_DOUBLE);
break;
case 56:
this.$ = yy.createLiteral($$[$0-1], $$[$0]);
break;
case 59:
this.$ = null;
break;
case 61: case 62:
this.$ = yy.createLiteral($$[$0], XSD_BOOLEAN);
break;
case 63: case 64:
this.$ = unescapeString($$[$0], 1);
break;
case 65: case 66:
this.$ = unescapeString($$[$0], 3);
break;
case 67:

        const unesc = unescapeText($$[$0].slice(1,-1), {});
        this.$ = yy._base === null || absoluteIRI.test(unesc) ? unesc : yy._resolveIRI(unesc)
      
break;
case 69:

        const namePos1 = $$[$0].indexOf(':');
        this.$ = yy.expandPrefix($$[$0].substr(0, namePos1), yy) + unescapeText($$[$0].substr(namePos1 + 1), pnameEscapeReplacements);
      
break;
case 70:

        this.$ = yy.expandPrefix($$[$0].substr(0, $$[$0].length - 1), yy);
      
break;
case 71:
this.$ = yy.createBlankNode($$[$0]);
break;
case 72:
this.$ = yy.createBlankNode();
break;
        }
    }
}

// Export module
Object.defineProperty(exports, "__esModule", { value: true });
exports.TurtleJisonParser = TurtleJisonParser;


/* generated by @ts-jison/lexer-generator 0.4.1-alpha.2 */
const { JisonLexer } = require('@ts-jison/lexer');

class TurtleJisonLexer extends JisonLexer {
    constructor (yy = {}) {
        super(yy);
        this.options = {"moduleName":"TurtleJison"};
        this.rules = [
        /^(?:\s+|#[^\u000a\u000d]*|\/\*(?:[^*]|\*(?:[^/]|\\\/))*\*\/)/,
        /^(?:\.)/,
        /^(?:;)/,
        /^(?:,)/,
        /^(?:\[)/,
        /^(?:\])/,
        /^(?:\()/,
        /^(?:\))/,
        /^(?:\^\^)/,
        /^(?:true\b)/,
        /^(?:false\b)/,
        /^(?:[Pp][Rr][Ee][Ff][Ii][Xx])/,
        /^(?:[Bb][Aa][Ss][Ee])/,
        /^(?:@base\b)/,
        /^(?:@prefix\b)/,
        /^(?:<(?:[^\u0000-\u0020<>\"{}|^`\\]|\\u(?:[0-9]|[A-F]|[a-f])(?:[0-9]|[A-F]|[a-f])(?:[0-9]|[A-F]|[a-f])(?:[0-9]|[A-F]|[a-f])|\\U(?:[0-9]|[A-F]|[a-f])(?:[0-9]|[A-F]|[a-f])(?:[0-9]|[A-F]|[a-f])(?:[0-9]|[A-F]|[a-f])(?:[0-9]|[A-F]|[a-f])(?:[0-9]|[A-F]|[a-f])(?:[0-9]|[A-F]|[a-f])(?:[0-9]|[A-F]|[a-f]))*>)/,
        /^(?:(?:(?:[A-Z]|[a-z]|[\u00c0-\u00d6]|[\u00d8-\u00f6]|[\u00f8-\u02ff]|[\u0370-\u037d]|[\u037f-\u1fff]|[\u200c-\u200d]|[\u2070-\u218f]|[\u2c00-\u2fef]|[\u3001-\ud7ff]|[\uf900-\ufdcf]|[\ufdf0-\ufffd]|[\uD800-\uDB7F][\uDC00-\uDFFF])(?:(?:[A-Z]|[a-z]|[\u00c0-\u00d6]|[\u00d8-\u00f6]|[\u00f8-\u02ff]|[\u0370-\u037d]|[\u037f-\u1fff]|[\u200c-\u200d]|[\u2070-\u218f]|[\u2c00-\u2fef]|[\u3001-\ud7ff]|[\uf900-\ufdcf]|[\ufdf0-\ufffd]|[\uD800-\uDB7F][\uDC00-\uDFFF]|_|_|-|[0-9]|[\u00b7]|[\u0300-\u036f]|[\u203f-\u2040]|\.)*(?:[A-Z]|[a-z]|[\u00c0-\u00d6]|[\u00d8-\u00f6]|[\u00f8-\u02ff]|[\u0370-\u037d]|[\u037f-\u1fff]|[\u200c-\u200d]|[\u2070-\u218f]|[\u2c00-\u2fef]|[\u3001-\ud7ff]|[\uf900-\ufdcf]|[\ufdf0-\ufffd]|[\uD800-\uDB7F][\uDC00-\uDFFF]|_|_|-|[0-9]|[\u00b7]|[\u0300-\u036f]|[\u203f-\u2040]))?)?:(?:[A-Z]|[a-z]|[\u00c0-\u00d6]|[\u00d8-\u00f6]|[\u00f8-\u02ff]|[\u0370-\u037d]|[\u037f-\u1fff]|[\u200c-\u200d]|[\u2070-\u218f]|[\u2c00-\u2fef]|[\u3001-\ud7ff]|[\uf900-\ufdcf]|[\ufdf0-\ufffd]|[\uD800-\uDB7F][\uDC00-\uDFFF]|_|_|:|[0-9]|%(?:[0-9]|[A-F]|[a-f])(?:[0-9]|[A-F]|[a-f])|\\(?:_|~|\.|-|!|\$|&|'|\(|\)|\*|\+|,|;|=|\/|\?|#|@|%))(?:[A-Z]|[a-z]|[\u00c0-\u00d6]|[\u00d8-\u00f6]|[\u00f8-\u02ff]|[\u0370-\u037d]|[\u037f-\u1fff]|[\u200c-\u200d]|[\u2070-\u218f]|[\u2c00-\u2fef]|[\u3001-\ud7ff]|[\uf900-\ufdcf]|[\ufdf0-\ufffd]|[\uD800-\uDB7F][\uDC00-\uDFFF]|_|_|-|[0-9]|[\u00b7]|[\u0300-\u036f]|[\u203f-\u2040]|\.|:|%(?:[0-9]|[A-F]|[a-f])(?:[0-9]|[A-F]|[a-f])|\\(?:_|~|\.|-|!|\$|&|'|\(|\)|\*|\+|,|;|=|\/|\?|#|@|%))*)/,
        /^(?:(?:(?:[A-Z]|[a-z]|[\u00c0-\u00d6]|[\u00d8-\u00f6]|[\u00f8-\u02ff]|[\u0370-\u037d]|[\u037f-\u1fff]|[\u200c-\u200d]|[\u2070-\u218f]|[\u2c00-\u2fef]|[\u3001-\ud7ff]|[\uf900-\ufdcf]|[\ufdf0-\ufffd]|[\uD800-\uDB7F][\uDC00-\uDFFF])(?:(?:[A-Z]|[a-z]|[\u00c0-\u00d6]|[\u00d8-\u00f6]|[\u00f8-\u02ff]|[\u0370-\u037d]|[\u037f-\u1fff]|[\u200c-\u200d]|[\u2070-\u218f]|[\u2c00-\u2fef]|[\u3001-\ud7ff]|[\uf900-\ufdcf]|[\ufdf0-\ufffd]|[\uD800-\uDB7F][\uDC00-\uDFFF]|_|_|-|[0-9]|[\u00b7]|[\u0300-\u036f]|[\u203f-\u2040]|\.)*(?:[A-Z]|[a-z]|[\u00c0-\u00d6]|[\u00d8-\u00f6]|[\u00f8-\u02ff]|[\u0370-\u037d]|[\u037f-\u1fff]|[\u200c-\u200d]|[\u2070-\u218f]|[\u2c00-\u2fef]|[\u3001-\ud7ff]|[\uf900-\ufdcf]|[\ufdf0-\ufffd]|[\uD800-\uDB7F][\uDC00-\uDFFF]|_|_|-|[0-9]|[\u00b7]|[\u0300-\u036f]|[\u203f-\u2040]))?)?:)/,
        /^(?:_:(?:[A-Z]|[a-z]|[\u00c0-\u00d6]|[\u00d8-\u00f6]|[\u00f8-\u02ff]|[\u0370-\u037d]|[\u037f-\u1fff]|[\u200c-\u200d]|[\u2070-\u218f]|[\u2c00-\u2fef]|[\u3001-\ud7ff]|[\uf900-\ufdcf]|[\ufdf0-\ufffd]|[\uD800-\uDB7F][\uDC00-\uDFFF]|_|_|[0-9])(?:(?:[A-Z]|[a-z]|[\u00c0-\u00d6]|[\u00d8-\u00f6]|[\u00f8-\u02ff]|[\u0370-\u037d]|[\u037f-\u1fff]|[\u200c-\u200d]|[\u2070-\u218f]|[\u2c00-\u2fef]|[\u3001-\ud7ff]|[\uf900-\ufdcf]|[\ufdf0-\ufffd]|[\uD800-\uDB7F][\uDC00-\uDFFF]|_|_|-|[0-9]|[\u00b7]|[\u0300-\u036f]|[\u203f-\u2040]|\.)*(?:[A-Z]|[a-z]|[\u00c0-\u00d6]|[\u00d8-\u00f6]|[\u00f8-\u02ff]|[\u0370-\u037d]|[\u037f-\u1fff]|[\u200c-\u200d]|[\u2070-\u218f]|[\u2c00-\u2fef]|[\u3001-\ud7ff]|[\uf900-\ufdcf]|[\ufdf0-\ufffd]|[\uD800-\uDB7F][\uDC00-\uDFFF]|_|_|-|[0-9]|[\u00b7]|[\u0300-\u036f]|[\u203f-\u2040]))?)/,
        /^(?:@[A-Za-z]+(?:-[0-9A-Za-z]+)*)/,
        /^(?:[+-]?[0-9]+)/,
        /^(?:[+-]?[0-9]*\.[0-9]+)/,
        /^(?:[+-]?(?:[0-9]+\.[0-9]*[Ee][+-]?[0-9]+|\.?[0-9]+[Ee][+-]?[0-9]+))/,
        /^(?:'(?:[^\u0027\u005c\u000a\u000d]|\\[\"\'\\bfnrt]|\\u(?:[0-9]|[A-F]|[a-f])(?:[0-9]|[A-F]|[a-f])(?:[0-9]|[A-F]|[a-f])(?:[0-9]|[A-F]|[a-f])|\\U(?:[0-9]|[A-F]|[a-f])(?:[0-9]|[A-F]|[a-f])(?:[0-9]|[A-F]|[a-f])(?:[0-9]|[A-F]|[a-f])(?:[0-9]|[A-F]|[a-f])(?:[0-9]|[A-F]|[a-f])(?:[0-9]|[A-F]|[a-f])(?:[0-9]|[A-F]|[a-f]))*')/,
        /^(?:"(?:[^\u0022\u005c\u000a\u000d]|\\[\"\'\\bfnrt]|\\u(?:[0-9]|[A-F]|[a-f])(?:[0-9]|[A-F]|[a-f])(?:[0-9]|[A-F]|[a-f])(?:[0-9]|[A-F]|[a-f])|\\U(?:[0-9]|[A-F]|[a-f])(?:[0-9]|[A-F]|[a-f])(?:[0-9]|[A-F]|[a-f])(?:[0-9]|[A-F]|[a-f])(?:[0-9]|[A-F]|[a-f])(?:[0-9]|[A-F]|[a-f])(?:[0-9]|[A-F]|[a-f])(?:[0-9]|[A-F]|[a-f]))*")/,
        /^(?:'''(?:(?:'|'')?(?:[^\'\\]|\\[\"\'\\bfnrt]|\\u(?:[0-9]|[A-F]|[a-f])(?:[0-9]|[A-F]|[a-f])(?:[0-9]|[A-F]|[a-f])(?:[0-9]|[A-F]|[a-f])|\\U(?:[0-9]|[A-F]|[a-f])(?:[0-9]|[A-F]|[a-f])(?:[0-9]|[A-F]|[a-f])(?:[0-9]|[A-F]|[a-f])(?:[0-9]|[A-F]|[a-f])(?:[0-9]|[A-F]|[a-f])(?:[0-9]|[A-F]|[a-f])(?:[0-9]|[A-F]|[a-f])))*''')/,
        /^(?:"""(?:(?:"|"")?(?:[^\"\\]|\\[\"\'\\bfnrt]|\\u(?:[0-9]|[A-F]|[a-f])(?:[0-9]|[A-F]|[a-f])(?:[0-9]|[A-F]|[a-f])(?:[0-9]|[A-F]|[a-f])|\\U(?:[0-9]|[A-F]|[a-f])(?:[0-9]|[A-F]|[a-f])(?:[0-9]|[A-F]|[a-f])(?:[0-9]|[A-F]|[a-f])(?:[0-9]|[A-F]|[a-f])(?:[0-9]|[A-F]|[a-f])(?:[0-9]|[A-F]|[a-f])(?:[0-9]|[A-F]|[a-f])))*""")/,
        /^(?:\\\[(?: |\\t|\\r|\\n)*\\\])/,
        /^(?:a\b)/,
        /^(?:$)/,
        /^(?:[a-zA-Z0-9_-]+)/,
        /^(?:.)/
    ];
        this.conditions = {"INITIAL":{"rules":[0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31],"inclusive":true}};
    }
    performAction (yy, yy_, $avoiding_name_collisions, YY_START) {
              let YYSTATE = YY_START;
            switch ($avoiding_name_collisions) {
    case 0:
  // space eaten by whitespace and comments
  if (yy.skipped.last_line === yy_.yylloc.first_line &&
      yy.skipped.last_column === yy_.yylloc.first_column) {
    // immediately follows a skipped span
    yy.skipped.last_line = yy_.yylloc.last_line;
    yy.skipped.last_column = yy_.yylloc.last_column;
  } else {
    // follows something else
    yy.skipped = yy_.yylloc
  };

      break;
    case 1:return 9;
    case 2:return 30;
    case 3:return 34;
    case 4:return 44;
    case 5:return 46;
    case 6:return 47;
    case 7:return 49;
    case 8:return 58;
    case 9:return 59;
    case 10:return 60;
    case 11:return 18;
    case 12:return 19;
    case 13:return 17;
    case 14:return 14;
    case 15:return 16;
    case 16:return 66;
    case 17:return 15;
    case 18:return 67;
    case 19:return 57;
    case 20:return 51;
    case 21:return 52;
    case 22:return 53;
    case 23:return 61;
    case 24:return 62;
    case 25:return 63;
    case 26:return 64;
    case 27:return 68;
    case 28:return 36;
    case 29:return 5;
    case 30:return 'unexpected word "'+yy_.yytext+'"';
    case 31:return 'invalid character '+yy_.yytext;
        }
    }
}


// Export module
Object.defineProperty(exports, "__esModule", { value: true });
exports.TurtleJisonLexer = TurtleJisonLexer;


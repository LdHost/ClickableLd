const { JisonParser, o } = require('@ts-jison/parser');
/**
 * parser generated by  @ts-jison/parser-generator 0.4.1-alpha.2
 * @returns Parser implementing JisonParserApi and a Lexer implementing JisonLexerApi.
 */

  /*
    ShEx parser in the Jison parser generator format.
  */

  const RDF = 'http://www.w3.org/1999/02/22-rdf-syntax-ns#',
      RDF_TYPE  = RDF + 'type',
      RDF_FIRST = RDF + 'first',
      RDF_REST  = RDF + 'rest',
      RDF_NIL   = RDF + 'nil',
      XSD = 'http://www.w3.org/2001/XMLSchema#',
      XSD_INTEGER  = XSD + 'integer',
      XSD_DECIMAL  = XSD + 'decimal',
      XSD_FLOAT   = XSD + 'float',
      XSD_DOUBLE   = XSD + 'double',
      XSD_BOOLEAN  = XSD + 'boolean',
      XSD_TRUE =  '"true"^^'  + XSD_BOOLEAN,
      XSD_FALSE = '"false"^^' + XSD_BOOLEAN,
      XSD_PATTERN        = XSD + 'pattern',
      XSD_MININCLUSIVE   = XSD + 'minInclusive',
      XSD_MINEXCLUSIVE   = XSD + 'minExclusive',
      XSD_MAXINCLUSIVE   = XSD + 'maxInclusive',
      XSD_MAXEXCLUSIVE   = XSD + 'maxExclusive',
      XSD_LENGTH         = XSD + 'length',
      XSD_MINLENGTH      = XSD + 'minLength',
      XSD_MAXLENGTH      = XSD + 'maxLength',
      XSD_TOTALDIGITS    = XSD + 'totalDigits',
      XSD_FRACTIONDIGITS = XSD + 'fractionDigits';

  const numericDatatypes = [
      XSD + "integer",
      XSD + "decimal",
      XSD + "float",
      XSD + "double",
      XSD + "string",
      XSD + "boolean",
      XSD + "dateTime",
      XSD + "nonPositiveInteger",
      XSD + "negativeInteger",
      XSD + "long",
      XSD + "int",
      XSD + "short",
      XSD + "byte",
      XSD + "nonNegativeInteger",
      XSD + "unsignedLong",
      XSD + "unsignedInt",
      XSD + "unsignedShort",
      XSD + "unsignedByte",
      XSD + "positiveInteger"
  ];

  const absoluteIRI = /^[a-z][a-z0-9+.-]*:/i;

class TurtleJisonParser extends JisonParser {
    constructor(yy = {}, lexer = new TurtleJisonLexer(yy)) {
        super(yy, lexer);
        this.symbols_ = {"error":2,"turtleDoc":3,"WSS":4,"Qstatement_E_Star":5,"EOF":6,"WS_OR_COMMENT":7,"WS":8,"COMMENT":9,"statement":10,"directive":11,"triples":12,"GT_DOT":13,"prefixID":14,"base":15,"sparqlPrefix":16,"sparqlBase":17,"PREFIX":18,"PNAME_NS":19,"IRIREF":20,"BASE":21,"SPARQL_PREFIX":22,"SPARQL_BASE":23,"subject":24,"predicateObjectList":25,"collection_SUBJECT":26,"blankNodePropertyList_SUBJECT":27,"QpredicateObjectList_E_Opt":28,"collection":29,"blankNodePropertyList":30,"verb":31,"objectList":32,"Q_O_QGT_SEMI_E_S_Qverb_E_S_QobjectList_E_Opt_C_E_Star":33,"O_Qverb_E_S_QobjectList_E_C":34,"Q_O_Qverb_E_S_QobjectList_E_C_E_Opt":35,"O_QGT_SEMI_E_S_Qverb_E_S_QobjectList_E_Opt_C":36,"GT_SEMI":37,"object":38,"Q_O_QGT_COMMA_E_S_Qobject_E_C_E_Star":39,"O_QGT_COMMA_E_S_Qobject_E_C":40,"GT_COMMA":41,"predicate":42,"RDF_TYPE":43,"iri":44,"BlankNode":45,"literal":46,"RDFLiteral":47,"NumericLiteral":48,"BooleanLiteral":49,"NEW_SUBJECT":50,"GT_RBRACKET":51,"GT_LBRACKET":52,"GT_LPAREN":53,"Qobject_E_Star":54,"GT_RPAREN":55,"collectionObject":56,"INTEGER":57,"DECIMAL":58,"DOUBLE":59,"String":60,"Q_O_QLANGTAG_E_Or_QGT_DTYPE_E_S_Qiri_E_C_E_Opt":61,"O_QLANGTAG_E_Or_QGT_DTYPE_E_S_Qiri_E_C":62,"LANGTAG":63,"GT_DTYPE":64,"IT_true":65,"IT_false":66,"STRING_LITERAL1":67,"STRING_LITERAL2":68,"STRING_LITERAL_LONG1":69,"STRING_LITERAL_LONG2":70,"PrefixedName":71,"PNAME_LN":72,"BLANK_NODE_LABEL":73,"ANON":74,"$accept":0,"$end":1};
        this.terminals_ = {2:"error",6:"EOF",8:"WS",9:"COMMENT",13:"GT_DOT",18:"PREFIX",19:"PNAME_NS",20:"IRIREF",21:"BASE",22:"SPARQL_PREFIX",23:"SPARQL_BASE",37:"GT_SEMI",41:"GT_COMMA",43:"RDF_TYPE",51:"GT_RBRACKET",52:"GT_LBRACKET",53:"GT_LPAREN",55:"GT_RPAREN",57:"INTEGER",58:"DECIMAL",59:"DOUBLE",63:"LANGTAG",64:"GT_DTYPE",65:"IT_true",66:"IT_false",67:"STRING_LITERAL1",68:"STRING_LITERAL2",69:"STRING_LITERAL_LONG1",70:"STRING_LITERAL_LONG2",72:"PNAME_LN",73:"BLANK_NODE_LABEL",74:"ANON"};
        this.productions_ = [0,[3,3],[4,0],[4,2],[7,1],[7,1],[5,0],[5,3],[10,1],[10,2],[11,1],[11,1],[11,1],[11,1],[14,4],[15,3],[16,5],[17,2],[12,3],[12,3],[12,2],[26,1],[27,1],[28,0],[28,1],[25,4],[34,3],[35,0],[35,1],[36,3],[33,0],[33,2],[32,3],[40,4],[39,0],[39,2],[31,1],[31,1],[24,1],[24,1],[42,1],[38,1],[38,1],[38,1],[38,1],[38,1],[46,1],[46,1],[46,1],[30,3],[50,1],[29,4],[54,0],[54,3],[56,1],[56,1],[56,1],[56,1],[56,1],[48,1],[48,1],[48,1],[47,2],[62,1],[62,2],[61,0],[61,1],[49,1],[49,1],[60,1],[60,1],[60,1],[60,1],[44,1],[44,1],[71,1],[71,1],[45,1],[45,1]];

        // shorten static method to just `o` for terse STATE_TABLE
        const $V0=[6,8,9,18,19,20,21,22,23,52,53,72,73,74],$V1=[2,2],$V2=[6,18,19,20,21,22,23,52,53,72,73,74],$V3=[1,34],$V4=[2,3],$V5=[2,4],$V6=[2,5],$V7=[8,9,19,20,43,72],$V8=[1,48],$V9=[1,45],$Va=[1,43],$Vb=[1,47],$Vc=[8,9,19],$Vd=[13,19,20,43,72],$Ve=[2,73],$Vf=[2,74],$Vg=[2,77],$Vh=[2,78],$Vi=[8,9,19,20,52,53,55,57,58,59,65,66,67,68,69,70,72,73,74],$Vj=[2,52],$Vk=[2,75],$Vl=[2,76],$Vm=[1,61],$Vn=[1,62],$Vo=[8,9,19,20,52,53,57,58,59,65,66,67,68,69,70,72,73,74],$Vp=[1,77],$Vq=[1,78],$Vr=[1,94],$Vs=[1,84],$Vt=[1,93],$Vu=[8,9,20],$Vv=[1,115],$Vw=[1,116],$Vx=[1,127],$Vy=[1,117],$Vz=[1,121],$VA=[1,129],$VB=[1,130],$VC=[1,131],$VD=[1,132],$VE=[1,133],$VF=[1,134],$VG=[1,135],$VH=[1,136],$VI=[1,137],$VJ=[1,126],$VK=[1,119],$VL=[1,120],$VM=[2,49],$VN=[1,155],$VO=[1,145],$VP=[1,154],$VQ=[13,37],$VR=[2,30],$VS=[8,9,13,37,41],$VT=[2,41],$VU=[2,42],$VV=[2,43],$VW=[2,44],$VX=[2,45],$VY=[2,46],$VZ=[2,47],$V_=[2,48],$V$=[2,65],$V01=[2,59],$V11=[2,60],$V21=[2,61],$V31=[2,67],$V41=[2,68],$V51=[8,9,13,37,41,63,64],$V61=[2,69],$V71=[2,70],$V81=[2,71],$V91=[2,72],$Va1=[2,51],$Vb1=[8,9,19,20,52,53,55,57,58,59,63,64,65,66,67,68,69,70,72,73,74],$Vc1=[37,51],$Vd1=[8,9,37,41,51],$Ve1=[8,9,37,41,51,63,64],$Vf1=[2,25],$Vg1=[13,37,41],$Vh1=[2,34],$Vi1=[2,62],$Vj1=[2,66],$Vk1=[2,63],$Vl1=[37,41,51],$Vm1=[2,31],$Vn1=[8,9,13,19,20,37,43,72],$Vo1=[2,32],$Vp1=[2,64],$Vq1=[8,9,19,20,37,43,51,72],$Vr1=[2,27],$Vs1=[2,35],$Vt1=[2,29],$Vu1=[2,28],$Vv1=[1,253],$Vw1=[1,243],$Vx1=[1,252],$Vy1=[1,281],$Vz1=[1,271],$VA1=[1,280],$VB1=[1,309],$VC1=[1,299],$VD1=[1,308],$VE1=[1,344],$VF1=[1,334],$VG1=[1,343],$VH1=[2,26],$VI1=[2,33],$VJ1=[1,428],$VK1=[1,418],$VL1=[1,427],$VM1=[1,455],$VN1=[1,445],$VO1=[1,454];
        const o = JisonParser.expandParseTable;
        this.table = [o($V0,$V1,{3:1,4:2}),{1:[3]},o($V2,[2,6],{5:3,7:4,8:[1,5],9:[1,6]}),{6:[1,7],10:8,11:9,12:10,14:11,15:12,16:13,17:14,18:[1,18],19:[1,33],20:[1,26],21:[1,19],22:[1,20],23:[1,21],24:15,26:16,27:17,29:24,30:25,44:22,45:23,50:31,52:$V3,53:[1,30],71:27,72:[1,32],73:[1,28],74:[1,29]},o($V0,$V4),o($V0,$V5),o($V0,$V6),{1:[2,1]},o($V0,$V1,{4:35}),o($V0,[2,8]),{13:[1,36]},o($V0,[2,10]),o($V0,[2,11]),o($V0,[2,12]),o($V0,[2,13]),o($V7,$V1,{4:37}),o($V7,$V1,{4:38}),{13:[2,23],19:$V8,20:$V9,25:40,28:39,31:41,42:42,43:$Va,44:44,71:46,72:$Vb},{19:[1,49]},{20:[1,50]},o($Vc,$V1,{4:51}),{20:[1,52]},o($V7,[2,38]),o($V7,[2,39]),o($V7,[2,21]),o($Vd,[2,22]),o($V7,$Ve),o($V7,$Vf),o($V7,$Vg),o($V7,$Vh),o($Vi,$Vj,{54:53}),{19:$V8,20:$V9,25:54,31:55,42:42,43:$Va,44:44,71:46,72:$Vb},o($V7,$Vk),o($V7,$Vl),o([19,20,43,72],[2,50]),o($V2,[2,7],{7:56,8:[1,57],9:[1,58]}),o($V0,[2,9]),{7:60,8:$Vm,9:$Vn,19:$V8,20:$V9,25:59,31:41,42:42,43:$Va,44:44,71:46,72:$Vb},{7:60,8:$Vm,9:$Vn,19:$V8,20:$V9,25:63,31:41,42:42,43:$Va,44:44,71:46,72:$Vb},{13:[2,20]},{13:[2,24]},o($Vo,$V1,{4:64}),o($Vo,[2,36]),o($Vo,[2,37]),o($Vo,[2,40]),o($Vo,$Ve),o($Vo,$Vf),o($Vo,$Vk),o($Vo,$Vl),{20:[1,65]},{13:[1,66]},{7:68,8:[1,69],9:[1,70],19:[1,67]},o($V0,[2,17]),o($Vi,$V1,{4:71}),{51:[1,72]},o($Vo,$V1,{4:73}),o($V0,$V4),o($V0,$V5),o($V0,$V6),{13:[2,18]},o($V7,$V4),o($V7,$V5),o($V7,$V6),{13:[2,19]},{7:75,8:$Vp,9:$Vq,19:$Vr,20:$Vs,29:81,30:82,32:74,38:76,44:79,45:80,46:83,47:90,48:91,49:92,50:89,52:$V3,53:[1,88],57:[1,96],58:[1,97],59:[1,98],60:95,65:[1,99],66:[1,100],67:[1,101],68:[1,102],69:[1,103],70:[1,104],71:85,72:$Vt,73:[1,86],74:[1,87]},{13:[1,105]},o($V0,[2,15]),o($Vu,$V1,{4:106}),o($Vc,$V4),o($Vc,$V5),o($Vc,$V6),{7:109,8:$Vv,9:$Vw,19:$Vx,20:$Vy,29:112,30:113,44:110,45:111,46:114,47:123,48:124,49:125,50:122,52:$V3,53:$Vz,55:[1,107],56:108,57:$VA,58:$VB,59:$VC,60:128,65:$VD,66:$VE,67:$VF,68:$VG,69:$VH,70:$VI,71:118,72:$VJ,73:$VK,74:$VL},o($Vd,$VM),{7:75,8:$Vp,9:$Vq,19:$VN,20:$VO,29:142,30:143,32:138,38:139,44:140,45:141,46:144,47:151,48:152,49:153,50:150,52:$V3,53:[1,149],57:[1,157],58:[1,158],59:[1,159],60:156,65:[1,160],66:[1,161],67:[1,162],68:[1,163],69:[1,164],70:[1,165],71:146,72:$VP,73:[1,147],74:[1,148]},o($VQ,$VR,{33:166}),o($Vo,$V4),o($VS,$V1,{4:167}),o($Vo,$V5),o($Vo,$V6),o($VS,$VT),o($VS,$VU),o($VS,$VV),o($VS,$VW),o($VS,$VX),o($VS,$Ve),o($VS,$Vf),o($VS,$Vg),o($VS,$Vh),o($Vi,$Vj,{54:168}),{19:$V8,20:$V9,25:169,31:55,42:42,43:$Va,44:44,71:46,72:$Vb},o($VS,$VY),o($VS,$VZ),o($VS,$V_),o($VS,$Vk),o($VS,$Vl),o($VS,$V$,{61:170,62:171,63:[1,172],64:[1,173]}),o($VS,$V01),o($VS,$V11),o($VS,$V21),o($VS,$V31),o($VS,$V41),o($V51,$V61),o($V51,$V71),o($V51,$V81),o($V51,$V91),o($V0,[2,14]),{7:175,8:[1,176],9:[1,177],20:[1,174]},o($V7,$Va1),o($Vi,[2,53]),o($Vi,$V4),o($Vi,[2,54]),o($Vi,[2,55]),o($Vi,[2,56]),o($Vi,[2,57]),o($Vi,[2,58]),o($Vi,$V5),o($Vi,$V6),o($Vi,$Ve),o($Vi,$Vf),o($Vi,$Vg),o($Vi,$Vh),o($Vi,$Vj,{54:178}),{19:$V8,20:$V9,25:179,31:55,42:42,43:$Va,44:44,71:46,72:$Vb},o($Vi,$VY),o($Vi,$VZ),o($Vi,$V_),o($Vi,$Vk),o($Vi,$Vl),o($Vi,$V$,{61:180,62:181,63:[1,182],64:[1,183]}),o($Vi,$V01),o($Vi,$V11),o($Vi,$V21),o($Vi,$V31),o($Vi,$V41),o($Vb1,$V61),o($Vb1,$V71),o($Vb1,$V81),o($Vb1,$V91),o($Vc1,$VR,{33:184}),o($Vd1,$V1,{4:185}),o($Vd1,$VT),o($Vd1,$VU),o($Vd1,$VV),o($Vd1,$VW),o($Vd1,$VX),o($Vd1,$Ve),o($Vd1,$Vf),o($Vd1,$Vg),o($Vd1,$Vh),o($Vi,$Vj,{54:186}),{19:$V8,20:$V9,25:187,31:55,42:42,43:$Va,44:44,71:46,72:$Vb},o($Vd1,$VY),o($Vd1,$VZ),o($Vd1,$V_),o($Vd1,$Vk),o($Vd1,$Vl),o($Vd1,$V$,{61:188,62:189,63:[1,190],64:[1,191]}),o($Vd1,$V01),o($Vd1,$V11),o($Vd1,$V21),o($Vd1,$V31),o($Vd1,$V41),o($Ve1,$V61),o($Ve1,$V71),o($Ve1,$V81),o($Ve1,$V91),{13:$Vf1,36:192,37:[1,193]},o($Vg1,$Vh1,{39:194,7:195,8:[1,196],9:[1,197]}),o($Vi,$V1,{4:198}),{51:[1,199]},o($VS,$Vi1),o($VS,$Vj1),o($VS,$Vk1),{19:$Vr,20:$Vs,44:200,71:85,72:$Vt},o($V0,[2,16]),o($Vu,$V4),o($Vu,$V5),o($Vu,$V6),o($Vi,$V1,{4:201}),{51:[1,202]},o($Vi,$Vi1),o($Vi,$Vj1),o($Vi,$Vk1),{19:$Vx,20:$Vy,44:203,71:118,72:$VJ},{36:204,37:[1,205],51:$Vf1},o($Vl1,$Vh1,{39:206,7:207,8:[1,208],9:[1,209]}),o($Vi,$V1,{4:210}),{51:[1,211]},o($Vd1,$Vi1),o($Vd1,$Vj1),o($Vd1,$Vk1),{19:$VN,20:$VO,44:212,71:146,72:$VP},o($VQ,$Vm1),o($Vn1,$V1,{4:213}),o($VQ,$Vo1,{40:214,41:[1,215]}),o($VS,$V4),o($VS,$V5),o($VS,$V6),{7:109,8:$Vv,9:$Vw,19:$Vx,20:$Vy,29:112,30:113,44:110,45:111,46:114,47:123,48:124,49:125,50:122,52:$V3,53:$Vz,55:[1,216],56:108,57:$VA,58:$VB,59:$VC,60:128,65:$VD,66:$VE,67:$VF,68:$VG,69:$VH,70:$VI,71:118,72:$VJ,73:$VK,74:$VL},o($VS,$VM),o($VS,$Vp1),{7:109,8:$Vv,9:$Vw,19:$Vx,20:$Vy,29:112,30:113,44:110,45:111,46:114,47:123,48:124,49:125,50:122,52:$V3,53:$Vz,55:[1,217],56:108,57:$VA,58:$VB,59:$VC,60:128,65:$VD,66:$VE,67:$VF,68:$VG,69:$VH,70:$VI,71:118,72:$VJ,73:$VK,74:$VL},o($Vi,$VM),o($Vi,$Vp1),o($Vc1,$Vm1),o($Vq1,$V1,{4:218}),o($Vc1,$Vo1,{40:219,41:[1,220]}),o($Vd1,$V4),o($Vd1,$V5),o($Vd1,$V6),{7:109,8:$Vv,9:$Vw,19:$Vx,20:$Vy,29:112,30:113,44:110,45:111,46:114,47:123,48:124,49:125,50:122,52:$V3,53:$Vz,55:[1,221],56:108,57:$VA,58:$VB,59:$VC,60:128,65:$VD,66:$VE,67:$VF,68:$VG,69:$VH,70:$VI,71:118,72:$VJ,73:$VK,74:$VL},o($Vd1,$VM),o($Vd1,$Vp1),o($VQ,$Vr1,{42:42,44:44,71:46,35:222,7:223,34:224,31:227,8:[1,225],9:[1,226],19:$V8,20:$V9,43:$Va,72:$Vb}),o($Vg1,$Vs1),o($Vo,$V1,{4:228}),o($VS,$Va1),o($Vi,$Va1),o($Vc1,$Vr1,{42:42,44:44,71:46,35:229,7:230,34:231,31:234,8:[1,232],9:[1,233],19:$V8,20:$V9,43:$Va,72:$Vb}),o($Vl1,$Vs1),o($Vo,$V1,{4:235}),o($Vd1,$Va1),o($VQ,$Vt1),o($Vn1,$V4),o($VQ,$Vu1),o($Vn1,$V5),o($Vn1,$V6),o($Vo,$V1,{4:236}),{7:75,8:$Vp,9:$Vq,19:$Vv1,20:$Vw1,29:240,30:241,38:237,44:238,45:239,46:242,47:249,48:250,49:251,50:248,52:$V3,53:[1,247],57:[1,255],58:[1,256],59:[1,257],60:254,65:[1,258],66:[1,259],67:[1,260],68:[1,261],69:[1,262],70:[1,263],71:244,72:$Vx1,73:[1,245],74:[1,246]},o($Vc1,$Vt1),o($Vq1,$V4),o($Vc1,$Vu1),o($Vq1,$V5),o($Vq1,$V6),o($Vo,$V1,{4:264}),{7:75,8:$Vp,9:$Vq,19:$Vy1,20:$Vz1,29:268,30:269,38:265,44:266,45:267,46:270,47:277,48:278,49:279,50:276,52:$V3,53:[1,275],57:[1,283],58:[1,284],59:[1,285],60:282,65:[1,286],66:[1,287],67:[1,288],68:[1,289],69:[1,290],70:[1,291],71:272,72:$VA1,73:[1,273],74:[1,274]},{7:75,8:$Vp,9:$Vq,19:$VB1,20:$VC1,29:296,30:297,32:292,38:293,44:294,45:295,46:298,47:305,48:306,49:307,50:304,52:$V3,53:[1,303],57:[1,311],58:[1,312],59:[1,313],60:310,65:[1,314],66:[1,315],67:[1,316],68:[1,317],69:[1,318],70:[1,319],71:300,72:$VD1,73:[1,301],74:[1,302]},o($VS,$V1,{4:320}),o($VS,$VT),o($VS,$VU),o($VS,$VV),o($VS,$VW),o($VS,$VX),o($VS,$Ve),o($VS,$Vf),o($VS,$Vg),o($VS,$Vh),o($Vi,$Vj,{54:321}),{19:$V8,20:$V9,25:322,31:55,42:42,43:$Va,44:44,71:46,72:$Vb},o($VS,$VY),o($VS,$VZ),o($VS,$V_),o($VS,$Vk),o($VS,$Vl),o($VS,$V$,{61:323,62:324,63:[1,325],64:[1,326]}),o($VS,$V01),o($VS,$V11),o($VS,$V21),o($VS,$V31),o($VS,$V41),o($V51,$V61),o($V51,$V71),o($V51,$V81),o($V51,$V91),{7:75,8:$Vp,9:$Vq,19:$VE1,20:$VF1,29:331,30:332,32:327,38:328,44:329,45:330,46:333,47:340,48:341,49:342,50:339,52:$V3,53:[1,338],57:[1,346],58:[1,347],59:[1,348],60:345,65:[1,349],66:[1,350],67:[1,351],68:[1,352],69:[1,353],70:[1,354],71:335,72:$VG1,73:[1,336],74:[1,337]},o($Vd1,$V1,{4:355}),o($Vd1,$VT),o($Vd1,$VU),o($Vd1,$VV),o($Vd1,$VW),o($Vd1,$VX),o($Vd1,$Ve),o($Vd1,$Vf),o($Vd1,$Vg),o($Vd1,$Vh),o($Vi,$Vj,{54:356}),{19:$V8,20:$V9,25:357,31:55,42:42,43:$Va,44:44,71:46,72:$Vb},o($Vd1,$VY),o($Vd1,$VZ),o($Vd1,$V_),o($Vd1,$Vk),o($Vd1,$Vl),o($Vd1,$V$,{61:358,62:359,63:[1,360],64:[1,361]}),o($Vd1,$V01),o($Vd1,$V11),o($Vd1,$V21),o($Vd1,$V31),o($Vd1,$V41),o($Ve1,$V61),o($Ve1,$V71),o($Ve1,$V81),o($Ve1,$V91),o($VQ,$VH1),o($VS,$V1,{4:362}),o($VS,$VT),o($VS,$VU),o($VS,$VV),o($VS,$VW),o($VS,$VX),o($VS,$Ve),o($VS,$Vf),o($VS,$Vg),o($VS,$Vh),o($Vi,$Vj,{54:363}),{19:$V8,20:$V9,25:364,31:55,42:42,43:$Va,44:44,71:46,72:$Vb},o($VS,$VY),o($VS,$VZ),o($VS,$V_),o($VS,$Vk),o($VS,$Vl),o($VS,$V$,{61:365,62:366,63:[1,367],64:[1,368]}),o($VS,$V01),o($VS,$V11),o($VS,$V21),o($VS,$V31),o($VS,$V41),o($V51,$V61),o($V51,$V71),o($V51,$V81),o($V51,$V91),o($Vg1,$VI1,{7:369,8:[1,370],9:[1,371]}),o($Vi,$V1,{4:372}),{51:[1,373]},o($VS,$Vi1),o($VS,$Vj1),o($VS,$Vk1),{19:$Vv1,20:$Vw1,44:374,71:244,72:$Vx1},o($Vc1,$VH1),o($Vd1,$V1,{4:375}),o($Vd1,$VT),o($Vd1,$VU),o($Vd1,$VV),o($Vd1,$VW),o($Vd1,$VX),o($Vd1,$Ve),o($Vd1,$Vf),o($Vd1,$Vg),o($Vd1,$Vh),o($Vi,$Vj,{54:376}),{19:$V8,20:$V9,25:377,31:55,42:42,43:$Va,44:44,71:46,72:$Vb},o($Vd1,$VY),o($Vd1,$VZ),o($Vd1,$V_),o($Vd1,$Vk),o($Vd1,$Vl),o($Vd1,$V$,{61:378,62:379,63:[1,380],64:[1,381]}),o($Vd1,$V01),o($Vd1,$V11),o($Vd1,$V21),o($Vd1,$V31),o($Vd1,$V41),o($Ve1,$V61),o($Ve1,$V71),o($Ve1,$V81),o($Ve1,$V91),o($Vl1,$VI1,{7:382,8:[1,383],9:[1,384]}),o($Vi,$V1,{4:385}),{51:[1,386]},o($Vd1,$Vi1),o($Vd1,$Vj1),o($Vd1,$Vk1),{19:$Vy1,20:$Vz1,44:387,71:272,72:$VA1},o($Vg1,$Vh1,{39:388,7:389,8:[1,390],9:[1,391]}),o($Vi,$V1,{4:392}),{51:[1,393]},o($VS,$Vi1),o($VS,$Vj1),o($VS,$Vk1),{19:$VB1,20:$VC1,44:394,71:300,72:$VD1},o($VS,$V4),o($VS,$V5),o($VS,$V6),{7:109,8:$Vv,9:$Vw,19:$Vx,20:$Vy,29:112,30:113,44:110,45:111,46:114,47:123,48:124,49:125,50:122,52:$V3,53:$Vz,55:[1,395],56:108,57:$VA,58:$VB,59:$VC,60:128,65:$VD,66:$VE,67:$VF,68:$VG,69:$VH,70:$VI,71:118,72:$VJ,73:$VK,74:$VL},o($VS,$VM),o($VS,$Vp1),o($Vl1,$Vh1,{39:396,7:397,8:[1,398],9:[1,399]}),o($Vi,$V1,{4:400}),{51:[1,401]},o($Vd1,$Vi1),o($Vd1,$Vj1),o($Vd1,$Vk1),{19:$VE1,20:$VF1,44:402,71:335,72:$VG1},o($Vd1,$V4),o($Vd1,$V5),o($Vd1,$V6),{7:109,8:$Vv,9:$Vw,19:$Vx,20:$Vy,29:112,30:113,44:110,45:111,46:114,47:123,48:124,49:125,50:122,52:$V3,53:$Vz,55:[1,403],56:108,57:$VA,58:$VB,59:$VC,60:128,65:$VD,66:$VE,67:$VF,68:$VG,69:$VH,70:$VI,71:118,72:$VJ,73:$VK,74:$VL},o($Vd1,$VM),o($Vd1,$Vp1),o($VQ,$Vo1,{40:404,41:[1,405]}),o($VS,$V4),o($VS,$V5),o($VS,$V6),{7:109,8:$Vv,9:$Vw,19:$Vx,20:$Vy,29:112,30:113,44:110,45:111,46:114,47:123,48:124,49:125,50:122,52:$V3,53:$Vz,55:[1,406],56:108,57:$VA,58:$VB,59:$VC,60:128,65:$VD,66:$VE,67:$VF,68:$VG,69:$VH,70:$VI,71:118,72:$VJ,73:$VK,74:$VL},o($VS,$VM),o($VS,$Vp1),o($VS,$Va1),o($Vc1,$Vo1,{40:407,41:[1,408]}),o($Vd1,$V4),o($Vd1,$V5),o($Vd1,$V6),{7:109,8:$Vv,9:$Vw,19:$Vx,20:$Vy,29:112,30:113,44:110,45:111,46:114,47:123,48:124,49:125,50:122,52:$V3,53:$Vz,55:[1,409],56:108,57:$VA,58:$VB,59:$VC,60:128,65:$VD,66:$VE,67:$VF,68:$VG,69:$VH,70:$VI,71:118,72:$VJ,73:$VK,74:$VL},o($Vd1,$VM),o($Vd1,$Vp1),o($Vd1,$Va1),o($Vg1,$Vs1),o($Vo,$V1,{4:410}),o($VS,$Va1),o($Vl1,$Vs1),o($Vo,$V1,{4:411}),o($Vd1,$Va1),{7:75,8:$Vp,9:$Vq,19:$VJ1,20:$VK1,29:415,30:416,38:412,44:413,45:414,46:417,47:424,48:425,49:426,50:423,52:$V3,53:[1,422],57:[1,430],58:[1,431],59:[1,432],60:429,65:[1,433],66:[1,434],67:[1,435],68:[1,436],69:[1,437],70:[1,438],71:419,72:$VL1,73:[1,420],74:[1,421]},{7:75,8:$Vp,9:$Vq,19:$VM1,20:$VN1,29:442,30:443,38:439,44:440,45:441,46:444,47:451,48:452,49:453,50:450,52:$V3,53:[1,449],57:[1,457],58:[1,458],59:[1,459],60:456,65:[1,460],66:[1,461],67:[1,462],68:[1,463],69:[1,464],70:[1,465],71:446,72:$VO1,73:[1,447],74:[1,448]},o($VS,$V1,{4:466}),o($VS,$VT),o($VS,$VU),o($VS,$VV),o($VS,$VW),o($VS,$VX),o($VS,$Ve),o($VS,$Vf),o($VS,$Vg),o($VS,$Vh),o($Vi,$Vj,{54:467}),{19:$V8,20:$V9,25:468,31:55,42:42,43:$Va,44:44,71:46,72:$Vb},o($VS,$VY),o($VS,$VZ),o($VS,$V_),o($VS,$Vk),o($VS,$Vl),o($VS,$V$,{61:469,62:470,63:[1,471],64:[1,472]}),o($VS,$V01),o($VS,$V11),o($VS,$V21),o($VS,$V31),o($VS,$V41),o($V51,$V61),o($V51,$V71),o($V51,$V81),o($V51,$V91),o($Vd1,$V1,{4:473}),o($Vd1,$VT),o($Vd1,$VU),o($Vd1,$VV),o($Vd1,$VW),o($Vd1,$VX),o($Vd1,$Ve),o($Vd1,$Vf),o($Vd1,$Vg),o($Vd1,$Vh),o($Vi,$Vj,{54:474}),{19:$V8,20:$V9,25:475,31:55,42:42,43:$Va,44:44,71:46,72:$Vb},o($Vd1,$VY),o($Vd1,$VZ),o($Vd1,$V_),o($Vd1,$Vk),o($Vd1,$Vl),o($Vd1,$V$,{61:476,62:477,63:[1,478],64:[1,479]}),o($Vd1,$V01),o($Vd1,$V11),o($Vd1,$V21),o($Vd1,$V31),o($Vd1,$V41),o($Ve1,$V61),o($Ve1,$V71),o($Ve1,$V81),o($Ve1,$V91),o($Vg1,$VI1,{7:480,8:[1,481],9:[1,482]}),o($Vi,$V1,{4:483}),{51:[1,484]},o($VS,$Vi1),o($VS,$Vj1),o($VS,$Vk1),{19:$VJ1,20:$VK1,44:485,71:419,72:$VL1},o($Vl1,$VI1,{7:486,8:[1,487],9:[1,488]}),o($Vi,$V1,{4:489}),{51:[1,490]},o($Vd1,$Vi1),o($Vd1,$Vj1),o($Vd1,$Vk1),{19:$VM1,20:$VN1,44:491,71:446,72:$VO1},o($VS,$V4),o($VS,$V5),o($VS,$V6),{7:109,8:$Vv,9:$Vw,19:$Vx,20:$Vy,29:112,30:113,44:110,45:111,46:114,47:123,48:124,49:125,50:122,52:$V3,53:$Vz,55:[1,492],56:108,57:$VA,58:$VB,59:$VC,60:128,65:$VD,66:$VE,67:$VF,68:$VG,69:$VH,70:$VI,71:118,72:$VJ,73:$VK,74:$VL},o($VS,$VM),o($VS,$Vp1),o($Vd1,$V4),o($Vd1,$V5),o($Vd1,$V6),{7:109,8:$Vv,9:$Vw,19:$Vx,20:$Vy,29:112,30:113,44:110,45:111,46:114,47:123,48:124,49:125,50:122,52:$V3,53:$Vz,55:[1,493],56:108,57:$VA,58:$VB,59:$VC,60:128,65:$VD,66:$VE,67:$VF,68:$VG,69:$VH,70:$VI,71:118,72:$VJ,73:$VK,74:$VL},o($Vd1,$VM),o($Vd1,$Vp1),o($VS,$Va1),o($Vd1,$Va1)];
        this.defaultActions = {7:[2,1],39:[2,20],40:[2,24],59:[2,18],63:[2,19]};
    }
    performAction (yytext, yyleng, yylineno, yy, yystate /* action[1] */, $$ /* vstack */, _$ /* lstack */) {
/* this == yyval */
          const $0 = $$.length - 1;
        switch (yystate) {
case 1:

        return { statementList: $$[$0-2].concat($$[$0-1], $$[$0]) };
      
break;
case 2: case 6: case 27: case 30: case 34: case 52:
this.$ = [];
break;
case 3:
this.$ = $$[$0-1].concat([$$[$0]]);
break;
case 7:
this.$ = $$[$0-2].concat($$[$0-1], $$[$0]);
break;
case 9:
this.$ = $$[$0-1].concat([$$[$0]]);;
break;
case 14:

        yy._prefixes[$$[$0-2].slice(0, -1)] = $$[$0-1];
      
break;
case 15:

        yy._setBase(yy._base === null ||
                    absoluteIRI.test($$[$0-1].slice(1, -1)) ? $$[$0-1].slice(1, -1) : yy._resolveIRI($$[$0-1].slice(1, -1)));
      
break;
case 16:

        yy._prefixes[$$[$0-2].value] = $$[$0].value;
        this.$ = [{ "type": "sparqlPrefix", keyword: $$[$0-4], ws1: $$[$0-3], prefix: $$[$0-2], ws2: $$[$0-1], namespace: $$[$0] }].concat(yy.getWhitespace());
      
break;
case 17:

        yy._setBase(yy._base === null ||
                    absoluteIRI.test($$[$0].slice(1, -1)) ? $$[$0].slice(1, -1) : yy._resolveIRI($$[$0].slice(1, -1)));
      
break;
case 18:
this.$ = yy.finishSubject([{ type: "subject_predicateObjectList", subject: $$[$0-2], ws1: $$[$0-1], predicateObjectList: $$[$0]}].concat(yy.getWhitespace()));
break;
case 19:
this.$ = yy.finishSubject([{ type: "collection_predicateObjectList", collection: $$[$0-2], ws1: $$[$0-1], predicateObjectList: $$[$0]}].concat(yy.getWhitespace()));
break;
case 20:
this.$ = yy.finishSubject($$[$0-1].concat($$[$0])) // blankNodePropertyList _QpredicateObjectList_E_Opt;
break;
case 21:
 yy.setSubject($$[$0].node); this.$ = $$[$0].elts; // collection_SUBJECT
 
break;
case 22:
 yy.setSubject($$[$0].node); this.$ = $$[$0].elts.concat(yy.getWhitespace()); // blankNodePropertyList_SUBJECT
 
break;
case 23:
this.$ = yy.getWhitespace();
break;
case 24:
this.$ = $$[$0].concat(yy.getWhitespace());;
break;
case 25:
this.$ = [{ type: "verb_objectList", verb: $$[$0-3], ws1: $$[$0-2], objectList: $$[$0-1] }].concat($$[$0]) // verb objectList _Q_O_QGT_SEMI_E_S_Qverb_E_S_QobjectList_E_Opt_C_E_Star;
break;
case 26:
this.$ = [{ type: "verb_objectList", verb: $$[$0-2], ws1: $$[$0-1], objectList: $$[$0] }];
break;
case 29:
this.$ = [$$[$0-2]].concat($$[$0-1], $$[$0]);
break;
case 31:
this.$ = $$[$0-1].concat($$[$0]) // Q_O_QGT_SEMI_E_S_Qverb_E_S_QobjectList_E_Opt_C_E_Star _O_QGT_SEMI_E_S_Qverb_E_S_QobjectList_E_Opt_C;
break;
case 32:
this.$ = yy.finishObjectList($$[$0-2].concat($$[$0-1], $$[$0])) // object _Q_O_QGT_COMMA_E_S_Qobject_E_C_E_Star;
break;
case 33:
this.$ = [$$[$0-3]].concat($$[$0-2], $$[$0-1], $$[$0]);
break;
case 35:
this.$ = $$[$0-1].concat($$[$0]) // Q_O_QGT_COMMA_E_S_Qobject_E_C_E_Star _O_QGT_COMMA_E_S_Qobject_E_C;
break;
case 36:
this.$ = yy.setPredicate($$[$0]);
break;
case 37:
this.$ = yy.setPredicate({ "type": "a", "origText": "a" }) // left is a token, right a const;
break;
case 38: case 39:
this.$ = yy.setSubject($$[$0]);
break;
case 41: case 42: case 45:
this.$ = [yy.finishTriple($$[$0])];
break;
case 43:
this.$ = $$[$0] // object collection;
break;
case 44:
 yy.finishTriple($$[$0].node); this.$ = $$[$0].elts; 
break;
case 49:
this.$ = yy.finishBlankNodePropertyList($$[$0-2], $$[$0-1].concat($$[$0], $$[$01]), $$[$02]);
break;
case 50:
this.$ = yy.startBlankNodePropertyList($$[$0], $$[$01]);;
break;
case 51:
this.$ = yy.makeFirstRest($$[$0-3], $$[$0-2], $$[$0-1], $$[$0]);
break;
case 53:
this.$ = $$[$0-2].concat({ws0: $$[$0-1], node: $$[$0].node, nested: $$[$0].nested}) // Qobject_E_Star object -- collectionObject;
break;
case 54: case 55: case 58:
this.$ = {node: $$[$0], nested: []};
break;
case 56:
this.$ = $$[$0] // collection collection;
break;
case 57:
this.$ = {node: $$[$0][0].subject, nested: $$[$0]} // collection blankNodePropertyList;
break;
case 59:
this.$ = yy.createTypedLiteral($$[$0], XSD_INTEGER);
break;
case 60:
this.$ = yy.createTypedLiteral($$[$0], XSD_DECIMAL);
break;
case 61:
this.$ = yy.createTypedLiteral($$[$0], XSD_DOUBLE);
break;
case 62:
this.$ = yy.createParsedLiteral($$[$0].type, $$[$0-1], $$[$0].attrs);
break;
case 63:
this.$ = { type: "langTagLiteral", attrs: { language: $$[$0] } };
break;
case 64:
this.$ = { type: "datatypedLiteral", attrs: { datatype: { type: "ParsedDatatype", value: $$[$01].value, token: $$[$0-1], ws1: $$[$0], iri: $$[$01] } } };
break;
case 65:
this.$ = { type: "simpleLiteral", attrs: {} };
break;
case 67: case 68:
this.$ = yy.createTypedLiteral($$[$0], XSD_BOOLEAN);
break;
        }
    }
}

// Export module
Object.defineProperty(exports, "__esModule", { value: true });
exports.TurtleJisonParser = TurtleJisonParser;


/* generated by @ts-jison/lexer-generator 0.4.1-alpha.2 */
const { JisonLexer } = require('@ts-jison/lexer');

class TurtleJisonLexer extends JisonLexer {
    constructor (yy = {}) {
        super(yy);
        this.options = {"moduleName":"TurtleJison"};
        this.rules = [
        /^(?:\s+)/,
        /^(?:#[^\u000a\u000d]*|\/\*(?:[^*]|\*(?:[^/]|\\\/))*\*\/)/,
        /^(?:\.)/,
        /^(?:;)/,
        /^(?:,)/,
        /^(?:\[)/,
        /^(?:\])/,
        /^(?:\()/,
        /^(?:\))/,
        /^(?:\^\^)/,
        /^(?:true\b)/,
        /^(?:false\b)/,
        /^(?:[Pp][Rr][Ee][Ff][Ii][Xx])/,
        /^(?:[Bb][Aa][Ss][Ee])/,
        /^(?:@base\b)/,
        /^(?:@prefix\b)/,
        /^(?:<(?:[^\u0000-\u0020<>\"{}|^`\\]|\\u(?:[0-9]|[A-F]|[a-f])(?:[0-9]|[A-F]|[a-f])(?:[0-9]|[A-F]|[a-f])(?:[0-9]|[A-F]|[a-f])|\\U(?:[0-9]|[A-F]|[a-f])(?:[0-9]|[A-F]|[a-f])(?:[0-9]|[A-F]|[a-f])(?:[0-9]|[A-F]|[a-f])(?:[0-9]|[A-F]|[a-f])(?:[0-9]|[A-F]|[a-f])(?:[0-9]|[A-F]|[a-f])(?:[0-9]|[A-F]|[a-f]))*>)/,
        /^(?:(?:(?:[A-Z]|[a-z]|[\u00c0-\u00d6]|[\u00d8-\u00f6]|[\u00f8-\u02ff]|[\u0370-\u037d]|[\u037f-\u1fff]|[\u200c-\u200d]|[\u2070-\u218f]|[\u2c00-\u2fef]|[\u3001-\ud7ff]|[\uf900-\ufdcf]|[\ufdf0-\ufffd]|[\uD800-\uDB7F][\uDC00-\uDFFF])(?:(?:[A-Z]|[a-z]|[\u00c0-\u00d6]|[\u00d8-\u00f6]|[\u00f8-\u02ff]|[\u0370-\u037d]|[\u037f-\u1fff]|[\u200c-\u200d]|[\u2070-\u218f]|[\u2c00-\u2fef]|[\u3001-\ud7ff]|[\uf900-\ufdcf]|[\ufdf0-\ufffd]|[\uD800-\uDB7F][\uDC00-\uDFFF]|_|_|-|[0-9]|[\u00b7]|[\u0300-\u036f]|[\u203f-\u2040]|\.)*(?:[A-Z]|[a-z]|[\u00c0-\u00d6]|[\u00d8-\u00f6]|[\u00f8-\u02ff]|[\u0370-\u037d]|[\u037f-\u1fff]|[\u200c-\u200d]|[\u2070-\u218f]|[\u2c00-\u2fef]|[\u3001-\ud7ff]|[\uf900-\ufdcf]|[\ufdf0-\ufffd]|[\uD800-\uDB7F][\uDC00-\uDFFF]|_|_|-|[0-9]|[\u00b7]|[\u0300-\u036f]|[\u203f-\u2040]))?)?:(?:[A-Z]|[a-z]|[\u00c0-\u00d6]|[\u00d8-\u00f6]|[\u00f8-\u02ff]|[\u0370-\u037d]|[\u037f-\u1fff]|[\u200c-\u200d]|[\u2070-\u218f]|[\u2c00-\u2fef]|[\u3001-\ud7ff]|[\uf900-\ufdcf]|[\ufdf0-\ufffd]|[\uD800-\uDB7F][\uDC00-\uDFFF]|_|_|:|[0-9]|%(?:[0-9]|[A-F]|[a-f])(?:[0-9]|[A-F]|[a-f])|\\(?:_|~|\.|-|!|\$|&|'|\(|\)|\*|\+|,|;|=|\/|\?|#|@|%))(?:[A-Z]|[a-z]|[\u00c0-\u00d6]|[\u00d8-\u00f6]|[\u00f8-\u02ff]|[\u0370-\u037d]|[\u037f-\u1fff]|[\u200c-\u200d]|[\u2070-\u218f]|[\u2c00-\u2fef]|[\u3001-\ud7ff]|[\uf900-\ufdcf]|[\ufdf0-\ufffd]|[\uD800-\uDB7F][\uDC00-\uDFFF]|_|_|-|[0-9]|[\u00b7]|[\u0300-\u036f]|[\u203f-\u2040]|\.|:|%(?:[0-9]|[A-F]|[a-f])(?:[0-9]|[A-F]|[a-f])|\\(?:_|~|\.|-|!|\$|&|'|\(|\)|\*|\+|,|;|=|\/|\?|#|@|%))*)/,
        /^(?:(?:(?:[A-Z]|[a-z]|[\u00c0-\u00d6]|[\u00d8-\u00f6]|[\u00f8-\u02ff]|[\u0370-\u037d]|[\u037f-\u1fff]|[\u200c-\u200d]|[\u2070-\u218f]|[\u2c00-\u2fef]|[\u3001-\ud7ff]|[\uf900-\ufdcf]|[\ufdf0-\ufffd]|[\uD800-\uDB7F][\uDC00-\uDFFF])(?:(?:[A-Z]|[a-z]|[\u00c0-\u00d6]|[\u00d8-\u00f6]|[\u00f8-\u02ff]|[\u0370-\u037d]|[\u037f-\u1fff]|[\u200c-\u200d]|[\u2070-\u218f]|[\u2c00-\u2fef]|[\u3001-\ud7ff]|[\uf900-\ufdcf]|[\ufdf0-\ufffd]|[\uD800-\uDB7F][\uDC00-\uDFFF]|_|_|-|[0-9]|[\u00b7]|[\u0300-\u036f]|[\u203f-\u2040]|\.)*(?:[A-Z]|[a-z]|[\u00c0-\u00d6]|[\u00d8-\u00f6]|[\u00f8-\u02ff]|[\u0370-\u037d]|[\u037f-\u1fff]|[\u200c-\u200d]|[\u2070-\u218f]|[\u2c00-\u2fef]|[\u3001-\ud7ff]|[\uf900-\ufdcf]|[\ufdf0-\ufffd]|[\uD800-\uDB7F][\uDC00-\uDFFF]|_|_|-|[0-9]|[\u00b7]|[\u0300-\u036f]|[\u203f-\u2040]))?)?:)/,
        /^(?:_:(?:[A-Z]|[a-z]|[\u00c0-\u00d6]|[\u00d8-\u00f6]|[\u00f8-\u02ff]|[\u0370-\u037d]|[\u037f-\u1fff]|[\u200c-\u200d]|[\u2070-\u218f]|[\u2c00-\u2fef]|[\u3001-\ud7ff]|[\uf900-\ufdcf]|[\ufdf0-\ufffd]|[\uD800-\uDB7F][\uDC00-\uDFFF]|_|_|[0-9])(?:(?:[A-Z]|[a-z]|[\u00c0-\u00d6]|[\u00d8-\u00f6]|[\u00f8-\u02ff]|[\u0370-\u037d]|[\u037f-\u1fff]|[\u200c-\u200d]|[\u2070-\u218f]|[\u2c00-\u2fef]|[\u3001-\ud7ff]|[\uf900-\ufdcf]|[\ufdf0-\ufffd]|[\uD800-\uDB7F][\uDC00-\uDFFF]|_|_|-|[0-9]|[\u00b7]|[\u0300-\u036f]|[\u203f-\u2040]|\.)*(?:[A-Z]|[a-z]|[\u00c0-\u00d6]|[\u00d8-\u00f6]|[\u00f8-\u02ff]|[\u0370-\u037d]|[\u037f-\u1fff]|[\u200c-\u200d]|[\u2070-\u218f]|[\u2c00-\u2fef]|[\u3001-\ud7ff]|[\uf900-\ufdcf]|[\ufdf0-\ufffd]|[\uD800-\uDB7F][\uDC00-\uDFFF]|_|_|-|[0-9]|[\u00b7]|[\u0300-\u036f]|[\u203f-\u2040]))?)/,
        /^(?:@[A-Za-z]+(?:-[0-9A-Za-z]+)*)/,
        /^(?:[+-]?[0-9]+)/,
        /^(?:[+-]?[0-9]*\.[0-9]+)/,
        /^(?:[+-]?(?:[0-9]+\.[0-9]*[Ee][+-]?[0-9]+|\.?[0-9]+[Ee][+-]?[0-9]+))/,
        /^(?:'(?:[^\u0027\u005c\u000a\u000d]|\\[\"\'\\bfnrt]|\\u(?:[0-9]|[A-F]|[a-f])(?:[0-9]|[A-F]|[a-f])(?:[0-9]|[A-F]|[a-f])(?:[0-9]|[A-F]|[a-f])|\\U(?:[0-9]|[A-F]|[a-f])(?:[0-9]|[A-F]|[a-f])(?:[0-9]|[A-F]|[a-f])(?:[0-9]|[A-F]|[a-f])(?:[0-9]|[A-F]|[a-f])(?:[0-9]|[A-F]|[a-f])(?:[0-9]|[A-F]|[a-f])(?:[0-9]|[A-F]|[a-f]))*')/,
        /^(?:"(?:[^\u0022\u005c\u000a\u000d]|\\[\"\'\\bfnrt]|\\u(?:[0-9]|[A-F]|[a-f])(?:[0-9]|[A-F]|[a-f])(?:[0-9]|[A-F]|[a-f])(?:[0-9]|[A-F]|[a-f])|\\U(?:[0-9]|[A-F]|[a-f])(?:[0-9]|[A-F]|[a-f])(?:[0-9]|[A-F]|[a-f])(?:[0-9]|[A-F]|[a-f])(?:[0-9]|[A-F]|[a-f])(?:[0-9]|[A-F]|[a-f])(?:[0-9]|[A-F]|[a-f])(?:[0-9]|[A-F]|[a-f]))*")/,
        /^(?:'''(?:(?:'|'')?(?:[^\'\\]|\\[\"\'\\bfnrt]|\\u(?:[0-9]|[A-F]|[a-f])(?:[0-9]|[A-F]|[a-f])(?:[0-9]|[A-F]|[a-f])(?:[0-9]|[A-F]|[a-f])|\\U(?:[0-9]|[A-F]|[a-f])(?:[0-9]|[A-F]|[a-f])(?:[0-9]|[A-F]|[a-f])(?:[0-9]|[A-F]|[a-f])(?:[0-9]|[A-F]|[a-f])(?:[0-9]|[A-F]|[a-f])(?:[0-9]|[A-F]|[a-f])(?:[0-9]|[A-F]|[a-f])))*''')/,
        /^(?:"""(?:(?:"|"")?(?:[^\"\\]|\\[\"\'\\bfnrt]|\\u(?:[0-9]|[A-F]|[a-f])(?:[0-9]|[A-F]|[a-f])(?:[0-9]|[A-F]|[a-f])(?:[0-9]|[A-F]|[a-f])|\\U(?:[0-9]|[A-F]|[a-f])(?:[0-9]|[A-F]|[a-f])(?:[0-9]|[A-F]|[a-f])(?:[0-9]|[A-F]|[a-f])(?:[0-9]|[A-F]|[a-f])(?:[0-9]|[A-F]|[a-f])(?:[0-9]|[A-F]|[a-f])(?:[0-9]|[A-F]|[a-f])))*""")/,
        /^(?:\\\[(?: |\\t|\\r|\\n)*\\\])/,
        /^(?:a\b)/,
        /^(?:$)/,
        /^(?:[a-zA-Z0-9_-]+)/,
        /^(?:.)/
    ];
        this.conditions = {"INITIAL":{"rules":[0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32],"inclusive":true}};
    }
    performAction (yy, yy_, $avoiding_name_collisions, YY_START) {
              let YYSTATE = YY_START;
            switch ($avoiding_name_collisions) {
    case 0:
  // space eaten by whitespace and comments
  if (yy.skipped.last_line === yy_.yylloc.first_line &&
      yy.skipped.last_column === yy_.yylloc.first_column) {
    // immediately follows a skipped span
    yy.skipped.last_line = yy_.yylloc.last_line;
    yy.skipped.last_column = yy_.yylloc.last_column;
  } else {
    // follows something else
    yy.skipped = yy_.yylloc
  };
  yy_.yytext = {type: "ws", origText: yy_.yytext};
  return 8;

      break;
    case 1:
  // space eaten by whitespace and comments
  if (yy.skipped.last_line === yy_.yylloc.first_line &&
      yy.skipped.last_column === yy_.yylloc.first_column) {
    // immediately follows a skipped span
    yy.skipped.last_line = yy_.yylloc.last_line;
    yy.skipped.last_column = yy_.yylloc.last_column;
  } else {
    // follows something else
    yy.skipped = yy_.yylloc
  };
  yy_.yytext = {type: "comment", origText: yy_.yytext};
  return 9;

      break;
    case 2:yy_.yytext = { type: "token", origText: yy_.yytext }; return 13;
    case 3:yy_.yytext = { type: "token", origText: yy_.yytext }; return 37;
    case 4:yy_.yytext = { type: "token", origText: yy_.yytext }; return 41;
    case 5:yy_.yytext = { type: "startBNode", origText: yy_.yytext }; return 52;
    case 6:yy_.yytext = { type: "endBNode", origText: yy_.yytext }; return 51;
    case 7:yy_.yytext = { type: "startCollection", origText: yy_.yytext }; return 53;
    case 8:yy_.yytext = { type: "endCollection", origText: yy_.yytext }; return 55;
    case 9:yy_.yytext = { type: "token", origText: yy_.yytext }; return 64;
    case 10:yy_.yytext = { type: "boolean", origText: yy_.yytext }; return 65;
    case 11:yy_.yytext = { type: "boolean", origText: yy_.yytext }; return 66;
    case 12:yy_.yytext = { type: "KEYWORD", origText: yy_.yytext }; return 22;
    case 13:yy_.yytext = { type: "KEYWORD", origText: yy_.yytext }; return 23;
    case 14:yy_.yytext = { type: "KEYWORD", origText: yy_.yytext }; return 21;
    case 15:yy_.yytext = { type: "KEYWORD", origText: yy_.yytext }; return 18;
    case 16:yy_.yytext = yy.createRelativeIri(yy_.yytext); return 20;
    case 17:yy_.yytext = yy.parsePName(yy_.yytext); return 72;
    case 18:yy_.yytext = yy.parsePrefix(yy_.yytext); return 19;
    case 19:yy_.yytext = yy.createBlankNode("BLANK_NODE_LABEL", yy_.yytext); return 73;
    case 20:yy_.yytext = { type: "LANGTAG", value: yy_.yytext.substring(1), origText: yy_.yytext }; return 63;
    case 21:yy_.yytext = { type: "INTEGER", value: yy_.yytext, origText: yy_.yytext }; return 57;
    case 22:yy_.yytext = { type: "DECIMAL", value: yy_.yytext, origText: yy_.yytext }; return 58;
    case 23:yy_.yytext = { type: "DOUBLE",  value: yy_.yytext, origText: yy_.yytext }; return 59;
    case 24:yy_.yytext = { type: "STRING_LITERAL1", value: yy.unescapeString(yy_.yytext, 1), origText: yy_.yytext }; return 67;
    case 25:yy_.yytext = { type: "STRING_LITERAL2", value: yy.unescapeString(yy_.yytext, 1), origText: yy_.yytext }; return 68;
    case 26:yy_.yytext = { type: "STRING_LITERAL_LONG1", value: yy.unescapeString(yy_.yytext, 3), origText: yy_.yytext }; return 69;
    case 27:yy_.yytext = { type: "STRING_LITERAL_LONG2", value: yy.unescapeString(yy_.yytext, 3), origText: yy_.yytext }; return 70;
    case 28:yy_.yytext = yy.createBlankNode("ANON", yy_.yytext); return 74;
    case 29:yy_.yytext = { type: "keyword", origText: yy_.yytext }; return 43;
    case 30:return 6;
    case 31:return 'unexpected word "'+yy_.yytext+'"';
    case 32:return 'invalid character '+yy_.yytext;
        }
    }
}


// Export module
Object.defineProperty(exports, "__esModule", { value: true });
exports.TurtleJisonLexer = TurtleJisonLexer;


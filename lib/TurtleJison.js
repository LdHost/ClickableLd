const { JisonParser, o } = require('@ts-jison/parser');
/**
 * parser generated by  @ts-jison/parser-generator 0.4.1-alpha.2
 * @returns Parser implementing JisonParserApi and a Lexer implementing JisonLexerApi.
 */

  /*
    ShEx parser in the Jison parser generator format.
  */

  const RDF = 'http://www.w3.org/1999/02/22-rdf-syntax-ns#',
      RDF_TYPE  = RDF + 'type',
      RDF_FIRST = RDF + 'first',
      RDF_REST  = RDF + 'rest',
      RDF_NIL   = RDF + 'nil',
      XSD = 'http://www.w3.org/2001/XMLSchema#',
      XSD_INTEGER  = XSD + 'integer',
      XSD_DECIMAL  = XSD + 'decimal',
      XSD_FLOAT   = XSD + 'float',
      XSD_DOUBLE   = XSD + 'double',
      XSD_BOOLEAN  = XSD + 'boolean',
      XSD_TRUE =  '"true"^^'  + XSD_BOOLEAN,
      XSD_FALSE = '"false"^^' + XSD_BOOLEAN,
      XSD_PATTERN        = XSD + 'pattern',
      XSD_MININCLUSIVE   = XSD + 'minInclusive',
      XSD_MINEXCLUSIVE   = XSD + 'minExclusive',
      XSD_MAXINCLUSIVE   = XSD + 'maxInclusive',
      XSD_MAXEXCLUSIVE   = XSD + 'maxExclusive',
      XSD_LENGTH         = XSD + 'length',
      XSD_MINLENGTH      = XSD + 'minLength',
      XSD_MAXLENGTH      = XSD + 'maxLength',
      XSD_TOTALDIGITS    = XSD + 'totalDigits',
      XSD_FRACTIONDIGITS = XSD + 'fractionDigits';

  const numericDatatypes = [
      XSD + "integer",
      XSD + "decimal",
      XSD + "float",
      XSD + "double",
      XSD + "string",
      XSD + "boolean",
      XSD + "dateTime",
      XSD + "nonPositiveInteger",
      XSD + "negativeInteger",
      XSD + "long",
      XSD + "int",
      XSD + "short",
      XSD + "byte",
      XSD + "nonNegativeInteger",
      XSD + "unsignedLong",
      XSD + "unsignedInt",
      XSD + "unsignedShort",
      XSD + "unsignedByte",
      XSD + "positiveInteger"
  ];

  const absoluteIRI = /^[a-z][a-z0-9+.-]*:/i;

class TurtleJisonParser extends JisonParser {
    constructor(yy = {}, lexer = new TurtleJisonLexer(yy)) {
        super(yy, lexer);
        this.symbols_ = {"error":2,"turtleDoc":3,"WS":4,"Qstatement_E_Star":5,"EOF":6,"statement":7,"directive":8,"triples":9,"GT_DOT":10,"prefixID":11,"base":12,"sparqlPrefix":13,"sparqlBase":14,"PREFIX":15,"PNAME_NS":16,"IRIREF":17,"BASE":18,"SPARQL_PREFIX":19,"SPARQL_BASE":20,"subject":21,"predicateObjectList":22,"blankNodePropertyList":23,"QpredicateObjectList_E_Opt":24,"verb":25,"objectList":26,"Q_O_QGT_SEMI_E_S_Qverb_E_S_QobjectList_E_Opt_C_E_Star":27,"O_Qverb_E_S_QobjectList_E_C":28,"Q_O_Qverb_E_S_QobjectList_E_C_E_Opt":29,"O_QGT_SEMI_E_S_Qverb_E_S_QobjectList_E_Opt_C":30,"GT_SEMI":31,"object":32,"Q_O_QGT_COMMA_E_S_Qobject_E_C_E_Star":33,"O_QGT_COMMA_E_S_Qobject_E_C":34,"GT_COMMA":35,"predicate":36,"RDF_TYPE":37,"iri":38,"BlankNode":39,"collection":40,"literal":41,"RDFLiteral":42,"NumericLiteral":43,"BooleanLiteral":44,"GT_LBRACKET":45,"NEW_SUBJECT":46,"GT_RBRACKET":47,"GT_LPAREN":48,"Qobject_E_Star":49,"GT_RPAREN":50,"collectionObject":51,"INTEGER":52,"DECIMAL":53,"DOUBLE":54,"String":55,"Q_O_QLANGTAG_E_Or_QGT_DTYPE_E_S_Qiri_E_C_E_Opt":56,"O_QLANGTAG_E_Or_QGT_DTYPE_E_S_Qiri_E_C":57,"LANGTAG":58,"GT_DTYPE":59,"IT_true":60,"IT_false":61,"STRING_LITERAL1":62,"STRING_LITERAL2":63,"STRING_LITERAL_LONG1":64,"STRING_LITERAL_LONG2":65,"PrefixedName":66,"PNAME_LN":67,"BLANK_NODE_LABEL":68,"ANON":69,"$accept":0,"$end":1};
        this.terminals_ = {2:"error",6:"EOF",10:"GT_DOT",15:"PREFIX",16:"PNAME_NS",17:"IRIREF",18:"BASE",19:"SPARQL_PREFIX",20:"SPARQL_BASE",31:"GT_SEMI",35:"GT_COMMA",37:"RDF_TYPE",45:"GT_LBRACKET",47:"GT_RBRACKET",48:"GT_LPAREN",50:"GT_RPAREN",52:"INTEGER",53:"DECIMAL",54:"DOUBLE",58:"LANGTAG",59:"GT_DTYPE",60:"IT_true",61:"IT_false",62:"STRING_LITERAL1",63:"STRING_LITERAL2",64:"STRING_LITERAL_LONG1",65:"STRING_LITERAL_LONG2",67:"PNAME_LN",68:"BLANK_NODE_LABEL",69:"ANON"};
        this.productions_ = [0,[3,3],[4,0],[5,0],[5,2],[7,1],[7,3],[8,1],[8,1],[8,1],[8,1],[11,4],[12,3],[13,5],[14,2],[9,3],[9,2],[24,0],[24,1],[22,5],[28,4],[29,0],[29,1],[30,2],[27,0],[27,2],[26,3],[34,3],[33,0],[33,2],[25,1],[25,1],[21,1],[21,1],[21,1],[36,1],[32,1],[32,1],[32,1],[32,1],[32,1],[41,1],[41,1],[41,1],[23,4],[46,0],[40,3],[49,0],[49,2],[51,1],[51,1],[51,1],[51,1],[51,1],[43,1],[43,1],[43,1],[42,3],[57,1],[57,3],[56,0],[56,1],[44,1],[44,1],[55,1],[55,1],[55,1],[55,1],[38,1],[38,1],[66,1],[66,1],[39,1],[39,1]];

        // shorten static method to just `o` for terse STATE_TABLE
        const $V0=[6,15,16,17,18,19,20,45,48,67,68,69],$V1=[2,2],$V2=[16,17,37,67],$V3=[1,40],$V4=[1,37],$V5=[1,35],$V6=[1,39],$V7=[2,45],$V8=[2,68],$V9=[2,69],$Va=[2,72],$Vb=[2,73],$Vc=[16,17,45,48,50,52,53,54,60,61,62,63,64,65,67,68,69],$Vd=[2,47],$Ve=[2,70],$Vf=[2,71],$Vg=[16,17,45,48,52,53,54,60,61,62,63,64,65,67,68,69],$Vh=[1,72],$Vi=[1,62],$Vj=[1,67],$Vk=[1,66],$Vl=[1,74],$Vm=[1,75],$Vn=[1,76],$Vo=[1,77],$Vp=[1,78],$Vq=[1,79],$Vr=[1,80],$Vs=[1,81],$Vt=[1,82],$Vu=[1,71],$Vv=[1,64],$Vw=[1,65],$Vx=[1,100],$Vy=[1,90],$Vz=[1,99],$VA=[2,46],$VB=[2,41],$VC=[2,42],$VD=[2,43],$VE=[16,17,45,48,50,52,53,54,58,59,60,61,62,63,64,65,67,68,69],$VF=[2,54],$VG=[2,55],$VH=[2,56],$VI=[2,62],$VJ=[2,63],$VK=[2,64],$VL=[2,65],$VM=[2,66],$VN=[2,67],$VO=[10,31],$VP=[10,31,35],$VQ=[2,36],$VR=[2,37],$VS=[2,38],$VT=[2,39],$VU=[2,40],$VV=[10,31,35,58,59],$VW=[2,44],$VX=[1,141],$VY=[1,131],$VZ=[1,140],$V_=[2,60],$V$=[2,24],$V01=[2,28],$V11=[31,47],$V21=[31,35,47],$V31=[31,35,47,58,59],$V41=[2,57],$V51=[2,61],$V61=[2,58],$V71=[16,17,67],$V81=[2,19],$V91=[2,26],$Va1=[2,25],$Vb1=[2,21],$Vc1=[2,29],$Vd1=[2,59],$Ve1=[2,23],$Vf1=[2,22],$Vg1=[1,216],$Vh1=[1,206],$Vi1=[1,215],$Vj1=[2,27],$Vk1=[1,253],$Vl1=[1,243],$Vm1=[1,252],$Vn1=[1,281],$Vo1=[1,271],$Vp1=[1,280],$Vq1=[2,20],$Vr1=[1,325],$Vs1=[1,315],$Vt1=[1,324],$Vu1=[1,390],$Vv1=[1,380],$Vw1=[1,389],$Vx1=[1,422],$Vy1=[1,412],$Vz1=[1,421];
        const o = JisonParser.expandParseTable;
        this.table = [o($V0,$V1,{3:1,4:2}),{1:[3]},o($V0,[2,3],{5:3}),{6:[1,4],7:5,8:6,9:7,11:8,12:9,13:10,14:11,15:[1,14],16:[1,28],17:[1,22],18:[1,15],19:[1,16],20:[1,17],21:12,23:13,38:18,39:19,40:20,45:[1,21],48:[1,26],66:23,67:[1,27],68:[1,24],69:[1,25]},{1:[2,1]},o($V0,[2,4]),o($V0,[2,5]),{4:29,10:$V1},o($V0,[2,7]),o($V0,[2,8]),o($V0,[2,9]),o($V0,[2,10]),o($V2,$V1,{4:30}),{10:[2,17],16:$V3,17:$V4,22:32,24:31,25:33,36:34,37:$V5,38:36,66:38,67:$V6},{16:[1,41]},{17:[1,42]},{4:43,16:$V1},{17:[1,44]},o($V2,[2,32]),o($V2,[2,33]),o($V2,[2,34]),o($V2,$V7,{46:45}),o($V2,$V8),o($V2,$V9),o($V2,$Va),o($V2,$Vb),o($Vc,$Vd,{49:46}),o($V2,$Ve),o($V2,$Vf),{10:[1,47]},{16:$V3,17:$V4,22:48,25:33,36:34,37:$V5,38:36,66:38,67:$V6},{10:[2,16]},{10:[2,18]},o($Vg,$V1,{4:49}),o($Vg,[2,30]),o($Vg,[2,31]),o($Vg,[2,35]),o($Vg,$V8),o($Vg,$V9),o($Vg,$Ve),o($Vg,$Vf),{17:[1,50]},{10:[1,51]},{16:[1,52]},o($V0,[2,14]),{16:$V3,17:$V4,22:53,25:54,36:34,37:$V5,38:36,66:38,67:$V6},{16:$Vh,17:$Vi,23:60,38:57,39:58,40:59,41:61,42:68,43:69,44:70,45:$Vj,48:$Vk,50:[1,55],51:56,52:$Vl,53:$Vm,54:$Vn,55:73,60:$Vo,61:$Vp,62:$Vq,63:$Vr,64:$Vs,65:$Vt,66:63,67:$Vu,68:$Vv,69:$Vw},o($V0,[2,6]),{10:[2,15]},{16:$Vx,17:$Vy,23:88,26:83,32:84,38:85,39:86,40:87,41:89,42:96,43:97,44:98,45:[1,95],48:[1,94],52:[1,102],53:[1,103],54:[1,104],55:101,60:[1,105],61:[1,106],62:[1,107],63:[1,108],64:[1,109],65:[1,110],66:91,67:$Vz,68:[1,92],69:[1,93]},{10:[1,111]},o($V0,[2,12]),{4:112,17:$V1},{47:[1,113]},o($Vg,$V1,{4:114}),o($V2,$VA),o($Vc,[2,48]),o($Vc,[2,49]),o($Vc,[2,50]),o($Vc,[2,51]),o($Vc,[2,52]),o($Vc,[2,53]),o($Vc,$V8),o($Vc,$V9),o($Vc,$Va),o($Vc,$Vb),o($Vc,$Vd,{49:115}),o($V2,$V7,{46:116}),o($Vc,$VB),o($Vc,$VC),o($Vc,$VD),o($Vc,$Ve),o($Vc,$Vf),o($VE,$V1,{4:117}),o($Vc,$VF),o($Vc,$VG),o($Vc,$VH),o($Vc,$VI),o($Vc,$VJ),o($VE,$VK),o($VE,$VL),o($VE,$VM),o($VE,$VN),o($VO,$V1,{4:118}),o($VP,$V1,{4:119}),o($VP,$VQ),o($VP,$VR),o($VP,$VS),o($VP,$VT),o($VP,$VU),o($VP,$V8),o($VP,$V9),o($VP,$Va),o($VP,$Vb),o($Vc,$Vd,{49:120}),o($V2,$V7,{46:121}),o($VP,$VB),o($VP,$VC),o($VP,$VD),o($VP,$Ve),o($VP,$Vf),o($VV,$V1,{4:122}),o($VP,$VF),o($VP,$VG),o($VP,$VH),o($VP,$VI),o($VP,$VJ),o($VV,$VK),o($VV,$VL),o($VV,$VM),o($VV,$VN),o($V0,[2,11]),{17:[1,123]},o([10,16,17,37,67],$VW),{16:$VX,17:$VY,23:129,26:124,32:125,38:126,39:127,40:128,41:130,42:137,43:138,44:139,45:[1,136],48:[1,135],52:[1,143],53:[1,144],54:[1,145],55:142,60:[1,146],61:[1,147],62:[1,148],63:[1,149],64:[1,150],65:[1,151],66:132,67:$VZ,68:[1,133],69:[1,134]},{16:$Vh,17:$Vi,23:60,38:57,39:58,40:59,41:61,42:68,43:69,44:70,45:$Vj,48:$Vk,50:[1,152],51:56,52:$Vl,53:$Vm,54:$Vn,55:73,60:$Vo,61:$Vp,62:$Vq,63:$Vr,64:$Vs,65:$Vt,66:63,67:$Vu,68:$Vv,69:$Vw},{16:$V3,17:$V4,22:153,25:54,36:34,37:$V5,38:36,66:38,67:$V6},o($Vc,$V_,{56:154,57:155,58:[1,156],59:[1,157]}),o($VO,$V$,{27:158}),o($VP,$V01,{33:159}),{16:$Vh,17:$Vi,23:60,38:57,39:58,40:59,41:61,42:68,43:69,44:70,45:$Vj,48:$Vk,50:[1,160],51:56,52:$Vl,53:$Vm,54:$Vn,55:73,60:$Vo,61:$Vp,62:$Vq,63:$Vr,64:$Vs,65:$Vt,66:63,67:$Vu,68:$Vv,69:$Vw},{16:$V3,17:$V4,22:161,25:54,36:34,37:$V5,38:36,66:38,67:$V6},o($VP,$V_,{56:162,57:163,58:[1,164],59:[1,165]}),o($V0,[2,13]),o($V11,$V1,{4:166}),o($V21,$V1,{4:167}),o($V21,$VQ),o($V21,$VR),o($V21,$VS),o($V21,$VT),o($V21,$VU),o($V21,$V8),o($V21,$V9),o($V21,$Va),o($V21,$Vb),o($Vc,$Vd,{49:168}),o($V2,$V7,{46:169}),o($V21,$VB),o($V21,$VC),o($V21,$VD),o($V21,$Ve),o($V21,$Vf),o($V31,$V1,{4:170}),o($V21,$VF),o($V21,$VG),o($V21,$VH),o($V21,$VI),o($V21,$VJ),o($V31,$VK),o($V31,$VL),o($V31,$VM),o($V31,$VN),o($Vc,$VA),{47:[1,171]},o($Vc,$V41),o($Vc,$V51),o($Vc,$V61),o($V71,$V1,{4:172}),{10:$V81,30:173,31:[1,174]},o($VO,$V91,{34:175,35:[1,176]}),o($VP,$VA),{47:[1,177]},o($VP,$V41),o($VP,$V51),o($VP,$V61),o($V71,$V1,{4:178}),o($V11,$V$,{27:179}),o($V21,$V01,{33:180}),{16:$Vh,17:$Vi,23:60,38:57,39:58,40:59,41:61,42:68,43:69,44:70,45:$Vj,48:$Vk,50:[1,181],51:56,52:$Vl,53:$Vm,54:$Vn,55:73,60:$Vo,61:$Vp,62:$Vq,63:$Vr,64:$Vs,65:$Vt,66:63,67:$Vu,68:$Vv,69:$Vw},{16:$V3,17:$V4,22:182,25:54,36:34,37:$V5,38:36,66:38,67:$V6},o($V21,$V_,{56:183,57:184,58:[1,185],59:[1,186]}),o($Vc,$VW),{16:$Vh,17:$Vi,38:187,66:63,67:$Vu},o($VO,$Va1),o($V2,$V1,{29:188,28:189,4:190,10:$Vb1,31:$Vb1}),o($VP,$Vc1),o($Vg,$V1,{4:191}),o($VP,$VW),{16:$Vx,17:$Vy,38:192,66:91,67:$Vz},{30:193,31:[1,194],47:$V81},o($V11,$V91,{34:195,35:[1,196]}),o($V21,$VA),{47:[1,197]},o($V21,$V41),o($V21,$V51),o($V21,$V61),o($V71,$V1,{4:198}),o($Vc,$Vd1),o($VO,$Ve1),o($VO,$Vf1),{16:$V3,17:$V4,25:199,36:34,37:$V5,38:36,66:38,67:$V6},{16:$Vg1,17:$Vh1,23:204,32:200,38:201,39:202,40:203,41:205,42:212,43:213,44:214,45:[1,211],48:[1,210],52:[1,218],53:[1,219],54:[1,220],55:217,60:[1,221],61:[1,222],62:[1,223],63:[1,224],64:[1,225],65:[1,226],66:207,67:$Vi1,68:[1,208],69:[1,209]},o($VP,$Vd1),o($V11,$Va1),o($V2,$V1,{29:227,28:228,4:229,31:$Vb1,47:$Vb1}),o($V21,$Vc1),o($Vg,$V1,{4:230}),o($V21,$VW),{16:$VX,17:$VY,38:231,66:132,67:$VZ},o($Vg,$V1,{4:232}),o($VP,$Vj1),o($VP,$VQ),o($VP,$VR),o($VP,$VS),o($VP,$VT),o($VP,$VU),o($VP,$V8),o($VP,$V9),o($VP,$Va),o($VP,$Vb),o($Vc,$Vd,{49:233}),o($V2,$V7,{46:234}),o($VP,$VB),o($VP,$VC),o($VP,$VD),o($VP,$Ve),o($VP,$Vf),o($VV,$V1,{4:235}),o($VP,$VF),o($VP,$VG),o($VP,$VH),o($VP,$VI),o($VP,$VJ),o($VV,$VK),o($VV,$VL),o($VV,$VM),o($VV,$VN),o($V11,$Ve1),o($V11,$Vf1),{16:$V3,17:$V4,25:236,36:34,37:$V5,38:36,66:38,67:$V6},{16:$Vk1,17:$Vl1,23:241,32:237,38:238,39:239,40:240,41:242,42:249,43:250,44:251,45:[1,248],48:[1,247],52:[1,255],53:[1,256],54:[1,257],55:254,60:[1,258],61:[1,259],62:[1,260],63:[1,261],64:[1,262],65:[1,263],66:244,67:$Vm1,68:[1,245],69:[1,246]},o($V21,$Vd1),{16:$Vn1,17:$Vo1,23:269,26:264,32:265,38:266,39:267,40:268,41:270,42:277,43:278,44:279,45:[1,276],48:[1,275],52:[1,283],53:[1,284],54:[1,285],55:282,60:[1,286],61:[1,287],62:[1,288],63:[1,289],64:[1,290],65:[1,291],66:272,67:$Vp1,68:[1,273],69:[1,274]},{16:$Vh,17:$Vi,23:60,38:57,39:58,40:59,41:61,42:68,43:69,44:70,45:$Vj,48:$Vk,50:[1,292],51:56,52:$Vl,53:$Vm,54:$Vn,55:73,60:$Vo,61:$Vp,62:$Vq,63:$Vr,64:$Vs,65:$Vt,66:63,67:$Vu,68:$Vv,69:$Vw},{16:$V3,17:$V4,22:293,25:54,36:34,37:$V5,38:36,66:38,67:$V6},o($VP,$V_,{56:294,57:295,58:[1,296],59:[1,297]}),o($Vg,$V1,{4:298}),o($V21,$Vj1),o($V21,$VQ),o($V21,$VR),o($V21,$VS),o($V21,$VT),o($V21,$VU),o($V21,$V8),o($V21,$V9),o($V21,$Va),o($V21,$Vb),o($Vc,$Vd,{49:299}),o($V2,$V7,{46:300}),o($V21,$VB),o($V21,$VC),o($V21,$VD),o($V21,$Ve),o($V21,$Vf),o($V31,$V1,{4:301}),o($V21,$VF),o($V21,$VG),o($V21,$VH),o($V21,$VI),o($V21,$VJ),o($V31,$VK),o($V31,$VL),o($V31,$VM),o($V31,$VN),o($VO,$Vq1),o($VP,$V1,{4:302}),o($VP,$VQ),o($VP,$VR),o($VP,$VS),o($VP,$VT),o($VP,$VU),o($VP,$V8),o($VP,$V9),o($VP,$Va),o($VP,$Vb),o($Vc,$Vd,{49:303}),o($V2,$V7,{46:304}),o($VP,$VB),o($VP,$VC),o($VP,$VD),o($VP,$Ve),o($VP,$Vf),o($VV,$V1,{4:305}),o($VP,$VF),o($VP,$VG),o($VP,$VH),o($VP,$VI),o($VP,$VJ),o($VV,$VK),o($VV,$VL),o($VV,$VM),o($VV,$VN),o($VP,$VA),{47:[1,306]},o($VP,$V41),o($VP,$V51),o($VP,$V61),o($V71,$V1,{4:307}),{16:$Vr1,17:$Vs1,23:313,26:308,32:309,38:310,39:311,40:312,41:314,42:321,43:322,44:323,45:[1,320],48:[1,319],52:[1,327],53:[1,328],54:[1,329],55:326,60:[1,330],61:[1,331],62:[1,332],63:[1,333],64:[1,334],65:[1,335],66:316,67:$Vt1,68:[1,317],69:[1,318]},{16:$Vh,17:$Vi,23:60,38:57,39:58,40:59,41:61,42:68,43:69,44:70,45:$Vj,48:$Vk,50:[1,336],51:56,52:$Vl,53:$Vm,54:$Vn,55:73,60:$Vo,61:$Vp,62:$Vq,63:$Vr,64:$Vs,65:$Vt,66:63,67:$Vu,68:$Vv,69:$Vw},{16:$V3,17:$V4,22:337,25:54,36:34,37:$V5,38:36,66:38,67:$V6},o($V21,$V_,{56:338,57:339,58:[1,340],59:[1,341]}),o($VP,$V01,{33:342}),{16:$Vh,17:$Vi,23:60,38:57,39:58,40:59,41:61,42:68,43:69,44:70,45:$Vj,48:$Vk,50:[1,343],51:56,52:$Vl,53:$Vm,54:$Vn,55:73,60:$Vo,61:$Vp,62:$Vq,63:$Vr,64:$Vs,65:$Vt,66:63,67:$Vu,68:$Vv,69:$Vw},{16:$V3,17:$V4,22:344,25:54,36:34,37:$V5,38:36,66:38,67:$V6},o($VP,$V_,{56:345,57:346,58:[1,347],59:[1,348]}),o($VP,$VW),{16:$Vg1,17:$Vh1,38:349,66:207,67:$Vi1},o($V11,$Vq1),o($V21,$V1,{4:350}),o($V21,$VQ),o($V21,$VR),o($V21,$VS),o($V21,$VT),o($V21,$VU),o($V21,$V8),o($V21,$V9),o($V21,$Va),o($V21,$Vb),o($Vc,$Vd,{49:351}),o($V2,$V7,{46:352}),o($V21,$VB),o($V21,$VC),o($V21,$VD),o($V21,$Ve),o($V21,$Vf),o($V31,$V1,{4:353}),o($V21,$VF),o($V21,$VG),o($V21,$VH),o($V21,$VI),o($V21,$VJ),o($V31,$VK),o($V31,$VL),o($V31,$VM),o($V31,$VN),o($V21,$VA),{47:[1,354]},o($V21,$V41),o($V21,$V51),o($V21,$V61),o($V71,$V1,{4:355}),o($VO,$V91,{34:356,35:[1,357]}),o($VP,$VA),{47:[1,358]},o($VP,$V41),o($VP,$V51),o($VP,$V61),o($V71,$V1,{4:359}),o($VP,$Vd1),o($V21,$V01,{33:360}),{16:$Vh,17:$Vi,23:60,38:57,39:58,40:59,41:61,42:68,43:69,44:70,45:$Vj,48:$Vk,50:[1,361],51:56,52:$Vl,53:$Vm,54:$Vn,55:73,60:$Vo,61:$Vp,62:$Vq,63:$Vr,64:$Vs,65:$Vt,66:63,67:$Vu,68:$Vv,69:$Vw},{16:$V3,17:$V4,22:362,25:54,36:34,37:$V5,38:36,66:38,67:$V6},o($V21,$V_,{56:363,57:364,58:[1,365],59:[1,366]}),o($V21,$VW),{16:$Vk1,17:$Vl1,38:367,66:244,67:$Vm1},o($VP,$Vc1),o($Vg,$V1,{4:368}),o($VP,$VW),{16:$Vn1,17:$Vo1,38:369,66:272,67:$Vp1},o($V11,$V91,{34:370,35:[1,371]}),o($V21,$VA),{47:[1,372]},o($V21,$V41),o($V21,$V51),o($V21,$V61),o($V71,$V1,{4:373}),o($V21,$Vd1),{16:$Vu1,17:$Vv1,23:378,32:374,38:375,39:376,40:377,41:379,42:386,43:387,44:388,45:[1,385],48:[1,384],52:[1,392],53:[1,393],54:[1,394],55:391,60:[1,395],61:[1,396],62:[1,397],63:[1,398],64:[1,399],65:[1,400],66:381,67:$Vw1,68:[1,382],69:[1,383]},o($VP,$Vd1),o($V21,$Vc1),o($Vg,$V1,{4:401}),o($V21,$VW),{16:$Vr1,17:$Vs1,38:402,66:316,67:$Vt1},o($VP,$Vj1),o($VP,$VQ),o($VP,$VR),o($VP,$VS),o($VP,$VT),o($VP,$VU),o($VP,$V8),o($VP,$V9),o($VP,$Va),o($VP,$Vb),o($Vc,$Vd,{49:403}),o($V2,$V7,{46:404}),o($VP,$VB),o($VP,$VC),o($VP,$VD),o($VP,$Ve),o($VP,$Vf),o($VV,$V1,{4:405}),o($VP,$VF),o($VP,$VG),o($VP,$VH),o($VP,$VI),o($VP,$VJ),o($VV,$VK),o($VV,$VL),o($VV,$VM),o($VV,$VN),{16:$Vx1,17:$Vy1,23:410,32:406,38:407,39:408,40:409,41:411,42:418,43:419,44:420,45:[1,417],48:[1,416],52:[1,424],53:[1,425],54:[1,426],55:423,60:[1,427],61:[1,428],62:[1,429],63:[1,430],64:[1,431],65:[1,432],66:413,67:$Vz1,68:[1,414],69:[1,415]},o($V21,$Vd1),{16:$Vh,17:$Vi,23:60,38:57,39:58,40:59,41:61,42:68,43:69,44:70,45:$Vj,48:$Vk,50:[1,433],51:56,52:$Vl,53:$Vm,54:$Vn,55:73,60:$Vo,61:$Vp,62:$Vq,63:$Vr,64:$Vs,65:$Vt,66:63,67:$Vu,68:$Vv,69:$Vw},{16:$V3,17:$V4,22:434,25:54,36:34,37:$V5,38:36,66:38,67:$V6},o($VP,$V_,{56:435,57:436,58:[1,437],59:[1,438]}),o($V21,$Vj1),o($V21,$VQ),o($V21,$VR),o($V21,$VS),o($V21,$VT),o($V21,$VU),o($V21,$V8),o($V21,$V9),o($V21,$Va),o($V21,$Vb),o($Vc,$Vd,{49:439}),o($V2,$V7,{46:440}),o($V21,$VB),o($V21,$VC),o($V21,$VD),o($V21,$Ve),o($V21,$Vf),o($V31,$V1,{4:441}),o($V21,$VF),o($V21,$VG),o($V21,$VH),o($V21,$VI),o($V21,$VJ),o($V31,$VK),o($V31,$VL),o($V31,$VM),o($V31,$VN),o($VP,$VA),{47:[1,442]},o($VP,$V41),o($VP,$V51),o($VP,$V61),o($V71,$V1,{4:443}),{16:$Vh,17:$Vi,23:60,38:57,39:58,40:59,41:61,42:68,43:69,44:70,45:$Vj,48:$Vk,50:[1,444],51:56,52:$Vl,53:$Vm,54:$Vn,55:73,60:$Vo,61:$Vp,62:$Vq,63:$Vr,64:$Vs,65:$Vt,66:63,67:$Vu,68:$Vv,69:$Vw},{16:$V3,17:$V4,22:445,25:54,36:34,37:$V5,38:36,66:38,67:$V6},o($V21,$V_,{56:446,57:447,58:[1,448],59:[1,449]}),o($VP,$VW),{16:$Vu1,17:$Vv1,38:450,66:381,67:$Vw1},o($V21,$VA),{47:[1,451]},o($V21,$V41),o($V21,$V51),o($V21,$V61),o($V71,$V1,{4:452}),o($VP,$Vd1),o($V21,$VW),{16:$Vx1,17:$Vy1,38:453,66:413,67:$Vz1},o($V21,$Vd1)];
        this.defaultActions = {4:[2,1],31:[2,16],32:[2,18],48:[2,15]};
    }
    performAction (yytext, yyleng, yylineno, yy, yystate /* action[1] */, $$ /* vstack */, _$ /* lstack */) {
/* this == yyval */
          const $0 = $$.length - 1;
        switch (yystate) {
case 1:

        return { statementList: $$[$0-2].concat($$[$0-1]) };
      
break;
case 2: case 17: case 21: case 24:
this.$ = yy.getWhitespace();
break;
case 3: case 28: case 47:
this.$ = [];
break;
case 4:
this.$ = $$[$0-1].concat($$[$0]);
break;
case 6:
this.$ = $$[$0-2].concat($$[$0-1], $$[$0], yy.getWhitespace());;
break;
case 11:

        yy._prefixes[$$[$0-2].slice(0, -1)] = $$[$0-1];
      
break;
case 12:

        yy._setBase(yy._base === null ||
                    absoluteIRI.test($$[$0-1].slice(1, -1)) ? $$[$0-1].slice(1, -1) : yy._resolveIRI($$[$0-1].slice(1, -1)));
      
break;
case 13:

        yy._prefixes[$$[$0-2].value] = $$[$0].value;
        this.$ = [{ "type": "sparqlPrefix", keyword: $$[$0-4], ws1: $$[$0-3], prefix: $$[$0-2], ws2: $$[$0-1], namespace: $$[$0] }].concat(yy.getWhitespace());
      
break;
case 14:

        yy._setBase(yy._base === null ||
                    absoluteIRI.test($$[$0].slice(1, -1)) ? $$[$0].slice(1, -1) : yy._resolveIRI($$[$0].slice(1, -1)));
      
break;
case 15:
this.$ = yy.finishSubject([{ type: "subject_predicateObjectList", subject: $$[$0-2], ws1: $$[$0-1], predicateObjectList: $$[$0]}].concat(yy.getWhitespace()));
break;
case 16:
this.$ = yy.finishSubject($$[$0-1].concat($$[$0])) // blankNodePropertyList _QpredicateObjectList_E_Opt;
break;
case 18:
this.$ = $$[$0].concat(yy.getWhitespace());;
break;
case 19:
this.$ = [{ type: "verb_objectList", verb: $$[$0-4], ws1: $$[$0-3], objectList: $$[$0-2].concat($$[$0-1]) }].concat($$[$0]).concat(yy.getWhitespace()) // verb objectList _Q_O_QGT_SEMI_E_S_Qverb_E_S_QobjectList_E_Opt_C_E_Star;
break;
case 20:
this.$ = $$[$0-3].concat([{ type: "verb_objectList", verb: $$[$0-2], ws1: $$[$0-1], objectList: $$[$0] }], yy.getWhitespace());
break;
case 22:
this.$ =$$[$0].concat(yy.getWhitespace());
break;
case 23:
this.$ = [$$[$0-1]].concat($$[$0], yy.getWhitespace());
break;
case 25:
this.$ = $$[$0-1].concat($$[$0], yy.getWhitespace()) // Q_O_QGT_SEMI_E_S_Qverb_E_S_QobjectList_E_Opt_C_E_Star _O_QGT_SEMI_E_S_Qverb_E_S_QobjectList_E_Opt_C;
break;
case 26:
this.$ = yy.finishObjectList($$[$0-2].concat($$[$0-1], $$[$0])) // object _Q_O_QGT_COMMA_E_S_Qobject_E_C_E_Star;
break;
case 27:
this.$ = [$$[$0-2]].concat($$[$0-1], $$[$0], yy.getWhitespace());
break;
case 29:
this.$ = $$[$0-1].concat($$[$0]) // Q_O_QGT_COMMA_E_S_Qobject_E_C_E_Star _O_QGT_COMMA_E_S_Qobject_E_C;
break;
case 30:
this.$ = yy.setPredicate($$[$0]);
break;
case 31:
this.$ = yy.setPredicate({ "type": "a", "origText": "a" }) // left is a token, right a const;
break;
case 32: case 33:
this.$ = yy.setSubject($$[$0]);
break;
case 34:
this.$ = yy.collectionSubject($$[$0]);
break;
case 36: case 37: case 40:
this.$ = [yy.finishTriple($$[$0])];
break;
case 38:
this.$ = [yy.finishTriple($$[$0][0].subject)].concat($$[$0]) // collection;
break;
case 39:
this.$ = [yy.finishTriple($$[$0][0].subject)].concat($$[$0]) // blankNodePropertyList;
break;
case 44:
this.$ = yy.finishBlankNodePropertyList($$[$0-1], $$[$0-2]);
break;
case 45:
this.$ = yy.startBlankNodePropertyList();;
break;
case 46:
this.$ = $$[$0-1];
break;
case 48:
this.$ = $$[$0-1].concat($$[$0]) // Qobject_E_Star object;
break;
case 49: case 50: case 53:
this.$ = {node: $$[$0], nested: []};
break;
case 51:
this.$ = yy.makeFirstRest($$[$0]) // collection;
break;
case 52:
this.$ = {node: $$[$0][0].subject, nested: $$[$0]} // blankNodePropertyList;
break;
case 54:
this.$ = yy.createTypedLiteral($$[$0], XSD_INTEGER);
break;
case 55:
this.$ = yy.createTypedLiteral($$[$0], XSD_DECIMAL);
break;
case 56:
this.$ = yy.createTypedLiteral($$[$0], XSD_DOUBLE);
break;
case 57:
this.$ = yy.createParsedLiteral($$[$0].type, $$[$0-2], $$[$0-1], $$[$0].attrs);
break;
case 58:
this.$ = { type: "langTagLiteral", attrs: { language: $$[$0] } };
break;
case 59:
this.$ = { type: "datatypedLiteral", attrs: { datatype: { type: "ParsedDatatype", value: $$[$0].value, token: $$[$0-2], ws1: $$[$0-1], iri: $$[$0] } } };
break;
case 60:
this.$ = { type: "simpleLiteral", attrs: {} };
break;
case 62: case 63:
this.$ = yy.createTypedLiteral($$[$0], XSD_BOOLEAN);
break;
case 72:
this.$ = yy.createBlankNode($$[$0]);
break;
case 73:
this.$ = yy.createBlankNode();
break;
        }
    }
}

// Export module
Object.defineProperty(exports, "__esModule", { value: true });
exports.TurtleJisonParser = TurtleJisonParser;


/* generated by @ts-jison/lexer-generator 0.4.1-alpha.2 */
const { JisonLexer } = require('@ts-jison/lexer');

class TurtleJisonLexer extends JisonLexer {
    constructor (yy = {}) {
        super(yy);
        this.options = {"moduleName":"TurtleJison"};
        this.rules = [
        /^(?:\s+)/,
        /^(?:#[^\u000a\u000d]*|\/\*(?:[^*]|\*(?:[^/]|\\\/))*\*\/)/,
        /^(?:\.)/,
        /^(?:;)/,
        /^(?:,)/,
        /^(?:\[)/,
        /^(?:\])/,
        /^(?:\()/,
        /^(?:\))/,
        /^(?:\^\^)/,
        /^(?:true\b)/,
        /^(?:false\b)/,
        /^(?:[Pp][Rr][Ee][Ff][Ii][Xx])/,
        /^(?:[Bb][Aa][Ss][Ee])/,
        /^(?:@base\b)/,
        /^(?:@prefix\b)/,
        /^(?:<(?:[^\u0000-\u0020<>\"{}|^`\\]|\\u(?:[0-9]|[A-F]|[a-f])(?:[0-9]|[A-F]|[a-f])(?:[0-9]|[A-F]|[a-f])(?:[0-9]|[A-F]|[a-f])|\\U(?:[0-9]|[A-F]|[a-f])(?:[0-9]|[A-F]|[a-f])(?:[0-9]|[A-F]|[a-f])(?:[0-9]|[A-F]|[a-f])(?:[0-9]|[A-F]|[a-f])(?:[0-9]|[A-F]|[a-f])(?:[0-9]|[A-F]|[a-f])(?:[0-9]|[A-F]|[a-f]))*>)/,
        /^(?:(?:(?:[A-Z]|[a-z]|[\u00c0-\u00d6]|[\u00d8-\u00f6]|[\u00f8-\u02ff]|[\u0370-\u037d]|[\u037f-\u1fff]|[\u200c-\u200d]|[\u2070-\u218f]|[\u2c00-\u2fef]|[\u3001-\ud7ff]|[\uf900-\ufdcf]|[\ufdf0-\ufffd]|[\uD800-\uDB7F][\uDC00-\uDFFF])(?:(?:[A-Z]|[a-z]|[\u00c0-\u00d6]|[\u00d8-\u00f6]|[\u00f8-\u02ff]|[\u0370-\u037d]|[\u037f-\u1fff]|[\u200c-\u200d]|[\u2070-\u218f]|[\u2c00-\u2fef]|[\u3001-\ud7ff]|[\uf900-\ufdcf]|[\ufdf0-\ufffd]|[\uD800-\uDB7F][\uDC00-\uDFFF]|_|_|-|[0-9]|[\u00b7]|[\u0300-\u036f]|[\u203f-\u2040]|\.)*(?:[A-Z]|[a-z]|[\u00c0-\u00d6]|[\u00d8-\u00f6]|[\u00f8-\u02ff]|[\u0370-\u037d]|[\u037f-\u1fff]|[\u200c-\u200d]|[\u2070-\u218f]|[\u2c00-\u2fef]|[\u3001-\ud7ff]|[\uf900-\ufdcf]|[\ufdf0-\ufffd]|[\uD800-\uDB7F][\uDC00-\uDFFF]|_|_|-|[0-9]|[\u00b7]|[\u0300-\u036f]|[\u203f-\u2040]))?)?:(?:[A-Z]|[a-z]|[\u00c0-\u00d6]|[\u00d8-\u00f6]|[\u00f8-\u02ff]|[\u0370-\u037d]|[\u037f-\u1fff]|[\u200c-\u200d]|[\u2070-\u218f]|[\u2c00-\u2fef]|[\u3001-\ud7ff]|[\uf900-\ufdcf]|[\ufdf0-\ufffd]|[\uD800-\uDB7F][\uDC00-\uDFFF]|_|_|:|[0-9]|%(?:[0-9]|[A-F]|[a-f])(?:[0-9]|[A-F]|[a-f])|\\(?:_|~|\.|-|!|\$|&|'|\(|\)|\*|\+|,|;|=|\/|\?|#|@|%))(?:[A-Z]|[a-z]|[\u00c0-\u00d6]|[\u00d8-\u00f6]|[\u00f8-\u02ff]|[\u0370-\u037d]|[\u037f-\u1fff]|[\u200c-\u200d]|[\u2070-\u218f]|[\u2c00-\u2fef]|[\u3001-\ud7ff]|[\uf900-\ufdcf]|[\ufdf0-\ufffd]|[\uD800-\uDB7F][\uDC00-\uDFFF]|_|_|-|[0-9]|[\u00b7]|[\u0300-\u036f]|[\u203f-\u2040]|\.|:|%(?:[0-9]|[A-F]|[a-f])(?:[0-9]|[A-F]|[a-f])|\\(?:_|~|\.|-|!|\$|&|'|\(|\)|\*|\+|,|;|=|\/|\?|#|@|%))*)/,
        /^(?:(?:(?:[A-Z]|[a-z]|[\u00c0-\u00d6]|[\u00d8-\u00f6]|[\u00f8-\u02ff]|[\u0370-\u037d]|[\u037f-\u1fff]|[\u200c-\u200d]|[\u2070-\u218f]|[\u2c00-\u2fef]|[\u3001-\ud7ff]|[\uf900-\ufdcf]|[\ufdf0-\ufffd]|[\uD800-\uDB7F][\uDC00-\uDFFF])(?:(?:[A-Z]|[a-z]|[\u00c0-\u00d6]|[\u00d8-\u00f6]|[\u00f8-\u02ff]|[\u0370-\u037d]|[\u037f-\u1fff]|[\u200c-\u200d]|[\u2070-\u218f]|[\u2c00-\u2fef]|[\u3001-\ud7ff]|[\uf900-\ufdcf]|[\ufdf0-\ufffd]|[\uD800-\uDB7F][\uDC00-\uDFFF]|_|_|-|[0-9]|[\u00b7]|[\u0300-\u036f]|[\u203f-\u2040]|\.)*(?:[A-Z]|[a-z]|[\u00c0-\u00d6]|[\u00d8-\u00f6]|[\u00f8-\u02ff]|[\u0370-\u037d]|[\u037f-\u1fff]|[\u200c-\u200d]|[\u2070-\u218f]|[\u2c00-\u2fef]|[\u3001-\ud7ff]|[\uf900-\ufdcf]|[\ufdf0-\ufffd]|[\uD800-\uDB7F][\uDC00-\uDFFF]|_|_|-|[0-9]|[\u00b7]|[\u0300-\u036f]|[\u203f-\u2040]))?)?:)/,
        /^(?:_:(?:[A-Z]|[a-z]|[\u00c0-\u00d6]|[\u00d8-\u00f6]|[\u00f8-\u02ff]|[\u0370-\u037d]|[\u037f-\u1fff]|[\u200c-\u200d]|[\u2070-\u218f]|[\u2c00-\u2fef]|[\u3001-\ud7ff]|[\uf900-\ufdcf]|[\ufdf0-\ufffd]|[\uD800-\uDB7F][\uDC00-\uDFFF]|_|_|[0-9])(?:(?:[A-Z]|[a-z]|[\u00c0-\u00d6]|[\u00d8-\u00f6]|[\u00f8-\u02ff]|[\u0370-\u037d]|[\u037f-\u1fff]|[\u200c-\u200d]|[\u2070-\u218f]|[\u2c00-\u2fef]|[\u3001-\ud7ff]|[\uf900-\ufdcf]|[\ufdf0-\ufffd]|[\uD800-\uDB7F][\uDC00-\uDFFF]|_|_|-|[0-9]|[\u00b7]|[\u0300-\u036f]|[\u203f-\u2040]|\.)*(?:[A-Z]|[a-z]|[\u00c0-\u00d6]|[\u00d8-\u00f6]|[\u00f8-\u02ff]|[\u0370-\u037d]|[\u037f-\u1fff]|[\u200c-\u200d]|[\u2070-\u218f]|[\u2c00-\u2fef]|[\u3001-\ud7ff]|[\uf900-\ufdcf]|[\ufdf0-\ufffd]|[\uD800-\uDB7F][\uDC00-\uDFFF]|_|_|-|[0-9]|[\u00b7]|[\u0300-\u036f]|[\u203f-\u2040]))?)/,
        /^(?:@[A-Za-z]+(?:-[0-9A-Za-z]+)*)/,
        /^(?:[+-]?[0-9]+)/,
        /^(?:[+-]?[0-9]*\.[0-9]+)/,
        /^(?:[+-]?(?:[0-9]+\.[0-9]*[Ee][+-]?[0-9]+|\.?[0-9]+[Ee][+-]?[0-9]+))/,
        /^(?:'(?:[^\u0027\u005c\u000a\u000d]|\\[\"\'\\bfnrt]|\\u(?:[0-9]|[A-F]|[a-f])(?:[0-9]|[A-F]|[a-f])(?:[0-9]|[A-F]|[a-f])(?:[0-9]|[A-F]|[a-f])|\\U(?:[0-9]|[A-F]|[a-f])(?:[0-9]|[A-F]|[a-f])(?:[0-9]|[A-F]|[a-f])(?:[0-9]|[A-F]|[a-f])(?:[0-9]|[A-F]|[a-f])(?:[0-9]|[A-F]|[a-f])(?:[0-9]|[A-F]|[a-f])(?:[0-9]|[A-F]|[a-f]))*')/,
        /^(?:"(?:[^\u0022\u005c\u000a\u000d]|\\[\"\'\\bfnrt]|\\u(?:[0-9]|[A-F]|[a-f])(?:[0-9]|[A-F]|[a-f])(?:[0-9]|[A-F]|[a-f])(?:[0-9]|[A-F]|[a-f])|\\U(?:[0-9]|[A-F]|[a-f])(?:[0-9]|[A-F]|[a-f])(?:[0-9]|[A-F]|[a-f])(?:[0-9]|[A-F]|[a-f])(?:[0-9]|[A-F]|[a-f])(?:[0-9]|[A-F]|[a-f])(?:[0-9]|[A-F]|[a-f])(?:[0-9]|[A-F]|[a-f]))*")/,
        /^(?:'''(?:(?:'|'')?(?:[^\'\\]|\\[\"\'\\bfnrt]|\\u(?:[0-9]|[A-F]|[a-f])(?:[0-9]|[A-F]|[a-f])(?:[0-9]|[A-F]|[a-f])(?:[0-9]|[A-F]|[a-f])|\\U(?:[0-9]|[A-F]|[a-f])(?:[0-9]|[A-F]|[a-f])(?:[0-9]|[A-F]|[a-f])(?:[0-9]|[A-F]|[a-f])(?:[0-9]|[A-F]|[a-f])(?:[0-9]|[A-F]|[a-f])(?:[0-9]|[A-F]|[a-f])(?:[0-9]|[A-F]|[a-f])))*''')/,
        /^(?:"""(?:(?:"|"")?(?:[^\"\\]|\\[\"\'\\bfnrt]|\\u(?:[0-9]|[A-F]|[a-f])(?:[0-9]|[A-F]|[a-f])(?:[0-9]|[A-F]|[a-f])(?:[0-9]|[A-F]|[a-f])|\\U(?:[0-9]|[A-F]|[a-f])(?:[0-9]|[A-F]|[a-f])(?:[0-9]|[A-F]|[a-f])(?:[0-9]|[A-F]|[a-f])(?:[0-9]|[A-F]|[a-f])(?:[0-9]|[A-F]|[a-f])(?:[0-9]|[A-F]|[a-f])(?:[0-9]|[A-F]|[a-f])))*""")/,
        /^(?:\\\[(?: |\\t|\\r|\\n)*\\\])/,
        /^(?:a\b)/,
        /^(?:$)/,
        /^(?:[a-zA-Z0-9_-]+)/,
        /^(?:.)/
    ];
        this.conditions = {"INITIAL":{"rules":[0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32],"inclusive":true}};
    }
    performAction (yy, yy_, $avoiding_name_collisions, YY_START) {
              let YYSTATE = YY_START;
            switch ($avoiding_name_collisions) {
    case 0:
  // space eaten by whitespace and comments
  if (yy.skipped.last_line === yy_.yylloc.first_line &&
      yy.skipped.last_column === yy_.yylloc.first_column) {
    // immediately follows a skipped span
    yy.skipped.last_line = yy_.yylloc.last_line;
    yy.skipped.last_column = yy_.yylloc.last_column;
  } else {
    // follows something else
    yy.skipped = yy_.yylloc
  };
  yy.addWhitespace({type: "ws", origText: yy_.yytext});

      break;
    case 1:debugger; // console.log("ASDF", yy_.yytext)
  // space eaten by whitespace and comments
  if (yy.skipped.last_line === yy_.yylloc.first_line &&
      yy.skipped.last_column === yy_.yylloc.first_column) {
    // immediately follows a skipped span
    yy.skipped.last_line = yy_.yylloc.last_line;
    yy.skipped.last_column = yy_.yylloc.last_column;
  } else {
    // follows something else
    yy.skipped = yy_.yylloc
  };
  yy.addWhitespace({type: "comment", origText: yy_.yytext});

      break;
    case 2:yy_.yytext = { type: "token", origText: yy_.yytext }; return 10;
    case 3:yy_.yytext = { type: "token", origText: yy_.yytext }; return 31;
    case 4:yy_.yytext = { type: "token", origText: yy_.yytext }; return 35;
    case 5:yy_.yytext = { type: "token", origText: yy_.yytext }; return 45;
    case 6:yy_.yytext = { type: "token", origText: yy_.yytext }; return 47;
    case 7:yy_.yytext = { type: "token", origText: yy_.yytext }; return 48;
    case 8:yy_.yytext = { type: "token", origText: yy_.yytext }; return 50;
    case 9:yy_.yytext = { type: "token", origText: yy_.yytext }; return 59;
    case 10:yy_.yytext = { type: "boolean", origText: yy_.yytext }; return 60;
    case 11:yy_.yytext = { type: "boolean", origText: yy_.yytext }; return 61;
    case 12:yy_.yytext = { type: "KEYWORD", origText: yy_.yytext }; return 19;
    case 13:yy_.yytext = { type: "KEYWORD", origText: yy_.yytext }; return 20;
    case 14:yy_.yytext = { type: "KEYWORD", origText: yy_.yytext }; return 18;
    case 15:yy_.yytext = { type: "KEYWORD", origText: yy_.yytext }; return 15;
    case 16:yy_.yytext = yy.createRelativeIri(yy_.yytext); return 17;
    case 17:yy_.yytext = yy.parsePName(yy_.yytext); return 67;
    case 18:yy_.yytext = yy.parsePrefix(yy_.yytext); return 16;
    case 19:yy_.yytext = { type: "token", origText: yy_.yytext }; return 68;
    case 20:yy_.yytext = { type: "LANGTAG", value: yy_.yytext.substring(1), origText: yy_.yytext }; return 58;
    case 21:yy_.yytext = { type: "INTEGER", value: yy_.yytext, origText: yy_.yytext }; return 52;
    case 22:yy_.yytext = { type: "DECIMAL", value: yy_.yytext, origText: yy_.yytext }; return 53;
    case 23:yy_.yytext = { type: "DOUBLE",  value: yy_.yytext, origText: yy_.yytext }; return 54;
    case 24:yy_.yytext = { type: "STRING_LITERAL1", value: yy.unescapeString(yy_.yytext, 1), origText: yy_.yytext }; return 62;
    case 25:yy_.yytext = { type: "STRING_LITERAL2", value: yy.unescapeString(yy_.yytext, 1), origText: yy_.yytext }; return 63;
    case 26:yy_.yytext = { type: "STRING_LITERAL_LONG1", value: yy.unescapeString(yy_.yytext, 3), origText: yy_.yytext }; return 64;
    case 27:yy_.yytext = { type: "STRING_LITERAL_LONG2", value: yy.unescapeString(yy_.yytext, 3), origText: yy_.yytext }; return 65;
    case 28:yy_.yytext = { type: "ANON", origText: yy_.yytext }; return 69;
    case 29:yy_.yytext = { type: "keyword", origText: yy_.yytext }; return 37;
    case 30:return 6;
    case 31:return 'unexpected word "'+yy_.yytext+'"';
    case 32:return 'invalid character '+yy_.yytext;
        }
    }
}


// Export module
Object.defineProperty(exports, "__esModule", { value: true });
exports.TurtleJisonLexer = TurtleJisonLexer;


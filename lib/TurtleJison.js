const { JisonParser, o } = require('@ts-jison/parser');
/**
 * parser generated by  @ts-jison/parser-generator 0.4.1-alpha.2
 * @returns Parser implementing JisonParserApi and a Lexer implementing JisonLexerApi.
 */

  /*
    ShEx parser in the Jison parser generator format.
  */

  const RDF = 'http://www.w3.org/1999/02/22-rdf-syntax-ns#',
      RDF_TYPE  = RDF + 'type',
      RDF_FIRST = RDF + 'first',
      RDF_REST  = RDF + 'rest',
      RDF_NIL   = RDF + 'nil',
      XSD = 'http://www.w3.org/2001/XMLSchema#',
      XSD_INTEGER  = XSD + 'integer',
      XSD_DECIMAL  = XSD + 'decimal',
      XSD_FLOAT   = XSD + 'float',
      XSD_DOUBLE   = XSD + 'double',
      XSD_BOOLEAN  = XSD + 'boolean',
      XSD_TRUE =  '"true"^^'  + XSD_BOOLEAN,
      XSD_FALSE = '"false"^^' + XSD_BOOLEAN,
      XSD_PATTERN        = XSD + 'pattern',
      XSD_MININCLUSIVE   = XSD + 'minInclusive',
      XSD_MINEXCLUSIVE   = XSD + 'minExclusive',
      XSD_MAXINCLUSIVE   = XSD + 'maxInclusive',
      XSD_MAXEXCLUSIVE   = XSD + 'maxExclusive',
      XSD_LENGTH         = XSD + 'length',
      XSD_MINLENGTH      = XSD + 'minLength',
      XSD_MAXLENGTH      = XSD + 'maxLength',
      XSD_TOTALDIGITS    = XSD + 'totalDigits',
      XSD_FRACTIONDIGITS = XSD + 'fractionDigits';

  const numericDatatypes = [
      XSD + "integer",
      XSD + "decimal",
      XSD + "float",
      XSD + "double",
      XSD + "string",
      XSD + "boolean",
      XSD + "dateTime",
      XSD + "nonPositiveInteger",
      XSD + "negativeInteger",
      XSD + "long",
      XSD + "int",
      XSD + "short",
      XSD + "byte",
      XSD + "nonNegativeInteger",
      XSD + "unsignedLong",
      XSD + "unsignedInt",
      XSD + "unsignedShort",
      XSD + "unsignedByte",
      XSD + "positiveInteger"
  ];

  const absoluteIRI = /^[a-z][a-z0-9+.-]*:/i;

class TurtleJisonParser extends JisonParser {
    constructor(yy = {}, lexer = new TurtleJisonLexer(yy)) {
        super(yy, lexer);
        this.symbols_ = {"error":2,"turtleDoc":3,"WSS":4,"Qstatement_E_Star":5,"EOF":6,"WS_OR_COMMENT":7,"WS":8,"COMMENT":9,"statement":10,"directive":11,"triples":12,"GT_DOT":13,"prefixID":14,"base":15,"sparqlPrefix":16,"sparqlBase":17,"PREFIX":18,"PNAME_NS":19,"IRIREF":20,"BASE":21,"SPARQL_PREFIX":22,"SPARQL_BASE":23,"subject":24,"predicateObjectList":25,"collection_SUBJECT":26,"blankNodePropertyList_SUBJECT":27,"QpredicateObjectList_E_Opt":28,"collection":29,"blankNodePropertyList":30,"verb":31,"objectList":32,"Q_O_QGT_SEMI_E_S_Qverb_E_S_QobjectList_E_Opt_C_E_Star":33,"O_Qverb_E_S_QobjectList_E_C":34,"Q_O_Qverb_E_S_QobjectList_E_C_E_Opt":35,"O_QGT_SEMI_E_S_Qverb_E_S_QobjectList_E_Opt_C":36,"GT_SEMI":37,"object":38,"Q_O_QGT_COMMA_E_S_Qobject_E_C_E_Star":39,"O_QGT_COMMA_E_S_Qobject_E_C":40,"GT_COMMA":41,"predicate":42,"RDF_TYPE":43,"iri":44,"BlankNode":45,"literal":46,"RDFLiteral":47,"NumericLiteral":48,"BooleanLiteral":49,"NEW_SUBJECT":50,"GT_RBRACKET":51,"GT_LBRACKET":52,"GT_LPAREN":53,"Qobject_E_Star":54,"GT_RPAREN":55,"collectionObject":56,"INTEGER":57,"DECIMAL":58,"DOUBLE":59,"String":60,"Q_O_QLANGTAG_E_Or_QGT_DTYPE_E_S_Qiri_E_C_E_Opt":61,"O_QLANGTAG_E_Or_QGT_DTYPE_E_S_Qiri_E_C":62,"LANGTAG":63,"GT_DTYPE":64,"IT_true":65,"IT_false":66,"STRING_LITERAL1":67,"STRING_LITERAL2":68,"STRING_LITERAL_LONG1":69,"STRING_LITERAL_LONG2":70,"PrefixedName":71,"PNAME_LN":72,"BLANK_NODE_LABEL":73,"ANON":74,"$accept":0,"$end":1};
        this.terminals_ = {2:"error",6:"EOF",8:"WS",9:"COMMENT",13:"GT_DOT",18:"PREFIX",19:"PNAME_NS",20:"IRIREF",21:"BASE",22:"SPARQL_PREFIX",23:"SPARQL_BASE",37:"GT_SEMI",41:"GT_COMMA",43:"RDF_TYPE",51:"GT_RBRACKET",52:"GT_LBRACKET",53:"GT_LPAREN",55:"GT_RPAREN",57:"INTEGER",58:"DECIMAL",59:"DOUBLE",63:"LANGTAG",64:"GT_DTYPE",65:"IT_true",66:"IT_false",67:"STRING_LITERAL1",68:"STRING_LITERAL2",69:"STRING_LITERAL_LONG1",70:"STRING_LITERAL_LONG2",72:"PNAME_LN",73:"BLANK_NODE_LABEL",74:"ANON"};
        this.productions_ = [0,[3,3],[4,0],[4,2],[7,1],[7,1],[5,0],[5,3],[10,1],[10,2],[11,1],[11,1],[11,1],[11,1],[14,4],[15,3],[16,5],[17,2],[12,3],[12,3],[12,3],[26,1],[27,1],[28,0],[28,1],[25,4],[34,3],[35,0],[35,1],[36,3],[33,0],[33,2],[32,3],[40,4],[39,0],[39,2],[31,1],[31,1],[24,1],[24,1],[42,1],[38,1],[38,1],[38,1],[38,1],[38,1],[46,1],[46,1],[46,1],[30,4],[50,1],[29,4],[54,0],[54,3],[56,1],[56,1],[56,1],[56,1],[56,1],[48,1],[48,1],[48,1],[47,2],[62,1],[62,2],[61,0],[61,1],[49,1],[49,1],[60,1],[60,1],[60,1],[60,1],[44,1],[44,1],[71,1],[71,1],[45,1],[45,1]];

        // shorten static method to just `o` for terse STATE_TABLE
        const $V0=[6,8,9,18,19,20,21,22,23,52,53,72,73,74],$V1=[2,2],$V2=[6,18,19,20,21,22,23,52,53,72,73,74],$V3=[1,34],$V4=[2,3],$V5=[2,4],$V6=[2,5],$V7=[8,9,19,20,43,72],$V8=[8,9,13,19,20,43,72],$V9=[8,9,19],$Va=[2,73],$Vb=[2,74],$Vc=[2,77],$Vd=[2,78],$Ve=[8,9,19,20,52,53,55,57,58,59,65,66,67,68,69,70,72,73,74],$Vf=[2,52],$Vg=[2,75],$Vh=[2,76],$Vi=[1,52],$Vj=[1,53],$Vk=[1,60],$Vl=[1,57],$Vm=[1,55],$Vn=[1,59],$Vo=[8,9,19,20,52,53,57,58,59,65,66,67,68,69,70,72,73,74],$Vp=[8,9,20],$Vq=[1,87],$Vr=[1,88],$Vs=[1,99],$Vt=[1,89],$Vu=[1,93],$Vv=[1,101],$Vw=[1,102],$Vx=[1,103],$Vy=[1,104],$Vz=[1,105],$VA=[1,106],$VB=[1,107],$VC=[1,108],$VD=[1,109],$VE=[1,98],$VF=[1,91],$VG=[1,92],$VH=[1,115],$VI=[1,116],$VJ=[1,132],$VK=[1,122],$VL=[1,131],$VM=[2,51],$VN=[2,46],$VO=[2,47],$VP=[2,48],$VQ=[2,65],$VR=[2,59],$VS=[2,60],$VT=[2,61],$VU=[2,67],$VV=[2,68],$VW=[8,9,19,20,52,53,55,57,58,59,63,64,65,66,67,68,69,70,72,73,74],$VX=[2,69],$VY=[2,70],$VZ=[2,71],$V_=[2,72],$V$=[2,49],$V01=[1,170],$V11=[1,160],$V21=[1,169],$V31=[13,37],$V41=[2,30],$V51=[8,9,13,37,41],$V61=[2,41],$V71=[2,42],$V81=[2,43],$V91=[2,44],$Va1=[2,45],$Vb1=[8,9,13,37,41,63,64],$Vc1=[2,62],$Vd1=[2,66],$Ve1=[2,63],$Vf1=[37,51],$Vg1=[8,9,37,41,51],$Vh1=[8,9,37,41,51,63,64],$Vi1=[2,25],$Vj1=[13,37,41],$Vk1=[2,34],$Vl1=[2,64],$Vm1=[37,41,51],$Vn1=[2,31],$Vo1=[8,9,13,19,20,37,43,72],$Vp1=[2,32],$Vq1=[8,9,19,20,37,43,51,72],$Vr1=[2,27],$Vs1=[2,35],$Vt1=[2,29],$Vu1=[2,28],$Vv1=[1,261],$Vw1=[1,251],$Vx1=[1,260],$Vy1=[1,289],$Vz1=[1,279],$VA1=[1,288],$VB1=[1,317],$VC1=[1,307],$VD1=[1,316],$VE1=[1,352],$VF1=[1,342],$VG1=[1,351],$VH1=[2,26],$VI1=[2,33],$VJ1=[1,440],$VK1=[1,430],$VL1=[1,439],$VM1=[1,467],$VN1=[1,457],$VO1=[1,466];
        const o = JisonParser.expandParseTable;
        this.table = [o($V0,$V1,{3:1,4:2}),{1:[3]},o($V2,[2,6],{5:3,7:4,8:[1,5],9:[1,6]}),{6:[1,7],10:8,11:9,12:10,14:11,15:12,16:13,17:14,18:[1,18],19:[1,33],20:[1,26],21:[1,19],22:[1,20],23:[1,21],24:15,26:16,27:17,29:24,30:25,44:22,45:23,50:31,52:$V3,53:[1,30],71:27,72:[1,32],73:[1,28],74:[1,29]},o($V0,$V4),o($V0,$V5),o($V0,$V6),{1:[2,1]},o($V0,$V1,{4:35}),o($V0,[2,8]),{13:[1,36]},o($V0,[2,10]),o($V0,[2,11]),o($V0,[2,12]),o($V0,[2,13]),o($V7,$V1,{4:37}),o($V7,$V1,{4:38}),o($V8,$V1,{4:39}),{19:[1,40]},{20:[1,41]},o($V9,$V1,{4:42}),{20:[1,43]},o($V7,[2,38]),o($V7,[2,39]),o($V7,[2,21]),o($V8,[2,22]),o($V7,$Va),o($V7,$Vb),o($V7,$Vc),o($V7,$Vd),o($Ve,$Vf,{54:44}),o($V7,$V1,{4:45}),o($V7,$Vg),o($V7,$Vh),o($V7,[2,50]),o($V2,[2,7],{7:46,8:[1,47],9:[1,48]}),o($V0,[2,9]),{7:50,8:$Vi,9:$Vj,19:$Vk,20:$Vl,25:49,31:51,42:54,43:$Vm,44:56,71:58,72:$Vn},{7:50,8:$Vi,9:$Vj,19:$Vk,20:$Vl,25:61,31:51,42:54,43:$Vm,44:56,71:58,72:$Vn},{7:63,8:[1,65],9:[1,66],13:[2,23],19:$Vk,20:$Vl,25:64,28:62,31:51,42:54,43:$Vm,44:56,71:58,72:$Vn},{20:[1,67]},{13:[1,68]},{7:70,8:[1,71],9:[1,72],19:[1,69]},o($V0,[2,17]),o($Ve,$V1,{4:73}),{7:50,8:$Vi,9:$Vj,19:$Vk,20:$Vl,25:74,31:75,42:54,43:$Vm,44:56,71:58,72:$Vn},o($V0,$V4),o($V0,$V5),o($V0,$V6),{13:[2,18]},o($V7,$V4),o($Vo,$V1,{4:76}),o($V7,$V5),o($V7,$V6),o($Vo,[2,36]),o($Vo,[2,37]),o($Vo,[2,40]),o($Vo,$Va),o($Vo,$Vb),o($Vo,$Vg),o($Vo,$Vh),{13:[2,19]},{13:[2,20]},o($V8,$V4),{13:[2,24]},o($V8,$V5),o($V8,$V6),{13:[1,77]},o($V0,[2,15]),o($Vp,$V1,{4:78}),o($V9,$V4),o($V9,$V5),o($V9,$V6),{7:81,8:$Vq,9:$Vr,19:$Vs,20:$Vt,29:84,30:85,44:82,45:83,46:86,47:95,48:96,49:97,50:94,52:$V3,53:$Vu,55:[1,79],56:80,57:$Vv,58:$Vw,59:$Vx,60:100,65:$Vy,66:$Vz,67:$VA,68:$VB,69:$VC,70:$VD,71:90,72:$VE,73:$VF,74:$VG},{51:[1,110]},o($Vo,$V1,{4:111}),{7:113,8:$VH,9:$VI,19:$VJ,20:$VK,29:119,30:120,32:112,38:114,44:117,45:118,46:121,47:128,48:129,49:130,50:127,52:$V3,53:[1,126],57:[1,134],58:[1,135],59:[1,136],60:133,65:[1,137],66:[1,138],67:[1,139],68:[1,140],69:[1,141],70:[1,142],71:123,72:$VL,73:[1,124],74:[1,125]},o($V0,[2,14]),{7:144,8:[1,145],9:[1,146],20:[1,143]},o($V7,$VM),o($Ve,[2,53]),o($Ve,$V4),o($Ve,[2,54]),o($Ve,[2,55]),o($Ve,[2,56]),o($Ve,[2,57]),o($Ve,[2,58]),o($Ve,$V5),o($Ve,$V6),o($Ve,$Va),o($Ve,$Vb),o($Ve,$Vc),o($Ve,$Vd),o($Ve,$Vf,{54:147}),o($V7,$V1,{4:148}),o($Ve,$VN),o($Ve,$VO),o($Ve,$VP),o($Ve,$Vg),o($Ve,$Vh),o($Ve,$VQ,{61:149,62:150,63:[1,151],64:[1,152]}),o($Ve,$VR),o($Ve,$VS),o($Ve,$VT),o($Ve,$VU),o($Ve,$VV),o($VW,$VX),o($VW,$VY),o($VW,$VZ),o($VW,$V_),o($V8,$V$),{7:113,8:$VH,9:$VI,19:$V01,20:$V11,29:157,30:158,32:153,38:154,44:155,45:156,46:159,47:166,48:167,49:168,50:165,52:$V3,53:[1,164],57:[1,172],58:[1,173],59:[1,174],60:171,65:[1,175],66:[1,176],67:[1,177],68:[1,178],69:[1,179],70:[1,180],71:161,72:$V21,73:[1,162],74:[1,163]},o($V31,$V41,{33:181}),o($Vo,$V4),o($V51,$V1,{4:182}),o($Vo,$V5),o($Vo,$V6),o($V51,$V61),o($V51,$V71),o($V51,$V81),o($V51,$V91),o($V51,$Va1),o($V51,$Va),o($V51,$Vb),o($V51,$Vc),o($V51,$Vd),o($Ve,$Vf,{54:183}),o($V7,$V1,{4:184}),o($V51,$VN),o($V51,$VO),o($V51,$VP),o($V51,$Vg),o($V51,$Vh),o($V51,$VQ,{61:185,62:186,63:[1,187],64:[1,188]}),o($V51,$VR),o($V51,$VS),o($V51,$VT),o($V51,$VU),o($V51,$VV),o($Vb1,$VX),o($Vb1,$VY),o($Vb1,$VZ),o($Vb1,$V_),o($V0,[2,16]),o($Vp,$V4),o($Vp,$V5),o($Vp,$V6),o($Ve,$V1,{4:189}),{7:50,8:$Vi,9:$Vj,19:$Vk,20:$Vl,25:190,31:75,42:54,43:$Vm,44:56,71:58,72:$Vn},o($Ve,$Vc1),o($Ve,$Vd1),o($Ve,$Ve1),{19:$Vs,20:$Vt,44:191,71:90,72:$VE},o($Vf1,$V41,{33:192}),o($Vg1,$V1,{4:193}),o($Vg1,$V61),o($Vg1,$V71),o($Vg1,$V81),o($Vg1,$V91),o($Vg1,$Va1),o($Vg1,$Va),o($Vg1,$Vb),o($Vg1,$Vc),o($Vg1,$Vd),o($Ve,$Vf,{54:194}),o($V7,$V1,{4:195}),o($Vg1,$VN),o($Vg1,$VO),o($Vg1,$VP),o($Vg1,$Vg),o($Vg1,$Vh),o($Vg1,$VQ,{61:196,62:197,63:[1,198],64:[1,199]}),o($Vg1,$VR),o($Vg1,$VS),o($Vg1,$VT),o($Vg1,$VU),o($Vg1,$VV),o($Vh1,$VX),o($Vh1,$VY),o($Vh1,$VZ),o($Vh1,$V_),{13:$Vi1,36:200,37:[1,201]},o($Vj1,$Vk1,{39:202,7:203,8:[1,204],9:[1,205]}),o($Ve,$V1,{4:206}),{7:50,8:$Vi,9:$Vj,19:$Vk,20:$Vl,25:207,31:75,42:54,43:$Vm,44:56,71:58,72:$Vn},o($V51,$Vc1),o($V51,$Vd1),o($V51,$Ve1),{19:$VJ,20:$VK,44:208,71:123,72:$VL},{7:81,8:$Vq,9:$Vr,19:$Vs,20:$Vt,29:84,30:85,44:82,45:83,46:86,47:95,48:96,49:97,50:94,52:$V3,53:$Vu,55:[1,209],56:80,57:$Vv,58:$Vw,59:$Vx,60:100,65:$Vy,66:$Vz,67:$VA,68:$VB,69:$VC,70:$VD,71:90,72:$VE,73:$VF,74:$VG},{51:[1,210]},o($Ve,$Vl1),{36:211,37:[1,212],51:$Vi1},o($Vm1,$Vk1,{39:213,7:214,8:[1,215],9:[1,216]}),o($Ve,$V1,{4:217}),{7:50,8:$Vi,9:$Vj,19:$Vk,20:$Vl,25:218,31:75,42:54,43:$Vm,44:56,71:58,72:$Vn},o($Vg1,$Vc1),o($Vg1,$Vd1),o($Vg1,$Ve1),{19:$V01,20:$V11,44:219,71:161,72:$V21},o($V31,$Vn1),o($Vo1,$V1,{4:220}),o($V31,$Vp1,{40:221,41:[1,222]}),o($V51,$V4),o($V51,$V5),o($V51,$V6),{7:81,8:$Vq,9:$Vr,19:$Vs,20:$Vt,29:84,30:85,44:82,45:83,46:86,47:95,48:96,49:97,50:94,52:$V3,53:$Vu,55:[1,223],56:80,57:$Vv,58:$Vw,59:$Vx,60:100,65:$Vy,66:$Vz,67:$VA,68:$VB,69:$VC,70:$VD,71:90,72:$VE,73:$VF,74:$VG},{51:[1,224]},o($V51,$Vl1),o($Ve,$VM),o($Ve,$V$),o($Vf1,$Vn1),o($Vq1,$V1,{4:225}),o($Vf1,$Vp1,{40:226,41:[1,227]}),o($Vg1,$V4),o($Vg1,$V5),o($Vg1,$V6),{7:81,8:$Vq,9:$Vr,19:$Vs,20:$Vt,29:84,30:85,44:82,45:83,46:86,47:95,48:96,49:97,50:94,52:$V3,53:$Vu,55:[1,228],56:80,57:$Vv,58:$Vw,59:$Vx,60:100,65:$Vy,66:$Vz,67:$VA,68:$VB,69:$VC,70:$VD,71:90,72:$VE,73:$VF,74:$VG},{51:[1,229]},o($Vg1,$Vl1),o($V31,$Vr1,{42:54,44:56,71:58,35:230,7:231,34:232,31:235,8:[1,233],9:[1,234],19:$Vk,20:$Vl,43:$Vm,72:$Vn}),o($Vj1,$Vs1),o($Vo,$V1,{4:236}),o($V51,$VM),o($V51,$V$),o($Vf1,$Vr1,{42:54,44:56,71:58,35:237,7:238,34:239,31:242,8:[1,240],9:[1,241],19:$Vk,20:$Vl,43:$Vm,72:$Vn}),o($Vm1,$Vs1),o($Vo,$V1,{4:243}),o($Vg1,$VM),o($Vg1,$V$),o($V31,$Vt1),o($Vo1,$V4),o($V31,$Vu1),o($Vo1,$V5),o($Vo1,$V6),o($Vo,$V1,{4:244}),{7:113,8:$VH,9:$VI,19:$Vv1,20:$Vw1,29:248,30:249,38:245,44:246,45:247,46:250,47:257,48:258,49:259,50:256,52:$V3,53:[1,255],57:[1,263],58:[1,264],59:[1,265],60:262,65:[1,266],66:[1,267],67:[1,268],68:[1,269],69:[1,270],70:[1,271],71:252,72:$Vx1,73:[1,253],74:[1,254]},o($Vf1,$Vt1),o($Vq1,$V4),o($Vf1,$Vu1),o($Vq1,$V5),o($Vq1,$V6),o($Vo,$V1,{4:272}),{7:113,8:$VH,9:$VI,19:$Vy1,20:$Vz1,29:276,30:277,38:273,44:274,45:275,46:278,47:285,48:286,49:287,50:284,52:$V3,53:[1,283],57:[1,291],58:[1,292],59:[1,293],60:290,65:[1,294],66:[1,295],67:[1,296],68:[1,297],69:[1,298],70:[1,299],71:280,72:$VA1,73:[1,281],74:[1,282]},{7:113,8:$VH,9:$VI,19:$VB1,20:$VC1,29:304,30:305,32:300,38:301,44:302,45:303,46:306,47:313,48:314,49:315,50:312,52:$V3,53:[1,311],57:[1,319],58:[1,320],59:[1,321],60:318,65:[1,322],66:[1,323],67:[1,324],68:[1,325],69:[1,326],70:[1,327],71:308,72:$VD1,73:[1,309],74:[1,310]},o($V51,$V1,{4:328}),o($V51,$V61),o($V51,$V71),o($V51,$V81),o($V51,$V91),o($V51,$Va1),o($V51,$Va),o($V51,$Vb),o($V51,$Vc),o($V51,$Vd),o($Ve,$Vf,{54:329}),o($V7,$V1,{4:330}),o($V51,$VN),o($V51,$VO),o($V51,$VP),o($V51,$Vg),o($V51,$Vh),o($V51,$VQ,{61:331,62:332,63:[1,333],64:[1,334]}),o($V51,$VR),o($V51,$VS),o($V51,$VT),o($V51,$VU),o($V51,$VV),o($Vb1,$VX),o($Vb1,$VY),o($Vb1,$VZ),o($Vb1,$V_),{7:113,8:$VH,9:$VI,19:$VE1,20:$VF1,29:339,30:340,32:335,38:336,44:337,45:338,46:341,47:348,48:349,49:350,50:347,52:$V3,53:[1,346],57:[1,354],58:[1,355],59:[1,356],60:353,65:[1,357],66:[1,358],67:[1,359],68:[1,360],69:[1,361],70:[1,362],71:343,72:$VG1,73:[1,344],74:[1,345]},o($Vg1,$V1,{4:363}),o($Vg1,$V61),o($Vg1,$V71),o($Vg1,$V81),o($Vg1,$V91),o($Vg1,$Va1),o($Vg1,$Va),o($Vg1,$Vb),o($Vg1,$Vc),o($Vg1,$Vd),o($Ve,$Vf,{54:364}),o($V7,$V1,{4:365}),o($Vg1,$VN),o($Vg1,$VO),o($Vg1,$VP),o($Vg1,$Vg),o($Vg1,$Vh),o($Vg1,$VQ,{61:366,62:367,63:[1,368],64:[1,369]}),o($Vg1,$VR),o($Vg1,$VS),o($Vg1,$VT),o($Vg1,$VU),o($Vg1,$VV),o($Vh1,$VX),o($Vh1,$VY),o($Vh1,$VZ),o($Vh1,$V_),o($V31,$VH1),o($V51,$V1,{4:370}),o($V51,$V61),o($V51,$V71),o($V51,$V81),o($V51,$V91),o($V51,$Va1),o($V51,$Va),o($V51,$Vb),o($V51,$Vc),o($V51,$Vd),o($Ve,$Vf,{54:371}),o($V7,$V1,{4:372}),o($V51,$VN),o($V51,$VO),o($V51,$VP),o($V51,$Vg),o($V51,$Vh),o($V51,$VQ,{61:373,62:374,63:[1,375],64:[1,376]}),o($V51,$VR),o($V51,$VS),o($V51,$VT),o($V51,$VU),o($V51,$VV),o($Vb1,$VX),o($Vb1,$VY),o($Vb1,$VZ),o($Vb1,$V_),o($Vj1,$VI1,{7:377,8:[1,378],9:[1,379]}),o($Ve,$V1,{4:380}),{7:50,8:$Vi,9:$Vj,19:$Vk,20:$Vl,25:381,31:75,42:54,43:$Vm,44:56,71:58,72:$Vn},o($V51,$Vc1),o($V51,$Vd1),o($V51,$Ve1),{19:$Vv1,20:$Vw1,44:382,71:252,72:$Vx1},o($Vf1,$VH1),o($Vg1,$V1,{4:383}),o($Vg1,$V61),o($Vg1,$V71),o($Vg1,$V81),o($Vg1,$V91),o($Vg1,$Va1),o($Vg1,$Va),o($Vg1,$Vb),o($Vg1,$Vc),o($Vg1,$Vd),o($Ve,$Vf,{54:384}),o($V7,$V1,{4:385}),o($Vg1,$VN),o($Vg1,$VO),o($Vg1,$VP),o($Vg1,$Vg),o($Vg1,$Vh),o($Vg1,$VQ,{61:386,62:387,63:[1,388],64:[1,389]}),o($Vg1,$VR),o($Vg1,$VS),o($Vg1,$VT),o($Vg1,$VU),o($Vg1,$VV),o($Vh1,$VX),o($Vh1,$VY),o($Vh1,$VZ),o($Vh1,$V_),o($Vm1,$VI1,{7:390,8:[1,391],9:[1,392]}),o($Ve,$V1,{4:393}),{7:50,8:$Vi,9:$Vj,19:$Vk,20:$Vl,25:394,31:75,42:54,43:$Vm,44:56,71:58,72:$Vn},o($Vg1,$Vc1),o($Vg1,$Vd1),o($Vg1,$Ve1),{19:$Vy1,20:$Vz1,44:395,71:280,72:$VA1},o($Vj1,$Vk1,{39:396,7:397,8:[1,398],9:[1,399]}),o($Ve,$V1,{4:400}),{7:50,8:$Vi,9:$Vj,19:$Vk,20:$Vl,25:401,31:75,42:54,43:$Vm,44:56,71:58,72:$Vn},o($V51,$Vc1),o($V51,$Vd1),o($V51,$Ve1),{19:$VB1,20:$VC1,44:402,71:308,72:$VD1},o($V51,$V4),o($V51,$V5),o($V51,$V6),{7:81,8:$Vq,9:$Vr,19:$Vs,20:$Vt,29:84,30:85,44:82,45:83,46:86,47:95,48:96,49:97,50:94,52:$V3,53:$Vu,55:[1,403],56:80,57:$Vv,58:$Vw,59:$Vx,60:100,65:$Vy,66:$Vz,67:$VA,68:$VB,69:$VC,70:$VD,71:90,72:$VE,73:$VF,74:$VG},{51:[1,404]},o($V51,$Vl1),o($Vm1,$Vk1,{39:405,7:406,8:[1,407],9:[1,408]}),o($Ve,$V1,{4:409}),{7:50,8:$Vi,9:$Vj,19:$Vk,20:$Vl,25:410,31:75,42:54,43:$Vm,44:56,71:58,72:$Vn},o($Vg1,$Vc1),o($Vg1,$Vd1),o($Vg1,$Ve1),{19:$VE1,20:$VF1,44:411,71:343,72:$VG1},o($Vg1,$V4),o($Vg1,$V5),o($Vg1,$V6),{7:81,8:$Vq,9:$Vr,19:$Vs,20:$Vt,29:84,30:85,44:82,45:83,46:86,47:95,48:96,49:97,50:94,52:$V3,53:$Vu,55:[1,412],56:80,57:$Vv,58:$Vw,59:$Vx,60:100,65:$Vy,66:$Vz,67:$VA,68:$VB,69:$VC,70:$VD,71:90,72:$VE,73:$VF,74:$VG},{51:[1,413]},o($Vg1,$Vl1),o($V31,$Vp1,{40:414,41:[1,415]}),o($V51,$V4),o($V51,$V5),o($V51,$V6),{7:81,8:$Vq,9:$Vr,19:$Vs,20:$Vt,29:84,30:85,44:82,45:83,46:86,47:95,48:96,49:97,50:94,52:$V3,53:$Vu,55:[1,416],56:80,57:$Vv,58:$Vw,59:$Vx,60:100,65:$Vy,66:$Vz,67:$VA,68:$VB,69:$VC,70:$VD,71:90,72:$VE,73:$VF,74:$VG},{51:[1,417]},o($V51,$Vl1),o($V51,$VM),o($V51,$V$),o($Vf1,$Vp1,{40:418,41:[1,419]}),o($Vg1,$V4),o($Vg1,$V5),o($Vg1,$V6),{7:81,8:$Vq,9:$Vr,19:$Vs,20:$Vt,29:84,30:85,44:82,45:83,46:86,47:95,48:96,49:97,50:94,52:$V3,53:$Vu,55:[1,420],56:80,57:$Vv,58:$Vw,59:$Vx,60:100,65:$Vy,66:$Vz,67:$VA,68:$VB,69:$VC,70:$VD,71:90,72:$VE,73:$VF,74:$VG},{51:[1,421]},o($Vg1,$Vl1),o($Vg1,$VM),o($Vg1,$V$),o($Vj1,$Vs1),o($Vo,$V1,{4:422}),o($V51,$VM),o($V51,$V$),o($Vm1,$Vs1),o($Vo,$V1,{4:423}),o($Vg1,$VM),o($Vg1,$V$),{7:113,8:$VH,9:$VI,19:$VJ1,20:$VK1,29:427,30:428,38:424,44:425,45:426,46:429,47:436,48:437,49:438,50:435,52:$V3,53:[1,434],57:[1,442],58:[1,443],59:[1,444],60:441,65:[1,445],66:[1,446],67:[1,447],68:[1,448],69:[1,449],70:[1,450],71:431,72:$VL1,73:[1,432],74:[1,433]},{7:113,8:$VH,9:$VI,19:$VM1,20:$VN1,29:454,30:455,38:451,44:452,45:453,46:456,47:463,48:464,49:465,50:462,52:$V3,53:[1,461],57:[1,469],58:[1,470],59:[1,471],60:468,65:[1,472],66:[1,473],67:[1,474],68:[1,475],69:[1,476],70:[1,477],71:458,72:$VO1,73:[1,459],74:[1,460]},o($V51,$V1,{4:478}),o($V51,$V61),o($V51,$V71),o($V51,$V81),o($V51,$V91),o($V51,$Va1),o($V51,$Va),o($V51,$Vb),o($V51,$Vc),o($V51,$Vd),o($Ve,$Vf,{54:479}),o($V7,$V1,{4:480}),o($V51,$VN),o($V51,$VO),o($V51,$VP),o($V51,$Vg),o($V51,$Vh),o($V51,$VQ,{61:481,62:482,63:[1,483],64:[1,484]}),o($V51,$VR),o($V51,$VS),o($V51,$VT),o($V51,$VU),o($V51,$VV),o($Vb1,$VX),o($Vb1,$VY),o($Vb1,$VZ),o($Vb1,$V_),o($Vg1,$V1,{4:485}),o($Vg1,$V61),o($Vg1,$V71),o($Vg1,$V81),o($Vg1,$V91),o($Vg1,$Va1),o($Vg1,$Va),o($Vg1,$Vb),o($Vg1,$Vc),o($Vg1,$Vd),o($Ve,$Vf,{54:486}),o($V7,$V1,{4:487}),o($Vg1,$VN),o($Vg1,$VO),o($Vg1,$VP),o($Vg1,$Vg),o($Vg1,$Vh),o($Vg1,$VQ,{61:488,62:489,63:[1,490],64:[1,491]}),o($Vg1,$VR),o($Vg1,$VS),o($Vg1,$VT),o($Vg1,$VU),o($Vg1,$VV),o($Vh1,$VX),o($Vh1,$VY),o($Vh1,$VZ),o($Vh1,$V_),o($Vj1,$VI1,{7:492,8:[1,493],9:[1,494]}),o($Ve,$V1,{4:495}),{7:50,8:$Vi,9:$Vj,19:$Vk,20:$Vl,25:496,31:75,42:54,43:$Vm,44:56,71:58,72:$Vn},o($V51,$Vc1),o($V51,$Vd1),o($V51,$Ve1),{19:$VJ1,20:$VK1,44:497,71:431,72:$VL1},o($Vm1,$VI1,{7:498,8:[1,499],9:[1,500]}),o($Ve,$V1,{4:501}),{7:50,8:$Vi,9:$Vj,19:$Vk,20:$Vl,25:502,31:75,42:54,43:$Vm,44:56,71:58,72:$Vn},o($Vg1,$Vc1),o($Vg1,$Vd1),o($Vg1,$Ve1),{19:$VM1,20:$VN1,44:503,71:458,72:$VO1},o($V51,$V4),o($V51,$V5),o($V51,$V6),{7:81,8:$Vq,9:$Vr,19:$Vs,20:$Vt,29:84,30:85,44:82,45:83,46:86,47:95,48:96,49:97,50:94,52:$V3,53:$Vu,55:[1,504],56:80,57:$Vv,58:$Vw,59:$Vx,60:100,65:$Vy,66:$Vz,67:$VA,68:$VB,69:$VC,70:$VD,71:90,72:$VE,73:$VF,74:$VG},{51:[1,505]},o($V51,$Vl1),o($Vg1,$V4),o($Vg1,$V5),o($Vg1,$V6),{7:81,8:$Vq,9:$Vr,19:$Vs,20:$Vt,29:84,30:85,44:82,45:83,46:86,47:95,48:96,49:97,50:94,52:$V3,53:$Vu,55:[1,506],56:80,57:$Vv,58:$Vw,59:$Vx,60:100,65:$Vy,66:$Vz,67:$VA,68:$VB,69:$VC,70:$VD,71:90,72:$VE,73:$VF,74:$VG},{51:[1,507]},o($Vg1,$Vl1),o($V51,$VM),o($V51,$V$),o($Vg1,$VM),o($Vg1,$V$)];
        this.defaultActions = {7:[2,1],49:[2,18],61:[2,19],62:[2,20],64:[2,24]};
    }
    performAction (yytext, yyleng, yylineno, yy, yystate /* action[1] */, $$ /* vstack */, _$ /* lstack */) {
/* this == yyval */
          const $0 = $$.length - 1;
        switch (yystate) {
case 1:

        return { statementList: $$[$0-2].concat($$[$0-1]) };
      
break;
case 2: case 6: case 27: case 30: case 34: case 52:
this.$ = [];
break;
case 3:
this.$ = $$[$0-1].concat([$$[$0]]);
break;
case 7:
this.$ = $$[$0-2].concat($$[$0-1], $$[$0]);
break;
case 9:
this.$ = $$[$0-1].concat([$$[$0]]);;
break;
case 14:

        yy._prefixes[$$[$0-2].slice(0, -1)] = $$[$0-1];
      
break;
case 15:

        yy._setBase(yy._base === null ||
                    absoluteIRI.test($$[$0-1].slice(1, -1)) ? $$[$0-1].slice(1, -1) : yy._resolveIRI($$[$0-1].slice(1, -1)));
      
break;
case 16:

        yy._prefixes[$$[$0-2].value] = $$[$0].value;
        this.$ = [{ "type": "sparqlPrefix", keyword: $$[$0-4], ws1: $$[$0-3], prefix: $$[$0-2], ws2: $$[$0-1], namespace: $$[$0] }].concat(yy.getWhitespace());
      
break;
case 17:

        yy._setBase(yy._base === null ||
                    absoluteIRI.test($$[$0].slice(1, -1)) ? $$[$0].slice(1, -1) : yy._resolveIRI($$[$0].slice(1, -1)));
      
break;
case 18:
this.$ = yy.finishSubject([{ type: "subject_predicateObjectList", subject: $$[$0-2], ws1: $$[$0-1], predicateObjectList: $$[$0]}].concat(yy.getWhitespace()));
break;
case 19:
this.$ = yy.finishSubject([{ type: "collection_predicateObjectList", collection: $$[$0-2], ws1: $$[$0-1], predicateObjectList: $$[$0]}].concat(yy.getWhitespace()));
break;
case 20:
this.$ = yy.finishSubject($$[$0-2].concat($$[$0-1], $$[$0])) // blankNodePropertyList _QpredicateObjectList_E_Opt;
break;
case 21:
 yy.setSubject($$[$0].node); this.$ = [$$[$0].node].concat($$[$0].elts); // collection_SUBJECT
 
break;
case 22:
 yy.setSubject($$[$0].node); this.$ = [$$[$0].node].concat($$[$0].elts); // blankNodePropertyList_SUBJECT
 
break;
case 23:
this.$ = yy.getWhitespace();
break;
case 24:
this.$ = $$[$0].concat(yy.getWhitespace());;
break;
case 25:
this.$ = [{ type: "verb_objectList", verb: $$[$0-3], ws1: $$[$0-2], objectList: $$[$0-1] }].concat($$[$0]) // verb objectList _Q_O_QGT_SEMI_E_S_Qverb_E_S_QobjectList_E_Opt_C_E_Star;
break;
case 26:
this.$ = [{ type: "verb_objectList", verb: $$[$0-2], ws1: $$[$0-1], objectList: $$[$0] }];
break;
case 29:
this.$ = [$$[$0-2]].concat($$[$0-1], $$[$0]);
break;
case 31:
this.$ = $$[$0-1].concat($$[$0]) // Q_O_QGT_SEMI_E_S_Qverb_E_S_QobjectList_E_Opt_C_E_Star _O_QGT_SEMI_E_S_Qverb_E_S_QobjectList_E_Opt_C;
break;
case 32:
this.$ = yy.finishObjectList($$[$0-2], $$[$0-1].concat($$[$0])) // object _Q_O_QGT_COMMA_E_S_Qobject_E_C_E_Star;
break;
case 33:
this.$ = [$$[$0-3]].concat($$[$0-2], $$[$0-1], $$[$0]);
break;
case 35:
this.$ = $$[$0-1].concat($$[$0]) // Q_O_QGT_COMMA_E_S_Qobject_E_C_E_Star _O_QGT_COMMA_E_S_Qobject_E_C;
break;
case 36:
this.$ = yy.setPredicate($$[$0]);
break;
case 37:
this.$ = yy.setPredicate({ "type": "a", "origText": "a" }) // left is a token, right a const;
break;
case 38: case 39:
this.$ = yy.setSubject($$[$0]);
break;
case 41: case 42: case 45:
this.$ = [yy.finishTriple($$[$0])];
break;
case 43:
this.$ = [yy.finishTriple($$[$0].node)] // object collection;
break;
case 44:
 yy.finishTriple($$[$0].node); this.$ = [$$[$0].node].concat($$[$0].elts); 
break;
case 49:
this.$ = yy.finishBlankNodePropertyList($$[$0-3], $$[$0-2], $$[$0-1], $$[$0]);
break;
case 50:
this.$ = yy.startBlankNodePropertyList($$[$0]);;
break;
case 51:
this.$ = yy.makeFirstRest($$[$0-3], $$[$0-2], $$[$0-1], $$[$0]);
break;
case 53:
this.$ = $$[$0-2].concat({ws0: $$[$0-1], node: $$[$0].node, elts: $$[$0].elts}) // Qobject_E_Star object -- collectionObject;
break;
case 54: case 55: case 58:
this.$ = {node: $$[$0], elts: []};
break;
case 56:
this.$ = $$[$0] // collection collection;
break;
case 57:
this.$ = {node: $$[$0].node, elts: $$[$0].elts} // collection blankNodePropertyList;
break;
case 59:
this.$ = yy.createTypedLiteral($$[$0], XSD_INTEGER);
break;
case 60:
this.$ = yy.createTypedLiteral($$[$0], XSD_DECIMAL);
break;
case 61:
this.$ = yy.createTypedLiteral($$[$0], XSD_DOUBLE);
break;
case 62:
this.$ = yy.createParsedLiteral($$[$0].type, $$[$0-1], $$[$0].attrs);
break;
case 63:
this.$ = { type: "langTagLiteral", attrs: { language: $$[$0] } };
break;
case 64:
this.$ = { type: "datatypedLiteral", attrs: { datatype: { type: "ParsedDatatype", value: $$[$01].value, token: $$[$0-1], ws1: $$[$0], iri: $$[$01] } } };
break;
case 65:
this.$ = { type: "simpleLiteral", attrs: {} };
break;
case 67: case 68:
this.$ = yy.createTypedLiteral($$[$0], XSD_BOOLEAN);
break;
        }
    }
}

// Export module
Object.defineProperty(exports, "__esModule", { value: true });
exports.TurtleJisonParser = TurtleJisonParser;


/* generated by @ts-jison/lexer-generator 0.4.1-alpha.2 */
const { JisonLexer } = require('@ts-jison/lexer');

class TurtleJisonLexer extends JisonLexer {
    constructor (yy = {}) {
        super(yy);
        this.options = {"moduleName":"TurtleJison"};
        this.rules = [
        /^(?:\s+)/,
        /^(?:#[^\u000a\u000d]*|\/\*(?:[^*]|\*(?:[^/]|\\\/))*\*\/)/,
        /^(?:\.)/,
        /^(?:;)/,
        /^(?:,)/,
        /^(?:\[)/,
        /^(?:\])/,
        /^(?:\()/,
        /^(?:\))/,
        /^(?:\^\^)/,
        /^(?:true\b)/,
        /^(?:false\b)/,
        /^(?:[Pp][Rr][Ee][Ff][Ii][Xx])/,
        /^(?:[Bb][Aa][Ss][Ee])/,
        /^(?:@base\b)/,
        /^(?:@prefix\b)/,
        /^(?:<(?:[^\u0000-\u0020<>\"{}|^`\\]|\\u(?:[0-9]|[A-F]|[a-f])(?:[0-9]|[A-F]|[a-f])(?:[0-9]|[A-F]|[a-f])(?:[0-9]|[A-F]|[a-f])|\\U(?:[0-9]|[A-F]|[a-f])(?:[0-9]|[A-F]|[a-f])(?:[0-9]|[A-F]|[a-f])(?:[0-9]|[A-F]|[a-f])(?:[0-9]|[A-F]|[a-f])(?:[0-9]|[A-F]|[a-f])(?:[0-9]|[A-F]|[a-f])(?:[0-9]|[A-F]|[a-f]))*>)/,
        /^(?:(?:(?:[A-Z]|[a-z]|[\u00c0-\u00d6]|[\u00d8-\u00f6]|[\u00f8-\u02ff]|[\u0370-\u037d]|[\u037f-\u1fff]|[\u200c-\u200d]|[\u2070-\u218f]|[\u2c00-\u2fef]|[\u3001-\ud7ff]|[\uf900-\ufdcf]|[\ufdf0-\ufffd]|[\uD800-\uDB7F][\uDC00-\uDFFF])(?:(?:[A-Z]|[a-z]|[\u00c0-\u00d6]|[\u00d8-\u00f6]|[\u00f8-\u02ff]|[\u0370-\u037d]|[\u037f-\u1fff]|[\u200c-\u200d]|[\u2070-\u218f]|[\u2c00-\u2fef]|[\u3001-\ud7ff]|[\uf900-\ufdcf]|[\ufdf0-\ufffd]|[\uD800-\uDB7F][\uDC00-\uDFFF]|_|_|-|[0-9]|[\u00b7]|[\u0300-\u036f]|[\u203f-\u2040]|\.)*(?:[A-Z]|[a-z]|[\u00c0-\u00d6]|[\u00d8-\u00f6]|[\u00f8-\u02ff]|[\u0370-\u037d]|[\u037f-\u1fff]|[\u200c-\u200d]|[\u2070-\u218f]|[\u2c00-\u2fef]|[\u3001-\ud7ff]|[\uf900-\ufdcf]|[\ufdf0-\ufffd]|[\uD800-\uDB7F][\uDC00-\uDFFF]|_|_|-|[0-9]|[\u00b7]|[\u0300-\u036f]|[\u203f-\u2040]))?)?:(?:[A-Z]|[a-z]|[\u00c0-\u00d6]|[\u00d8-\u00f6]|[\u00f8-\u02ff]|[\u0370-\u037d]|[\u037f-\u1fff]|[\u200c-\u200d]|[\u2070-\u218f]|[\u2c00-\u2fef]|[\u3001-\ud7ff]|[\uf900-\ufdcf]|[\ufdf0-\ufffd]|[\uD800-\uDB7F][\uDC00-\uDFFF]|_|_|:|[0-9]|%(?:[0-9]|[A-F]|[a-f])(?:[0-9]|[A-F]|[a-f])|\\(?:_|~|\.|-|!|\$|&|'|\(|\)|\*|\+|,|;|=|\/|\?|#|@|%))(?:[A-Z]|[a-z]|[\u00c0-\u00d6]|[\u00d8-\u00f6]|[\u00f8-\u02ff]|[\u0370-\u037d]|[\u037f-\u1fff]|[\u200c-\u200d]|[\u2070-\u218f]|[\u2c00-\u2fef]|[\u3001-\ud7ff]|[\uf900-\ufdcf]|[\ufdf0-\ufffd]|[\uD800-\uDB7F][\uDC00-\uDFFF]|_|_|-|[0-9]|[\u00b7]|[\u0300-\u036f]|[\u203f-\u2040]|\.|:|%(?:[0-9]|[A-F]|[a-f])(?:[0-9]|[A-F]|[a-f])|\\(?:_|~|\.|-|!|\$|&|'|\(|\)|\*|\+|,|;|=|\/|\?|#|@|%))*)/,
        /^(?:(?:(?:[A-Z]|[a-z]|[\u00c0-\u00d6]|[\u00d8-\u00f6]|[\u00f8-\u02ff]|[\u0370-\u037d]|[\u037f-\u1fff]|[\u200c-\u200d]|[\u2070-\u218f]|[\u2c00-\u2fef]|[\u3001-\ud7ff]|[\uf900-\ufdcf]|[\ufdf0-\ufffd]|[\uD800-\uDB7F][\uDC00-\uDFFF])(?:(?:[A-Z]|[a-z]|[\u00c0-\u00d6]|[\u00d8-\u00f6]|[\u00f8-\u02ff]|[\u0370-\u037d]|[\u037f-\u1fff]|[\u200c-\u200d]|[\u2070-\u218f]|[\u2c00-\u2fef]|[\u3001-\ud7ff]|[\uf900-\ufdcf]|[\ufdf0-\ufffd]|[\uD800-\uDB7F][\uDC00-\uDFFF]|_|_|-|[0-9]|[\u00b7]|[\u0300-\u036f]|[\u203f-\u2040]|\.)*(?:[A-Z]|[a-z]|[\u00c0-\u00d6]|[\u00d8-\u00f6]|[\u00f8-\u02ff]|[\u0370-\u037d]|[\u037f-\u1fff]|[\u200c-\u200d]|[\u2070-\u218f]|[\u2c00-\u2fef]|[\u3001-\ud7ff]|[\uf900-\ufdcf]|[\ufdf0-\ufffd]|[\uD800-\uDB7F][\uDC00-\uDFFF]|_|_|-|[0-9]|[\u00b7]|[\u0300-\u036f]|[\u203f-\u2040]))?)?:)/,
        /^(?:_:(?:[A-Z]|[a-z]|[\u00c0-\u00d6]|[\u00d8-\u00f6]|[\u00f8-\u02ff]|[\u0370-\u037d]|[\u037f-\u1fff]|[\u200c-\u200d]|[\u2070-\u218f]|[\u2c00-\u2fef]|[\u3001-\ud7ff]|[\uf900-\ufdcf]|[\ufdf0-\ufffd]|[\uD800-\uDB7F][\uDC00-\uDFFF]|_|_|[0-9])(?:(?:[A-Z]|[a-z]|[\u00c0-\u00d6]|[\u00d8-\u00f6]|[\u00f8-\u02ff]|[\u0370-\u037d]|[\u037f-\u1fff]|[\u200c-\u200d]|[\u2070-\u218f]|[\u2c00-\u2fef]|[\u3001-\ud7ff]|[\uf900-\ufdcf]|[\ufdf0-\ufffd]|[\uD800-\uDB7F][\uDC00-\uDFFF]|_|_|-|[0-9]|[\u00b7]|[\u0300-\u036f]|[\u203f-\u2040]|\.)*(?:[A-Z]|[a-z]|[\u00c0-\u00d6]|[\u00d8-\u00f6]|[\u00f8-\u02ff]|[\u0370-\u037d]|[\u037f-\u1fff]|[\u200c-\u200d]|[\u2070-\u218f]|[\u2c00-\u2fef]|[\u3001-\ud7ff]|[\uf900-\ufdcf]|[\ufdf0-\ufffd]|[\uD800-\uDB7F][\uDC00-\uDFFF]|_|_|-|[0-9]|[\u00b7]|[\u0300-\u036f]|[\u203f-\u2040]))?)/,
        /^(?:@[A-Za-z]+(?:-[0-9A-Za-z]+)*)/,
        /^(?:[+-]?[0-9]+)/,
        /^(?:[+-]?[0-9]*\.[0-9]+)/,
        /^(?:[+-]?(?:[0-9]+\.[0-9]*[Ee][+-]?[0-9]+|\.?[0-9]+[Ee][+-]?[0-9]+))/,
        /^(?:'(?:[^\u0027\u005c\u000a\u000d]|\\[\"\'\\bfnrt]|\\u(?:[0-9]|[A-F]|[a-f])(?:[0-9]|[A-F]|[a-f])(?:[0-9]|[A-F]|[a-f])(?:[0-9]|[A-F]|[a-f])|\\U(?:[0-9]|[A-F]|[a-f])(?:[0-9]|[A-F]|[a-f])(?:[0-9]|[A-F]|[a-f])(?:[0-9]|[A-F]|[a-f])(?:[0-9]|[A-F]|[a-f])(?:[0-9]|[A-F]|[a-f])(?:[0-9]|[A-F]|[a-f])(?:[0-9]|[A-F]|[a-f]))*')/,
        /^(?:"(?:[^\u0022\u005c\u000a\u000d]|\\[\"\'\\bfnrt]|\\u(?:[0-9]|[A-F]|[a-f])(?:[0-9]|[A-F]|[a-f])(?:[0-9]|[A-F]|[a-f])(?:[0-9]|[A-F]|[a-f])|\\U(?:[0-9]|[A-F]|[a-f])(?:[0-9]|[A-F]|[a-f])(?:[0-9]|[A-F]|[a-f])(?:[0-9]|[A-F]|[a-f])(?:[0-9]|[A-F]|[a-f])(?:[0-9]|[A-F]|[a-f])(?:[0-9]|[A-F]|[a-f])(?:[0-9]|[A-F]|[a-f]))*")/,
        /^(?:'''(?:(?:'|'')?(?:[^\'\\]|\\[\"\'\\bfnrt]|\\u(?:[0-9]|[A-F]|[a-f])(?:[0-9]|[A-F]|[a-f])(?:[0-9]|[A-F]|[a-f])(?:[0-9]|[A-F]|[a-f])|\\U(?:[0-9]|[A-F]|[a-f])(?:[0-9]|[A-F]|[a-f])(?:[0-9]|[A-F]|[a-f])(?:[0-9]|[A-F]|[a-f])(?:[0-9]|[A-F]|[a-f])(?:[0-9]|[A-F]|[a-f])(?:[0-9]|[A-F]|[a-f])(?:[0-9]|[A-F]|[a-f])))*''')/,
        /^(?:"""(?:(?:"|"")?(?:[^\"\\]|\\[\"\'\\bfnrt]|\\u(?:[0-9]|[A-F]|[a-f])(?:[0-9]|[A-F]|[a-f])(?:[0-9]|[A-F]|[a-f])(?:[0-9]|[A-F]|[a-f])|\\U(?:[0-9]|[A-F]|[a-f])(?:[0-9]|[A-F]|[a-f])(?:[0-9]|[A-F]|[a-f])(?:[0-9]|[A-F]|[a-f])(?:[0-9]|[A-F]|[a-f])(?:[0-9]|[A-F]|[a-f])(?:[0-9]|[A-F]|[a-f])(?:[0-9]|[A-F]|[a-f])))*""")/,
        /^(?:\\\[(?: |\\t|\\r|\\n)*\\\])/,
        /^(?:a\b)/,
        /^(?:$)/,
        /^(?:[a-zA-Z0-9_-]+)/,
        /^(?:.)/
    ];
        this.conditions = {"INITIAL":{"rules":[0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32],"inclusive":true}};
    }
    performAction (yy, yy_, $avoiding_name_collisions, YY_START) {
              let YYSTATE = YY_START;
            switch ($avoiding_name_collisions) {
    case 0:
  // space eaten by whitespace and comments
  if (yy.skipped.last_line === yy_.yylloc.first_line &&
      yy.skipped.last_column === yy_.yylloc.first_column) {
    // immediately follows a skipped span
    yy.skipped.last_line = yy_.yylloc.last_line;
    yy.skipped.last_column = yy_.yylloc.last_column;
  } else {
    // follows something else
    yy.skipped = yy_.yylloc
  };
  yy_.yytext = {type: "ws", origText: yy_.yytext};
  return 8;

      break;
    case 1:
  // space eaten by whitespace and comments
  if (yy.skipped.last_line === yy_.yylloc.first_line &&
      yy.skipped.last_column === yy_.yylloc.first_column) {
    // immediately follows a skipped span
    yy.skipped.last_line = yy_.yylloc.last_line;
    yy.skipped.last_column = yy_.yylloc.last_column;
  } else {
    // follows something else
    yy.skipped = yy_.yylloc
  };
  yy_.yytext = {type: "comment", origText: yy_.yytext};
  return 9;

      break;
    case 2:yy_.yytext = { type: "token", origText: yy_.yytext }; return 13;
    case 3:yy_.yytext = { type: "token", origText: yy_.yytext }; return 37;
    case 4:yy_.yytext = { type: "token", origText: yy_.yytext }; return 41;
    case 5:yy_.yytext = { type: "startBNode", origText: yy_.yytext }; return 52;
    case 6:yy_.yytext = { type: "endBNode", origText: yy_.yytext }; return 51;
    case 7:yy_.yytext = { type: "startCollection", origText: yy_.yytext }; return 53;
    case 8:yy_.yytext = { type: "endCollection", origText: yy_.yytext }; return 55;
    case 9:yy_.yytext = { type: "token", origText: yy_.yytext }; return 64;
    case 10:yy_.yytext = { type: "boolean", origText: yy_.yytext }; return 65;
    case 11:yy_.yytext = { type: "boolean", origText: yy_.yytext }; return 66;
    case 12:yy_.yytext = { type: "KEYWORD", origText: yy_.yytext }; return 22;
    case 13:yy_.yytext = { type: "KEYWORD", origText: yy_.yytext }; return 23;
    case 14:yy_.yytext = { type: "KEYWORD", origText: yy_.yytext }; return 21;
    case 15:yy_.yytext = { type: "KEYWORD", origText: yy_.yytext }; return 18;
    case 16:yy_.yytext = yy.createRelativeIri(yy_.yytext); return 20;
    case 17:yy_.yytext = yy.parsePName(yy_.yytext); return 72;
    case 18:yy_.yytext = yy.parsePrefix(yy_.yytext); return 19;
    case 19:yy_.yytext = yy.createBlankNode("BLANK_NODE_LABEL", yy_.yytext); return 73;
    case 20:yy_.yytext = { type: "LANGTAG", value: yy_.yytext.substring(1), origText: yy_.yytext }; return 63;
    case 21:yy_.yytext = { type: "INTEGER", value: yy_.yytext, origText: yy_.yytext }; return 57;
    case 22:yy_.yytext = { type: "DECIMAL", value: yy_.yytext, origText: yy_.yytext }; return 58;
    case 23:yy_.yytext = { type: "DOUBLE",  value: yy_.yytext, origText: yy_.yytext }; return 59;
    case 24:yy_.yytext = { type: "STRING_LITERAL1", value: yy.unescapeString(yy_.yytext, 1), origText: yy_.yytext }; return 67;
    case 25:yy_.yytext = { type: "STRING_LITERAL2", value: yy.unescapeString(yy_.yytext, 1), origText: yy_.yytext }; return 68;
    case 26:yy_.yytext = { type: "STRING_LITERAL_LONG1", value: yy.unescapeString(yy_.yytext, 3), origText: yy_.yytext }; return 69;
    case 27:yy_.yytext = { type: "STRING_LITERAL_LONG2", value: yy.unescapeString(yy_.yytext, 3), origText: yy_.yytext }; return 70;
    case 28:yy_.yytext = yy.createBlankNode("ANON", yy_.yytext); return 74;
    case 29:yy_.yytext = { type: "keyword", origText: yy_.yytext }; return 43;
    case 30:return 6;
    case 31:return 'unexpected word "'+yy_.yytext+'"';
    case 32:return 'invalid character '+yy_.yytext;
        }
    }
}


// Export module
Object.defineProperty(exports, "__esModule", { value: true });
exports.TurtleJisonLexer = TurtleJisonLexer;


const { JisonParser, o } = require('@ts-jison/parser');
/**
 * parser generated by  @ts-jison/parser-generator 0.4.1-alpha.2
 * @returns Parser implementing JisonParserApi and a Lexer implementing JisonLexerApi.
 */

  /*
    ShEx parser in the Jison parser generator format.
  */

  const RDF = 'http://www.w3.org/1999/02/22-rdf-syntax-ns#',
      RDF_TYPE  = RDF + 'type',
      RDF_FIRST = RDF + 'first',
      RDF_REST  = RDF + 'rest',
      RDF_NIL   = RDF + 'nil',
      XSD = 'http://www.w3.org/2001/XMLSchema#',
      XSD_INTEGER  = XSD + 'integer',
      XSD_DECIMAL  = XSD + 'decimal',
      XSD_FLOAT   = XSD + 'float',
      XSD_DOUBLE   = XSD + 'double',
      XSD_BOOLEAN  = XSD + 'boolean',
      XSD_TRUE =  '"true"^^'  + XSD_BOOLEAN,
      XSD_FALSE = '"false"^^' + XSD_BOOLEAN,
      XSD_PATTERN        = XSD + 'pattern',
      XSD_MININCLUSIVE   = XSD + 'minInclusive',
      XSD_MINEXCLUSIVE   = XSD + 'minExclusive',
      XSD_MAXINCLUSIVE   = XSD + 'maxInclusive',
      XSD_MAXEXCLUSIVE   = XSD + 'maxExclusive',
      XSD_LENGTH         = XSD + 'length',
      XSD_MINLENGTH      = XSD + 'minLength',
      XSD_MAXLENGTH      = XSD + 'maxLength',
      XSD_TOTALDIGITS    = XSD + 'totalDigits',
      XSD_FRACTIONDIGITS = XSD + 'fractionDigits';

  const numericDatatypes = [
      XSD + "integer",
      XSD + "decimal",
      XSD + "float",
      XSD + "double",
      XSD + "string",
      XSD + "boolean",
      XSD + "dateTime",
      XSD + "nonPositiveInteger",
      XSD + "negativeInteger",
      XSD + "long",
      XSD + "int",
      XSD + "short",
      XSD + "byte",
      XSD + "nonNegativeInteger",
      XSD + "unsignedLong",
      XSD + "unsignedInt",
      XSD + "unsignedShort",
      XSD + "unsignedByte",
      XSD + "positiveInteger"
  ];

  const absoluteIRI = /^[a-z][a-z0-9+.-]*:/i;


  // Creates a literal with the given value and type
  function createLiteral(value, type) {
    return { value: value, type: type };
  }

  // Regular expression and replacement strings to escape strings
  const stringEscapeReplacements = { '\\': '\\', "'": "'", '"': '"',
                                   't': '\t', 'b': '\b', 'n': '\n', 'r': '\r', 'f': '\f' },
      semactEscapeReplacements = { '\\': '\\', '%': '%' },
      pnameEscapeReplacements = {
        '\\': '\\', "'": "'", '"': '"',
        'n': '\n', 'r': '\r', 't': '\t', 'f': '\f', 'b': '\b',
        '_': '_', '~': '~', '.': '.', '-': '-', '!': '!', '$': '$', '&': '&',
        '(': '(', ')': ')', '*': '*', '+': '+', ',': ',', ';': ';', '=': '=',
        '/': '/', '?': '?', '#': '#', '@': '@', '%': '%',
      };


  // Translates string escape codes in the string into their textual equivalent
  function unescapeString(string, trimLength) {
    string = string.substring(trimLength, string.length - trimLength);
    return unescapeText(string, stringEscapeReplacements);
  }

  function unescapeLangString(string, trimLength) {
    const at = string.lastIndexOf("@");
    const lang = string.substr(at);
    string = string.substr(0, at);
    const u = unescapeString(string, trimLength);
    return extend(u, { language: lowercase(lang.substr(1)) });
  }

  function unescapeText (string, replacements) {
    const regex = /\\u([a-fA-F0-9]{4})|\\U([a-fA-F0-9]{8})|\\(.)/g;
    try {
      string = string.replace(regex, function (sequence, unicode4, unicode8, escapedChar) {
        let charCode;
        if (unicode4) {
          charCode = parseInt(unicode4, 16);
          if (isNaN(charCode)) throw new Error(); // can never happen (regex), but helps performance
          return String.fromCharCode(charCode);
        }
        else if (unicode8) {
          charCode = parseInt(unicode8, 16);
          if (isNaN(charCode)) throw new Error(); // can never happen (regex), but helps performance
          if (charCode < 0xFFFF) return String.fromCharCode(charCode);
          return String.fromCharCode(0xD800 + ((charCode -= 0x10000) >> 10), 0xDC00 + (charCode & 0x3FF));
        }
        else {
          const replacement = replacements[escapedChar];
          if (!replacement) throw new Error("no replacement found for '" + escapedChar + "'");
          return replacement;
        }
      });
      return string;
    }
    catch (error) { console.warn(error); return ''; }
  }

class TurtleJisonParser extends JisonParser {
    constructor(yy = {}, lexer = new TurtleJisonLexer(yy)) {
        super(yy, lexer);
        this.symbols_ = {"error":2,"turtleDoc":3,"WS":4,"Qstatement_E_Star":5,"EOF":6,"statement":7,"directive":8,"triples":9,"GT_DOT":10,"prefixID":11,"base":12,"sparqlPrefix":13,"sparqlBase":14,"PREFIX":15,"PNAME_NS":16,"IRIREF":17,"BASE":18,"SPARQL_PREFIX":19,"SPARQL_BASE":20,"subject":21,"predicateObjectList":22,"blankNodePropertyList":23,"QpredicateObjectList_E_Opt":24,"verb":25,"objectList":26,"Q_O_QGT_SEMI_E_S_Qverb_E_S_QobjectList_E_Opt_C_E_Star":27,"O_Qverb_E_S_QobjectList_E_C":28,"Q_O_Qverb_E_S_QobjectList_E_C_E_Opt":29,"O_QGT_SEMI_E_S_Qverb_E_S_QobjectList_E_Opt_C":30,"GT_SEMI":31,"object":32,"Q_O_QGT_COMMA_E_S_Qobject_E_C_E_Star":33,"O_QGT_COMMA_E_S_Qobject_E_C":34,"GT_COMMA":35,"predicate":36,"RDF_TYPE":37,"iri":38,"BlankNode":39,"collection":40,"literal":41,"RDFLiteral":42,"NumericLiteral":43,"BooleanLiteral":44,"GT_LBRACKET":45,"NEW_SUBJECT":46,"GT_RBRACKET":47,"GT_LPAREN":48,"Qobject_E_Star":49,"GT_RPAREN":50,"collectionObject":51,"INTEGER":52,"DECIMAL":53,"DOUBLE":54,"String":55,"Q_O_QLANGTAG_E_Or_QGT_DTYPE_E_S_Qiri_E_C_E_Opt":56,"O_QLANGTAG_E_Or_QGT_DTYPE_E_S_Qiri_E_C":57,"LANGTAG":58,"GT_DTYPE":59,"IT_true":60,"IT_false":61,"STRING_LITERAL1":62,"STRING_LITERAL2":63,"STRING_LITERAL_LONG1":64,"STRING_LITERAL_LONG2":65,"PrefixedName":66,"PNAME_LN":67,"BLANK_NODE_LABEL":68,"ANON":69,"$accept":0,"$end":1};
        this.terminals_ = {2:"error",6:"EOF",10:"GT_DOT",15:"PREFIX",16:"PNAME_NS",17:"IRIREF",18:"BASE",19:"SPARQL_PREFIX",20:"SPARQL_BASE",31:"GT_SEMI",35:"GT_COMMA",37:"RDF_TYPE",45:"GT_LBRACKET",47:"GT_RBRACKET",48:"GT_LPAREN",50:"GT_RPAREN",52:"INTEGER",53:"DECIMAL",54:"DOUBLE",58:"LANGTAG",59:"GT_DTYPE",60:"IT_true",61:"IT_false",62:"STRING_LITERAL1",63:"STRING_LITERAL2",64:"STRING_LITERAL_LONG1",65:"STRING_LITERAL_LONG2",67:"PNAME_LN",68:"BLANK_NODE_LABEL",69:"ANON"};
        this.productions_ = [0,[3,3],[4,0],[5,0],[5,2],[7,1],[7,2],[8,1],[8,1],[8,1],[8,1],[11,4],[12,3],[13,5],[14,2],[9,3],[9,2],[24,0],[24,1],[22,5],[28,2],[29,0],[29,1],[30,2],[27,0],[27,2],[26,3],[34,3],[33,0],[33,2],[25,1],[25,1],[21,1],[21,1],[21,1],[36,1],[32,1],[32,1],[32,1],[32,1],[32,1],[41,1],[41,1],[41,1],[23,4],[46,0],[40,3],[49,0],[49,2],[51,1],[51,1],[51,1],[51,1],[51,1],[43,1],[43,1],[43,1],[42,2],[57,1],[57,2],[56,0],[56,1],[44,1],[44,1],[55,1],[55,1],[55,1],[55,1],[38,1],[38,1],[66,1],[66,1],[39,1],[39,1]];

        // shorten static method to just `o` for terse STATE_TABLE
        const $V0=[6,15,16,17,18,19,20,45,48,67,68,69],$V1=[2,2],$V2=[16,17,37,67],$V3=[1,40],$V4=[1,37],$V5=[1,35],$V6=[1,39],$V7=[2,45],$V8=[2,68],$V9=[2,69],$Va=[2,72],$Vb=[2,73],$Vc=[16,17,45,48,50,52,53,54,60,61,62,63,64,65,67,68,69],$Vd=[2,47],$Ve=[2,70],$Vf=[2,71],$Vg=[16,17,45,48,52,53,54,60,61,62,63,64,65,67,68,69],$Vh=[1,71],$Vi=[1,61],$Vj=[1,66],$Vk=[1,65],$Vl=[1,73],$Vm=[1,74],$Vn=[1,75],$Vo=[1,76],$Vp=[1,77],$Vq=[1,78],$Vr=[1,79],$Vs=[1,80],$Vt=[1,81],$Vu=[1,70],$Vv=[1,63],$Vw=[1,64],$Vx=[1,99],$Vy=[1,89],$Vz=[1,98],$VA=[2,46],$VB=[2,41],$VC=[2,42],$VD=[2,43],$VE=[2,60],$VF=[2,54],$VG=[2,55],$VH=[2,56],$VI=[2,62],$VJ=[2,63],$VK=[16,17,45,48,50,52,53,54,58,59,60,61,62,63,64,65,67,68,69],$VL=[2,64],$VM=[2,65],$VN=[2,66],$VO=[2,67],$VP=[10,31],$VQ=[10,31,35],$VR=[2,36],$VS=[2,37],$VT=[2,38],$VU=[2,39],$VV=[2,40],$VW=[10,31,35,58,59],$VX=[2,44],$VY=[1,146],$VZ=[1,136],$V_=[1,145],$V$=[2,57],$V01=[2,61],$V11=[2,58],$V21=[2,24],$V31=[2,28],$V41=[31,47],$V51=[31,35,47],$V61=[31,35,47,58,59],$V71=[2,59],$V81=[2,19],$V91=[2,26],$Va1=[2,25],$Vb1=[2,21],$Vc1=[2,29],$Vd1=[2,23],$Ve1=[2,22],$Vf1=[1,210],$Vg1=[1,200],$Vh1=[1,209],$Vi1=[1,237],$Vj1=[1,227],$Vk1=[1,236],$Vl1=[2,20],$Vm1=[2,27],$Vn1=[1,282],$Vo1=[1,272],$Vp1=[1,281],$Vq1=[1,309],$Vr1=[1,299],$Vs1=[1,308],$Vt1=[1,372],$Vu1=[1,362],$Vv1=[1,371],$Vw1=[1,406],$Vx1=[1,396],$Vy1=[1,405];
        const o = JisonParser.expandParseTable;
        this.table = [o($V0,$V1,{3:1,4:2}),{1:[3]},o($V0,[2,3],{5:3}),{6:[1,4],7:5,8:6,9:7,11:8,12:9,13:10,14:11,15:[1,14],16:[1,28],17:[1,22],18:[1,15],19:[1,16],20:[1,17],21:12,23:13,38:18,39:19,40:20,45:[1,21],48:[1,26],66:23,67:[1,27],68:[1,24],69:[1,25]},{1:[2,1]},o($V0,[2,4]),o($V0,[2,5]),{10:[1,29]},o($V0,[2,7]),o($V0,[2,8]),o($V0,[2,9]),o($V0,[2,10]),o($V2,$V1,{4:30}),{10:[2,17],16:$V3,17:$V4,22:32,24:31,25:33,36:34,37:$V5,38:36,66:38,67:$V6},{16:[1,41]},{17:[1,42]},{4:43,16:$V1},{17:[1,44]},o($V2,[2,32]),o($V2,[2,33]),o($V2,[2,34]),o($V2,$V7,{46:45}),o($V2,$V8),o($V2,$V9),o($V2,$Va),o($V2,$Vb),o($Vc,$Vd,{49:46}),o($V2,$Ve),o($V2,$Vf),o($V0,[2,6]),{16:$V3,17:$V4,22:47,25:33,36:34,37:$V5,38:36,66:38,67:$V6},{10:[2,16]},{10:[2,18]},o($Vg,$V1,{4:48}),o($Vg,[2,30]),o($Vg,[2,31]),o($Vg,[2,35]),o($Vg,$V8),o($Vg,$V9),o($Vg,$Ve),o($Vg,$Vf),{17:[1,49]},{10:[1,50]},{16:[1,51]},o($V0,[2,14]),{16:$V3,17:$V4,22:52,25:53,36:34,37:$V5,38:36,66:38,67:$V6},{16:$Vh,17:$Vi,23:59,38:56,39:57,40:58,41:60,42:67,43:68,44:69,45:$Vj,48:$Vk,50:[1,54],51:55,52:$Vl,53:$Vm,54:$Vn,55:72,60:$Vo,61:$Vp,62:$Vq,63:$Vr,64:$Vs,65:$Vt,66:62,67:$Vu,68:$Vv,69:$Vw},{10:[2,15]},{16:$Vx,17:$Vy,23:87,26:82,32:83,38:84,39:85,40:86,41:88,42:95,43:96,44:97,45:[1,94],48:[1,93],52:[1,101],53:[1,102],54:[1,103],55:100,60:[1,104],61:[1,105],62:[1,106],63:[1,107],64:[1,108],65:[1,109],66:90,67:$Vz,68:[1,91],69:[1,92]},{10:[1,110]},o($V0,[2,12]),{4:111,17:$V1},{47:[1,112]},o($Vg,$V1,{4:113}),o($V2,$VA),o($Vc,[2,48]),o($Vc,[2,49]),o($Vc,[2,50]),o($Vc,[2,51]),o($Vc,[2,52]),o($Vc,[2,53]),o($Vc,$V8),o($Vc,$V9),o($Vc,$Va),o($Vc,$Vb),o($Vc,$Vd,{49:114}),o($V2,$V7,{46:115}),o($Vc,$VB),o($Vc,$VC),o($Vc,$VD),o($Vc,$Ve),o($Vc,$Vf),o($Vc,$VE,{56:116,57:117,58:[1,118],59:[1,119]}),o($Vc,$VF),o($Vc,$VG),o($Vc,$VH),o($Vc,$VI),o($Vc,$VJ),o($VK,$VL),o($VK,$VM),o($VK,$VN),o($VK,$VO),o($VP,$V1,{4:120}),o($VQ,$V1,{4:121}),o($VQ,$VR),o($VQ,$VS),o($VQ,$VT),o($VQ,$VU),o($VQ,$VV),o($VQ,$V8),o($VQ,$V9),o($VQ,$Va),o($VQ,$Vb),o($Vc,$Vd,{49:122}),o($V2,$V7,{46:123}),o($VQ,$VB),o($VQ,$VC),o($VQ,$VD),o($VQ,$Ve),o($VQ,$Vf),o($VQ,$VE,{56:124,57:125,58:[1,126],59:[1,127]}),o($VQ,$VF),o($VQ,$VG),o($VQ,$VH),o($VQ,$VI),o($VQ,$VJ),o($VW,$VL),o($VW,$VM),o($VW,$VN),o($VW,$VO),o($V0,[2,11]),{17:[1,128]},o([10,16,17,37,67],$VX),{16:$VY,17:$VZ,23:134,26:129,32:130,38:131,39:132,40:133,41:135,42:142,43:143,44:144,45:[1,141],48:[1,140],52:[1,148],53:[1,149],54:[1,150],55:147,60:[1,151],61:[1,152],62:[1,153],63:[1,154],64:[1,155],65:[1,156],66:137,67:$V_,68:[1,138],69:[1,139]},{16:$Vh,17:$Vi,23:59,38:56,39:57,40:58,41:60,42:67,43:68,44:69,45:$Vj,48:$Vk,50:[1,157],51:55,52:$Vl,53:$Vm,54:$Vn,55:72,60:$Vo,61:$Vp,62:$Vq,63:$Vr,64:$Vs,65:$Vt,66:62,67:$Vu,68:$Vv,69:$Vw},{16:$V3,17:$V4,22:158,25:53,36:34,37:$V5,38:36,66:38,67:$V6},o($Vc,$V$),o($Vc,$V01),o($Vc,$V11),{16:$Vh,17:$Vi,38:159,66:62,67:$Vu},o($VP,$V21,{27:160}),o($VQ,$V31,{33:161}),{16:$Vh,17:$Vi,23:59,38:56,39:57,40:58,41:60,42:67,43:68,44:69,45:$Vj,48:$Vk,50:[1,162],51:55,52:$Vl,53:$Vm,54:$Vn,55:72,60:$Vo,61:$Vp,62:$Vq,63:$Vr,64:$Vs,65:$Vt,66:62,67:$Vu,68:$Vv,69:$Vw},{16:$V3,17:$V4,22:163,25:53,36:34,37:$V5,38:36,66:38,67:$V6},o($VQ,$V$),o($VQ,$V01),o($VQ,$V11),{16:$Vx,17:$Vy,38:164,66:90,67:$Vz},o($V0,[2,13]),o($V41,$V1,{4:165}),o($V51,$V1,{4:166}),o($V51,$VR),o($V51,$VS),o($V51,$VT),o($V51,$VU),o($V51,$VV),o($V51,$V8),o($V51,$V9),o($V51,$Va),o($V51,$Vb),o($Vc,$Vd,{49:167}),o($V2,$V7,{46:168}),o($V51,$VB),o($V51,$VC),o($V51,$VD),o($V51,$Ve),o($V51,$Vf),o($V51,$VE,{56:169,57:170,58:[1,171],59:[1,172]}),o($V51,$VF),o($V51,$VG),o($V51,$VH),o($V51,$VI),o($V51,$VJ),o($V61,$VL),o($V61,$VM),o($V61,$VN),o($V61,$VO),o($Vc,$VA),{47:[1,173]},o($Vc,$V71),{10:$V81,30:174,31:[1,175]},o($VP,$V91,{34:176,35:[1,177]}),o($VQ,$VA),{47:[1,178]},o($VQ,$V71),o($V41,$V21,{27:179}),o($V51,$V31,{33:180}),{16:$Vh,17:$Vi,23:59,38:56,39:57,40:58,41:60,42:67,43:68,44:69,45:$Vj,48:$Vk,50:[1,181],51:55,52:$Vl,53:$Vm,54:$Vn,55:72,60:$Vo,61:$Vp,62:$Vq,63:$Vr,64:$Vs,65:$Vt,66:62,67:$Vu,68:$Vv,69:$Vw},{16:$V3,17:$V4,22:182,25:53,36:34,37:$V5,38:36,66:38,67:$V6},o($V51,$V$),o($V51,$V01),o($V51,$V11),{16:$VY,17:$VZ,38:183,66:137,67:$V_},o($Vc,$VX),o($VP,$Va1),o($VP,$Vb1,{36:34,38:36,66:38,29:184,28:185,25:186,16:$V3,17:$V4,37:$V5,67:$V6}),o($VQ,$Vc1),o($Vg,$V1,{4:187}),o($VQ,$VX),{30:188,31:[1,189],47:$V81},o($V41,$V91,{34:190,35:[1,191]}),o($V51,$VA),{47:[1,192]},o($V51,$V71),o($VP,$Vd1),o($VP,$Ve1),{16:$Vf1,17:$Vg1,23:198,26:193,32:194,38:195,39:196,40:197,41:199,42:206,43:207,44:208,45:[1,205],48:[1,204],52:[1,212],53:[1,213],54:[1,214],55:211,60:[1,215],61:[1,216],62:[1,217],63:[1,218],64:[1,219],65:[1,220],66:201,67:$Vh1,68:[1,202],69:[1,203]},{16:$Vi1,17:$Vj1,23:225,32:221,38:222,39:223,40:224,41:226,42:233,43:234,44:235,45:[1,232],48:[1,231],52:[1,239],53:[1,240],54:[1,241],55:238,60:[1,242],61:[1,243],62:[1,244],63:[1,245],64:[1,246],65:[1,247],66:228,67:$Vk1,68:[1,229],69:[1,230]},o($V41,$Va1),o($V41,$Vb1,{36:34,38:36,66:38,29:248,28:249,25:250,16:$V3,17:$V4,37:$V5,67:$V6}),o($V51,$Vc1),o($Vg,$V1,{4:251}),o($V51,$VX),o($VP,$Vl1),o($VQ,$V1,{4:252}),o($VQ,$VR),o($VQ,$VS),o($VQ,$VT),o($VQ,$VU),o($VQ,$VV),o($VQ,$V8),o($VQ,$V9),o($VQ,$Va),o($VQ,$Vb),o($Vc,$Vd,{49:253}),o($V2,$V7,{46:254}),o($VQ,$VB),o($VQ,$VC),o($VQ,$VD),o($VQ,$Ve),o($VQ,$Vf),o($VQ,$VE,{56:255,57:256,58:[1,257],59:[1,258]}),o($VQ,$VF),o($VQ,$VG),o($VQ,$VH),o($VQ,$VI),o($VQ,$VJ),o($VW,$VL),o($VW,$VM),o($VW,$VN),o($VW,$VO),o($VQ,$Vm1),o($VQ,$VR),o($VQ,$VS),o($VQ,$VT),o($VQ,$VU),o($VQ,$VV),o($VQ,$V8),o($VQ,$V9),o($VQ,$Va),o($VQ,$Vb),o($Vc,$Vd,{49:259}),o($V2,$V7,{46:260}),o($VQ,$VB),o($VQ,$VC),o($VQ,$VD),o($VQ,$Ve),o($VQ,$Vf),o($VQ,$VE,{56:261,57:262,58:[1,263],59:[1,264]}),o($VQ,$VF),o($VQ,$VG),o($VQ,$VH),o($VQ,$VI),o($VQ,$VJ),o($VW,$VL),o($VW,$VM),o($VW,$VN),o($VW,$VO),o($V41,$Vd1),o($V41,$Ve1),{16:$Vn1,17:$Vo1,23:270,26:265,32:266,38:267,39:268,40:269,41:271,42:278,43:279,44:280,45:[1,277],48:[1,276],52:[1,284],53:[1,285],54:[1,286],55:283,60:[1,287],61:[1,288],62:[1,289],63:[1,290],64:[1,291],65:[1,292],66:273,67:$Vp1,68:[1,274],69:[1,275]},{16:$Vq1,17:$Vr1,23:297,32:293,38:294,39:295,40:296,41:298,42:305,43:306,44:307,45:[1,304],48:[1,303],52:[1,311],53:[1,312],54:[1,313],55:310,60:[1,314],61:[1,315],62:[1,316],63:[1,317],64:[1,318],65:[1,319],66:300,67:$Vs1,68:[1,301],69:[1,302]},o($VQ,$V31,{33:320}),{16:$Vh,17:$Vi,23:59,38:56,39:57,40:58,41:60,42:67,43:68,44:69,45:$Vj,48:$Vk,50:[1,321],51:55,52:$Vl,53:$Vm,54:$Vn,55:72,60:$Vo,61:$Vp,62:$Vq,63:$Vr,64:$Vs,65:$Vt,66:62,67:$Vu,68:$Vv,69:$Vw},{16:$V3,17:$V4,22:322,25:53,36:34,37:$V5,38:36,66:38,67:$V6},o($VQ,$V$),o($VQ,$V01),o($VQ,$V11),{16:$Vf1,17:$Vg1,38:323,66:201,67:$Vh1},{16:$Vh,17:$Vi,23:59,38:56,39:57,40:58,41:60,42:67,43:68,44:69,45:$Vj,48:$Vk,50:[1,324],51:55,52:$Vl,53:$Vm,54:$Vn,55:72,60:$Vo,61:$Vp,62:$Vq,63:$Vr,64:$Vs,65:$Vt,66:62,67:$Vu,68:$Vv,69:$Vw},{16:$V3,17:$V4,22:325,25:53,36:34,37:$V5,38:36,66:38,67:$V6},o($VQ,$V$),o($VQ,$V01),o($VQ,$V11),{16:$Vi1,17:$Vj1,38:326,66:228,67:$Vk1},o($V41,$Vl1),o($V51,$V1,{4:327}),o($V51,$VR),o($V51,$VS),o($V51,$VT),o($V51,$VU),o($V51,$VV),o($V51,$V8),o($V51,$V9),o($V51,$Va),o($V51,$Vb),o($Vc,$Vd,{49:328}),o($V2,$V7,{46:329}),o($V51,$VB),o($V51,$VC),o($V51,$VD),o($V51,$Ve),o($V51,$Vf),o($V51,$VE,{56:330,57:331,58:[1,332],59:[1,333]}),o($V51,$VF),o($V51,$VG),o($V51,$VH),o($V51,$VI),o($V51,$VJ),o($V61,$VL),o($V61,$VM),o($V61,$VN),o($V61,$VO),o($V51,$Vm1),o($V51,$VR),o($V51,$VS),o($V51,$VT),o($V51,$VU),o($V51,$VV),o($V51,$V8),o($V51,$V9),o($V51,$Va),o($V51,$Vb),o($Vc,$Vd,{49:334}),o($V2,$V7,{46:335}),o($V51,$VB),o($V51,$VC),o($V51,$VD),o($V51,$Ve),o($V51,$Vf),o($V51,$VE,{56:336,57:337,58:[1,338],59:[1,339]}),o($V51,$VF),o($V51,$VG),o($V51,$VH),o($V51,$VI),o($V51,$VJ),o($V61,$VL),o($V61,$VM),o($V61,$VN),o($V61,$VO),o($VP,$V91,{34:340,35:[1,341]}),o($VQ,$VA),{47:[1,342]},o($VQ,$V71),o($VQ,$VA),{47:[1,343]},o($VQ,$V71),o($V51,$V31,{33:344}),{16:$Vh,17:$Vi,23:59,38:56,39:57,40:58,41:60,42:67,43:68,44:69,45:$Vj,48:$Vk,50:[1,345],51:55,52:$Vl,53:$Vm,54:$Vn,55:72,60:$Vo,61:$Vp,62:$Vq,63:$Vr,64:$Vs,65:$Vt,66:62,67:$Vu,68:$Vv,69:$Vw},{16:$V3,17:$V4,22:346,25:53,36:34,37:$V5,38:36,66:38,67:$V6},o($V51,$V$),o($V51,$V01),o($V51,$V11),{16:$Vn1,17:$Vo1,38:347,66:273,67:$Vp1},{16:$Vh,17:$Vi,23:59,38:56,39:57,40:58,41:60,42:67,43:68,44:69,45:$Vj,48:$Vk,50:[1,348],51:55,52:$Vl,53:$Vm,54:$Vn,55:72,60:$Vo,61:$Vp,62:$Vq,63:$Vr,64:$Vs,65:$Vt,66:62,67:$Vu,68:$Vv,69:$Vw},{16:$V3,17:$V4,22:349,25:53,36:34,37:$V5,38:36,66:38,67:$V6},o($V51,$V$),o($V51,$V01),o($V51,$V11),{16:$Vq1,17:$Vr1,38:350,66:300,67:$Vs1},o($VQ,$Vc1),o($Vg,$V1,{4:351}),o($VQ,$VX),o($VQ,$VX),o($V41,$V91,{34:352,35:[1,353]}),o($V51,$VA),{47:[1,354]},o($V51,$V71),o($V51,$VA),{47:[1,355]},o($V51,$V71),{16:$Vt1,17:$Vu1,23:360,32:356,38:357,39:358,40:359,41:361,42:368,43:369,44:370,45:[1,367],48:[1,366],52:[1,374],53:[1,375],54:[1,376],55:373,60:[1,377],61:[1,378],62:[1,379],63:[1,380],64:[1,381],65:[1,382],66:363,67:$Vv1,68:[1,364],69:[1,365]},o($V51,$Vc1),o($Vg,$V1,{4:383}),o($V51,$VX),o($V51,$VX),o($VQ,$Vm1),o($VQ,$VR),o($VQ,$VS),o($VQ,$VT),o($VQ,$VU),o($VQ,$VV),o($VQ,$V8),o($VQ,$V9),o($VQ,$Va),o($VQ,$Vb),o($Vc,$Vd,{49:384}),o($V2,$V7,{46:385}),o($VQ,$VB),o($VQ,$VC),o($VQ,$VD),o($VQ,$Ve),o($VQ,$Vf),o($VQ,$VE,{56:386,57:387,58:[1,388],59:[1,389]}),o($VQ,$VF),o($VQ,$VG),o($VQ,$VH),o($VQ,$VI),o($VQ,$VJ),o($VW,$VL),o($VW,$VM),o($VW,$VN),o($VW,$VO),{16:$Vw1,17:$Vx1,23:394,32:390,38:391,39:392,40:393,41:395,42:402,43:403,44:404,45:[1,401],48:[1,400],52:[1,408],53:[1,409],54:[1,410],55:407,60:[1,411],61:[1,412],62:[1,413],63:[1,414],64:[1,415],65:[1,416],66:397,67:$Vy1,68:[1,398],69:[1,399]},{16:$Vh,17:$Vi,23:59,38:56,39:57,40:58,41:60,42:67,43:68,44:69,45:$Vj,48:$Vk,50:[1,417],51:55,52:$Vl,53:$Vm,54:$Vn,55:72,60:$Vo,61:$Vp,62:$Vq,63:$Vr,64:$Vs,65:$Vt,66:62,67:$Vu,68:$Vv,69:$Vw},{16:$V3,17:$V4,22:418,25:53,36:34,37:$V5,38:36,66:38,67:$V6},o($VQ,$V$),o($VQ,$V01),o($VQ,$V11),{16:$Vt1,17:$Vu1,38:419,66:363,67:$Vv1},o($V51,$Vm1),o($V51,$VR),o($V51,$VS),o($V51,$VT),o($V51,$VU),o($V51,$VV),o($V51,$V8),o($V51,$V9),o($V51,$Va),o($V51,$Vb),o($Vc,$Vd,{49:420}),o($V2,$V7,{46:421}),o($V51,$VB),o($V51,$VC),o($V51,$VD),o($V51,$Ve),o($V51,$Vf),o($V51,$VE,{56:422,57:423,58:[1,424],59:[1,425]}),o($V51,$VF),o($V51,$VG),o($V51,$VH),o($V51,$VI),o($V51,$VJ),o($V61,$VL),o($V61,$VM),o($V61,$VN),o($V61,$VO),o($VQ,$VA),{47:[1,426]},o($VQ,$V71),{16:$Vh,17:$Vi,23:59,38:56,39:57,40:58,41:60,42:67,43:68,44:69,45:$Vj,48:$Vk,50:[1,427],51:55,52:$Vl,53:$Vm,54:$Vn,55:72,60:$Vo,61:$Vp,62:$Vq,63:$Vr,64:$Vs,65:$Vt,66:62,67:$Vu,68:$Vv,69:$Vw},{16:$V3,17:$V4,22:428,25:53,36:34,37:$V5,38:36,66:38,67:$V6},o($V51,$V$),o($V51,$V01),o($V51,$V11),{16:$Vw1,17:$Vx1,38:429,66:397,67:$Vy1},o($VQ,$VX),o($V51,$VA),{47:[1,430]},o($V51,$V71),o($V51,$VX)];
        this.defaultActions = {4:[2,1],31:[2,16],32:[2,18],47:[2,15]};
    }
    performAction (yytext, yyleng, yylineno, yy, yystate /* action[1] */, $$ /* vstack */, _$ /* lstack */) {
/* this == yyval */
          const $0 = $$.length - 1;
        switch (yystate) {
case 1:

        return { statementList: $$[$0-2].concat($$[$0-1]) };
      
break;
case 2:
this.$ = yy.getWhitespace();
break;
case 3: case 17: case 21: case 24: case 28: case 47:
this.$ = [];
break;
case 4: case 27:
this.$ = $$[$0-1].concat($$[$0]);
break;
case 11:

        yy._prefixes[$$[$0-2].slice(0, -1)] = $$[$0-1];
      
break;
case 12:

        yy._setBase(yy._base === null ||
                    absoluteIRI.test($$[$0-1].slice(1, -1)) ? $$[$0-1].slice(1, -1) : yy._resolveIRI($$[$0-1].slice(1, -1)));
      
break;
case 13:

        yy._prefixes[$$[$0-2].slice(0, -1)] = $$[$0].value;
        this.$ = [{ "type": "sparqlPrefix", ws1: $$[$0-3], prefix: $$[$0-2], ws2: $$[$0-1], namespace: $$[$0] }].concat(yy.getWhitespace());
      
break;
case 14:

        yy._setBase(yy._base === null ||
                    absoluteIRI.test($$[$0].slice(1, -1)) ? $$[$0].slice(1, -1) : yy._resolveIRI($$[$0].slice(1, -1)));
      
break;
case 15:
this.$ = yy.finishSubject([{ type: "subject_predicateObjectList", subject: $$[$0-2], ws1: $$[$0-1], predicateObjectList: $$[$0]}].concat(yy.getWhitespace()));
break;
case 16:
this.$ = yy.finishSubject($$[$0-1].concat($$[$0])) // blankNodePropertyList _QpredicateObjectList_E_Opt;
break;
case 19:
this.$ = { type: "verb_objectList", verb: $$[$0-4], ws1: $$[$0-3], objectList: $$[$0-2].concat($$[$0-1], $$[$0]) } // verb objectList _Q_O_QGT_SEMI_E_S_Qverb_E_S_QobjectList_E_Opt_C_E_Star;
break;
case 20: case 23:
this.$ = $$[$0];
break;
case 25:
this.$ = $$[$0-1].concat($$[$0]) // Q_O_QGT_SEMI_E_S_Qverb_E_S_QobjectList_E_Opt_C_E_Star _O_QGT_SEMI_E_S_Qverb_E_S_QobjectList_E_Opt_C;
break;
case 26:
this.$ = yy.finishObjectList($$[$0-2].concat($$[$0-1], $$[$0])) // object _Q_O_QGT_COMMA_E_S_Qobject_E_C_E_Star;
break;
case 29:
this.$ = $$[$0-1].concat($$[$0]) // Q_O_QGT_COMMA_E_S_Qobject_E_C_E_Star _O_QGT_COMMA_E_S_Qobject_E_C;
break;
case 30:
this.$ = yy.setPredicate($$[$0]);
break;
case 31:
this.$ = yy.setPredicate({ "type": "a", "origText": "a" }) // left is a token, right a const;
break;
case 32: case 33:
this.$ = yy.setSubject($$[$0]);
break;
case 34:
this.$ = yy.collectionSubject($$[$0]);
break;
case 36: case 37: case 40:
this.$ = [yy.finishTriple($$[$0])];
break;
case 38:
this.$ = [yy.finishTriple($$[$0][0].subject)].concat($$[$0]) // collection;
break;
case 39:
this.$ = [yy.finishTriple($$[$0][0].subject)].concat($$[$0]) // blankNodePropertyList;
break;
case 44:
this.$ = yy.finishBlankNodePropertyList($$[$0-1], $$[$0-2]);
break;
case 45:
this.$ = yy.startBlankNodePropertyList();;
break;
case 46:
this.$ = $$[$0-1];
break;
case 48:
this.$ = $$[$0-1].concat($$[$0]) // Qobject_E_Star object;
break;
case 49: case 50: case 53:
this.$ = {node: $$[$0], nested: []};
break;
case 51:
this.$ = yy.makeFirstRest($$[$0]) // collection;
break;
case 52:
this.$ = {node: $$[$0][0].subject, nested: $$[$0]} // blankNodePropertyList;
break;
case 54:
this.$ = yy.createLiteral($$[$0], XSD_INTEGER);
break;
case 55:
this.$ = yy.createLiteral($$[$0], XSD_DECIMAL);
break;
case 56:
this.$ = yy.createLiteral($$[$0], XSD_DOUBLE);
break;
case 57:
this.$ = yy.createLiteral($$[$0-1], $$[$0]);
break;
case 60:
this.$ = null;
break;
case 62: case 63:
this.$ = yy.createLiteral($$[$0], XSD_BOOLEAN);
break;
case 64:
this.$ = { type: "STRING_LITERAL1", value: unescapeString($$[$0], 1), origText: $$[$0] };
break;
case 65:
this.$ = { type: "STRING_LITERAL2", value: unescapeString($$[$0], 1), origText: $$[$0] };
break;
case 66: case 67:
this.$ = { type: "STRING_LITERAL_LONG1", value: unescapeString($$[$0], 3), origText: $$[$0] };
break;
case 70:

        const namePos1 = $$[$0].indexOf(':');
        const prefix = $$[$0].substring(0, namePos1);
        const localName = $$[$0].substring(namePos1 + 1);
        const unescaped = unescapeText(localName, pnameEscapeReplacements);
        const value = yy.expandPrefix(prefix) + unescaped;
        this.$ = { "type": "pname", "value": value, "prefix": { "type": "prefix", "value": prefix, "origText": prefix + ":"}, "localName": { "type": "localName", "value": unescaped, "origText": localName} }
      
break;
case 71:

        this.$ = yy.expandPrefix($$[$0].substr(0, $$[$0].length - 1), yy);
      
break;
case 72:
this.$ = yy.createBlankNode($$[$0]);
break;
case 73:
this.$ = yy.createBlankNode();
break;
        }
    }
}

// Export module
Object.defineProperty(exports, "__esModule", { value: true });
exports.TurtleJisonParser = TurtleJisonParser;


/* generated by @ts-jison/lexer-generator 0.4.1-alpha.2 */
const { JisonLexer } = require('@ts-jison/lexer');

class TurtleJisonLexer extends JisonLexer {
    constructor (yy = {}) {
        super(yy);
        this.options = {"moduleName":"TurtleJison"};
        this.rules = [
        /^(?:\s+)/,
        /^(?:#[^\u000a\u000d]*|\/\*(?:[^*]|\*(?:[^/]|\\\/))*\*\/)/,
        /^(?:\.)/,
        /^(?:;)/,
        /^(?:,)/,
        /^(?:\[)/,
        /^(?:\])/,
        /^(?:\()/,
        /^(?:\))/,
        /^(?:\^\^)/,
        /^(?:true\b)/,
        /^(?:false\b)/,
        /^(?:[Pp][Rr][Ee][Ff][Ii][Xx])/,
        /^(?:[Bb][Aa][Ss][Ee])/,
        /^(?:@base\b)/,
        /^(?:@prefix\b)/,
        /^(?:<(?:[^\u0000-\u0020<>\"{}|^`\\]|\\u(?:[0-9]|[A-F]|[a-f])(?:[0-9]|[A-F]|[a-f])(?:[0-9]|[A-F]|[a-f])(?:[0-9]|[A-F]|[a-f])|\\U(?:[0-9]|[A-F]|[a-f])(?:[0-9]|[A-F]|[a-f])(?:[0-9]|[A-F]|[a-f])(?:[0-9]|[A-F]|[a-f])(?:[0-9]|[A-F]|[a-f])(?:[0-9]|[A-F]|[a-f])(?:[0-9]|[A-F]|[a-f])(?:[0-9]|[A-F]|[a-f]))*>)/,
        /^(?:(?:(?:[A-Z]|[a-z]|[\u00c0-\u00d6]|[\u00d8-\u00f6]|[\u00f8-\u02ff]|[\u0370-\u037d]|[\u037f-\u1fff]|[\u200c-\u200d]|[\u2070-\u218f]|[\u2c00-\u2fef]|[\u3001-\ud7ff]|[\uf900-\ufdcf]|[\ufdf0-\ufffd]|[\uD800-\uDB7F][\uDC00-\uDFFF])(?:(?:[A-Z]|[a-z]|[\u00c0-\u00d6]|[\u00d8-\u00f6]|[\u00f8-\u02ff]|[\u0370-\u037d]|[\u037f-\u1fff]|[\u200c-\u200d]|[\u2070-\u218f]|[\u2c00-\u2fef]|[\u3001-\ud7ff]|[\uf900-\ufdcf]|[\ufdf0-\ufffd]|[\uD800-\uDB7F][\uDC00-\uDFFF]|_|_|-|[0-9]|[\u00b7]|[\u0300-\u036f]|[\u203f-\u2040]|\.)*(?:[A-Z]|[a-z]|[\u00c0-\u00d6]|[\u00d8-\u00f6]|[\u00f8-\u02ff]|[\u0370-\u037d]|[\u037f-\u1fff]|[\u200c-\u200d]|[\u2070-\u218f]|[\u2c00-\u2fef]|[\u3001-\ud7ff]|[\uf900-\ufdcf]|[\ufdf0-\ufffd]|[\uD800-\uDB7F][\uDC00-\uDFFF]|_|_|-|[0-9]|[\u00b7]|[\u0300-\u036f]|[\u203f-\u2040]))?)?:(?:[A-Z]|[a-z]|[\u00c0-\u00d6]|[\u00d8-\u00f6]|[\u00f8-\u02ff]|[\u0370-\u037d]|[\u037f-\u1fff]|[\u200c-\u200d]|[\u2070-\u218f]|[\u2c00-\u2fef]|[\u3001-\ud7ff]|[\uf900-\ufdcf]|[\ufdf0-\ufffd]|[\uD800-\uDB7F][\uDC00-\uDFFF]|_|_|:|[0-9]|%(?:[0-9]|[A-F]|[a-f])(?:[0-9]|[A-F]|[a-f])|\\(?:_|~|\.|-|!|\$|&|'|\(|\)|\*|\+|,|;|=|\/|\?|#|@|%))(?:[A-Z]|[a-z]|[\u00c0-\u00d6]|[\u00d8-\u00f6]|[\u00f8-\u02ff]|[\u0370-\u037d]|[\u037f-\u1fff]|[\u200c-\u200d]|[\u2070-\u218f]|[\u2c00-\u2fef]|[\u3001-\ud7ff]|[\uf900-\ufdcf]|[\ufdf0-\ufffd]|[\uD800-\uDB7F][\uDC00-\uDFFF]|_|_|-|[0-9]|[\u00b7]|[\u0300-\u036f]|[\u203f-\u2040]|\.|:|%(?:[0-9]|[A-F]|[a-f])(?:[0-9]|[A-F]|[a-f])|\\(?:_|~|\.|-|!|\$|&|'|\(|\)|\*|\+|,|;|=|\/|\?|#|@|%))*)/,
        /^(?:(?:(?:[A-Z]|[a-z]|[\u00c0-\u00d6]|[\u00d8-\u00f6]|[\u00f8-\u02ff]|[\u0370-\u037d]|[\u037f-\u1fff]|[\u200c-\u200d]|[\u2070-\u218f]|[\u2c00-\u2fef]|[\u3001-\ud7ff]|[\uf900-\ufdcf]|[\ufdf0-\ufffd]|[\uD800-\uDB7F][\uDC00-\uDFFF])(?:(?:[A-Z]|[a-z]|[\u00c0-\u00d6]|[\u00d8-\u00f6]|[\u00f8-\u02ff]|[\u0370-\u037d]|[\u037f-\u1fff]|[\u200c-\u200d]|[\u2070-\u218f]|[\u2c00-\u2fef]|[\u3001-\ud7ff]|[\uf900-\ufdcf]|[\ufdf0-\ufffd]|[\uD800-\uDB7F][\uDC00-\uDFFF]|_|_|-|[0-9]|[\u00b7]|[\u0300-\u036f]|[\u203f-\u2040]|\.)*(?:[A-Z]|[a-z]|[\u00c0-\u00d6]|[\u00d8-\u00f6]|[\u00f8-\u02ff]|[\u0370-\u037d]|[\u037f-\u1fff]|[\u200c-\u200d]|[\u2070-\u218f]|[\u2c00-\u2fef]|[\u3001-\ud7ff]|[\uf900-\ufdcf]|[\ufdf0-\ufffd]|[\uD800-\uDB7F][\uDC00-\uDFFF]|_|_|-|[0-9]|[\u00b7]|[\u0300-\u036f]|[\u203f-\u2040]))?)?:)/,
        /^(?:_:(?:[A-Z]|[a-z]|[\u00c0-\u00d6]|[\u00d8-\u00f6]|[\u00f8-\u02ff]|[\u0370-\u037d]|[\u037f-\u1fff]|[\u200c-\u200d]|[\u2070-\u218f]|[\u2c00-\u2fef]|[\u3001-\ud7ff]|[\uf900-\ufdcf]|[\ufdf0-\ufffd]|[\uD800-\uDB7F][\uDC00-\uDFFF]|_|_|[0-9])(?:(?:[A-Z]|[a-z]|[\u00c0-\u00d6]|[\u00d8-\u00f6]|[\u00f8-\u02ff]|[\u0370-\u037d]|[\u037f-\u1fff]|[\u200c-\u200d]|[\u2070-\u218f]|[\u2c00-\u2fef]|[\u3001-\ud7ff]|[\uf900-\ufdcf]|[\ufdf0-\ufffd]|[\uD800-\uDB7F][\uDC00-\uDFFF]|_|_|-|[0-9]|[\u00b7]|[\u0300-\u036f]|[\u203f-\u2040]|\.)*(?:[A-Z]|[a-z]|[\u00c0-\u00d6]|[\u00d8-\u00f6]|[\u00f8-\u02ff]|[\u0370-\u037d]|[\u037f-\u1fff]|[\u200c-\u200d]|[\u2070-\u218f]|[\u2c00-\u2fef]|[\u3001-\ud7ff]|[\uf900-\ufdcf]|[\ufdf0-\ufffd]|[\uD800-\uDB7F][\uDC00-\uDFFF]|_|_|-|[0-9]|[\u00b7]|[\u0300-\u036f]|[\u203f-\u2040]))?)/,
        /^(?:@[A-Za-z]+(?:-[0-9A-Za-z]+)*)/,
        /^(?:[+-]?[0-9]+)/,
        /^(?:[+-]?[0-9]*\.[0-9]+)/,
        /^(?:[+-]?(?:[0-9]+\.[0-9]*[Ee][+-]?[0-9]+|\.?[0-9]+[Ee][+-]?[0-9]+))/,
        /^(?:'(?:[^\u0027\u005c\u000a\u000d]|\\[\"\'\\bfnrt]|\\u(?:[0-9]|[A-F]|[a-f])(?:[0-9]|[A-F]|[a-f])(?:[0-9]|[A-F]|[a-f])(?:[0-9]|[A-F]|[a-f])|\\U(?:[0-9]|[A-F]|[a-f])(?:[0-9]|[A-F]|[a-f])(?:[0-9]|[A-F]|[a-f])(?:[0-9]|[A-F]|[a-f])(?:[0-9]|[A-F]|[a-f])(?:[0-9]|[A-F]|[a-f])(?:[0-9]|[A-F]|[a-f])(?:[0-9]|[A-F]|[a-f]))*')/,
        /^(?:"(?:[^\u0022\u005c\u000a\u000d]|\\[\"\'\\bfnrt]|\\u(?:[0-9]|[A-F]|[a-f])(?:[0-9]|[A-F]|[a-f])(?:[0-9]|[A-F]|[a-f])(?:[0-9]|[A-F]|[a-f])|\\U(?:[0-9]|[A-F]|[a-f])(?:[0-9]|[A-F]|[a-f])(?:[0-9]|[A-F]|[a-f])(?:[0-9]|[A-F]|[a-f])(?:[0-9]|[A-F]|[a-f])(?:[0-9]|[A-F]|[a-f])(?:[0-9]|[A-F]|[a-f])(?:[0-9]|[A-F]|[a-f]))*")/,
        /^(?:'''(?:(?:'|'')?(?:[^\'\\]|\\[\"\'\\bfnrt]|\\u(?:[0-9]|[A-F]|[a-f])(?:[0-9]|[A-F]|[a-f])(?:[0-9]|[A-F]|[a-f])(?:[0-9]|[A-F]|[a-f])|\\U(?:[0-9]|[A-F]|[a-f])(?:[0-9]|[A-F]|[a-f])(?:[0-9]|[A-F]|[a-f])(?:[0-9]|[A-F]|[a-f])(?:[0-9]|[A-F]|[a-f])(?:[0-9]|[A-F]|[a-f])(?:[0-9]|[A-F]|[a-f])(?:[0-9]|[A-F]|[a-f])))*''')/,
        /^(?:"""(?:(?:"|"")?(?:[^\"\\]|\\[\"\'\\bfnrt]|\\u(?:[0-9]|[A-F]|[a-f])(?:[0-9]|[A-F]|[a-f])(?:[0-9]|[A-F]|[a-f])(?:[0-9]|[A-F]|[a-f])|\\U(?:[0-9]|[A-F]|[a-f])(?:[0-9]|[A-F]|[a-f])(?:[0-9]|[A-F]|[a-f])(?:[0-9]|[A-F]|[a-f])(?:[0-9]|[A-F]|[a-f])(?:[0-9]|[A-F]|[a-f])(?:[0-9]|[A-F]|[a-f])(?:[0-9]|[A-F]|[a-f])))*""")/,
        /^(?:\\\[(?: |\\t|\\r|\\n)*\\\])/,
        /^(?:a\b)/,
        /^(?:$)/,
        /^(?:[a-zA-Z0-9_-]+)/,
        /^(?:.)/
    ];
        this.conditions = {"INITIAL":{"rules":[0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32],"inclusive":true}};
    }
    performAction (yy, yy_, $avoiding_name_collisions, YY_START) {
              let YYSTATE = YY_START;
            switch ($avoiding_name_collisions) {
    case 0:
  // space eaten by whitespace and comments
  if (yy.skipped.last_line === yy_.yylloc.first_line &&
      yy.skipped.last_column === yy_.yylloc.first_column) {
    // immediately follows a skipped span
    yy.skipped.last_line = yy_.yylloc.last_line;
    yy.skipped.last_column = yy_.yylloc.last_column;
  } else {
    // follows something else
    yy.skipped = yy_.yylloc
  };
  yy.addWhitespace({type: "ws", origText: yy_.yytext});

      break;
    case 1:
  // space eaten by whitespace and comments
  if (yy.skipped.last_line === yy_.yylloc.first_line &&
      yy.skipped.last_column === yy_.yylloc.first_column) {
    // immediately follows a skipped span
    yy.skipped.last_line = yy_.yylloc.last_line;
    yy.skipped.last_column = yy_.yylloc.last_column;
  } else {
    // follows something else
    yy.skipped = yy_.yylloc
  };
  yy.addWhitespace(yy_.yytext);

      break;
    case 2:return 10;
    case 3:return 31;
    case 4:return 35;
    case 5:return 45;
    case 6:return 47;
    case 7:return 48;
    case 8:return 50;
    case 9:return 59;
    case 10:return 60;
    case 11:return 61;
    case 12:return 19;
    case 13:return 20;
    case 14:return 18;
    case 15:return 15;
    case 16:const unesc = unescapeText(yy_.yytext.substring(1, yy_.yytext.length - 1), {}); yy_.yytext = { "type": "relativeUrl", "value": yy._base === null || absoluteIRI.test(unesc) ? unesc : yy._resolveIRI(unesc) , "origText": yy_.yytext }; return 17;
    case 17:return 67;
    case 18:return 16;
    case 19:return 68;
    case 20:return 58;
    case 21:return 52;
    case 22:return 53;
    case 23:return 54;
    case 24:return 62;
    case 25:return 63;
    case 26:return 64;
    case 27:return 65;
    case 28:return 69;
    case 29:return 37;
    case 30:return 6;
    case 31:return 'unexpected word "'+yy_.yytext+'"';
    case 32:return 'invalid character '+yy_.yytext;
        }
    }
}


// Export module
Object.defineProperty(exports, "__esModule", { value: true });
exports.TurtleJisonLexer = TurtleJisonLexer;

